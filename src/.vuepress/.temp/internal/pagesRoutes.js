import { Vuepress } from '@vuepress/client/lib/components/Vuepress'

const routeItems = [
  ["v-8daa1a0e","/",{"title":"主页","icon":"home","type":"home","readingTime":{"minutes":0.17,"words":50},"excerpt":"这是一个博客主页。 要使用此布局，你应该在页面前端设置 layout: Blog 和 home: true。 相关配置文档请见 博客主页。"},["/index.html","/README.md"]],
  ["v-623686a2","/automate/",{"title":"自动化工具","type":"article","readingTime":{"minutes":0.02,"words":5},"excerpt":"自动化工具"},["/automate/index.html","/automate/readme.md"]],
  ["v-7664c5fa","/basic/",{"title":"基础知识","type":"article","readingTime":{"minutes":0.01,"words":4},"excerpt":"基础知识"},["/basic/index.html","/basic/readme.md"]],
  ["v-60fff667","/build/activemq-install.html",{"title":"activemq5.15.9集群搭建步骤","type":"article","readingTime":{"minutes":2.01,"words":603},"excerpt":"activemq5.15.9集群搭建步骤 下载解压软件 修改主机名 三台主机三分别操作\r\" 注意主机名的设置，不能带下划线，否则会报错\" 修改配置文件 修改以下文件\r\" brokaerName三台主机名称必须一致\" 注释掉``这一行 新增下面内容 directory=\"${activemq.data}/leveldb\" 集群方式 replicas=\"3\" 集","category":["常见服务的搭建"],"tag":["activemq"]},["/build/activemq-install","/build/activemq-install.md"]],
  ["v-4378712f","/build/centos-jdk.html",{"title":"Linux下配置jdk的环境变量","type":"article","readingTime":{"minutes":0.88,"words":265},"excerpt":"Linux下配置jdk的环境变量 Hello everyone, let's learn jdk together！ yum安装 yum 查询可以安装的软件 根据需求选择版本进行安装 rpm安装 jdk官网地址为：http://www.oracle.com 各个版本的下载地址为：http://www.oracle.com/technetwork/java/j","category":["常见服务的搭建"],"tag":["jdk"]},["/build/centos-jdk","/build/centos-jdk.md"]],
  ["v-049a4574","/build/centos7-shadowsocks.html",{"title":"centos7下搭建shadowsocks","type":"article","readingTime":{"minutes":1.61,"words":483},"excerpt":"centos7下搭建shadowsocks 安装pip 由于安装的是python 版本的 shadowsocks，所以首先安装pip 安装shadowsocks 创建配置文件 创建文件所在目录:/etc 配置文件内容： 启动shadowsocks 启动成功即可通过ss客户端使用。 在window端可以在控制台通过以下命令查看端口是否打开 配置自启动 新建启动","category":["常见服务的搭建"],"tag":["shadowsocks"]},["/build/centos7-shadowsocks","/build/centos7-shadowsocks.md"]],
  ["v-0762666e","/build/docker-confluence.html",{"title":"基于docker搭建confluence","type":"article","readingTime":{"minutes":3.22,"words":967},"excerpt":"基于docker搭建confluence 系统版本：centos7 安装docker 1. yum安装docker 2. 开启镜像加速 由于国内网络问题拉取 Docker 镜像会十分缓慢，所以可以添加网易镜像地址：http://hub-mirror.c.163.com 加速。 将其中的内容替换为如下，当然你可以添加其它镜像地址。 3. 启动docker 安装","category":["常见服务的搭建"],"tag":["confluence"]},["/build/docker-confluence","/build/docker-confluence.md"]],
  ["v-16b6b750","/build/fastdfs-install.html",{"title":"分布式FastDfs+nginx缓存高可用集群构建","type":"article","readingTime":{"minutes":8.22,"words":2467},"excerpt":"分布式FastDfs+nginx缓存高可用集群构建 介绍 FastDFS：开源的高性能分布式文件系统；主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡 FastDFS：角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client) 1. Tracker Server: 跟踪服务器，主要做调","category":["常见服务的搭建"],"tag":["fastdfs"]},["/build/fastdfs-install","/build/fastdfs-install.md"]],
  ["v-763ef6d8","/build/hexo-blog.html",{"title":"hexo(next)+github博客的搭建","type":"article","readingTime":{"minutes":7.59,"words":2276},"excerpt":"​\t本文主要讲解博客的搭建过程，next主题优化，next配置文件详解等。 hexo+github的搭建过程2 准备安装软件 依次安装 Node.js; Git; 配置和使用github 注册github 访问github.com右上角singnup uername 最好都用小写，因为最后建立的博客地址是：http://username.github.io；","date":"2016-06-06T14:00:00.000Z","category":["常见服务的搭建"],"tag":["博客"]},["/build/hexo-blog","/build/hexo-blog.md"]],
  ["v-d22f44ac","/build/linux-python.html",{"title":"centos6.5下安装python3.6、pip、ipython","type":"article","readingTime":{"minutes":0.98,"words":293},"excerpt":"centos6.5下安装python3.6、pip、ipython 安装依赖包 test 开始下载、编译、安装python3.6 检查是否安装成功 安装pip（pip-9.0） 安装ipython 设置 3.x 为默认版本 配置yum 升级 Python 之后，由于将默认的 python 指向了 python3，yum 不能正常使用，需要编辑 yum 的配置","date":"2017-09-27T21:00:00.000Z","category":["常见服务的搭建"]},["/build/linux-python","/build/linux-python.md"]],
  ["v-a5639d14","/build/maven-nexus.html",{"title":"maven私服nexus3.x环境配置","type":"article","readingTime":{"minutes":8.9,"words":2669},"excerpt":"maven私服nexus3.x环境配置\r\" 转载自：maven私服nexus3.x环境配置 | 飞污熊博客\" 私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构建。 有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库； 否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下","date":"2019-09-27T21:00:00.000Z","category":["常见服务的搭建"],"tag":["nexus"]},["/build/maven-nexus","/build/maven-nexus.md"]],
  ["v-9e4f7a5a","/build/rabbitmq-install.html",{"title":"centos7安装rabbitmq-3.7.9","type":"article","readingTime":{"minutes":1.02,"words":305},"excerpt":"centos7安装rabbitmq-3.7.9 安装方式：rpm包安装 系统版本: centos7.x 安装erlang 安装erlang-rpm包，该包经过RabbitMQ官方处理，去掉了一些无用的依赖，只保存运行RabbitMQ所需要的Erlang模块。 这里下载的版本为21.2 下载完后上传到服务器上，安装 安装rabbitmq 从官网下载rpm包并上","category":["常见服务的搭建"],"tag":["rabbitmq"]},["/build/rabbitmq-install","/build/rabbitmq-install.md"]],
  ["v-60544e4e","/build/rocketmq-install.html",{"title":"rocketmq集群的搭建","type":"article","readingTime":{"minutes":1.99,"words":596},"excerpt":"rocketmq集群的搭建 环境\rJDK1.8; \rmaven3.6.0; \rcentos7.6主机两台; 下载解压 修改配置文件 rocketmq默认给出了三种建议配置模式 2m-2s-async(主从异步),----本文采用这种 2m-2s-sync(主从同步) 2m-noslave(仅master) 1. 对主机一（192.168.163.196）进行","category":["常见服务的搭建"],"tag":["rocketmq"]},["/build/rocketmq-install","/build/rocketmq-install.md"]],
  ["v-5210fd8e","/build/zookeeper-install.html",{"title":"zookeeper3.4.14集群搭建步骤","type":"article","readingTime":{"minutes":1.29,"words":386},"excerpt":"zookeeper3.4.14集群搭建步骤 下载解压 修改相关配置 生产myid文件（三台主机分别执行） 修改zoo.cfg文件 修改/zkEnv.sh文件 找到 ZOOLOGDIR=\".\" 一行，换成如下 修改防火墙规则 启动集群 通过nc方式验证 通过四字命令srvr方式验证","category":["常见服务的搭建"],"tag":["zookeeper"]},["/build/zookeeper-install","/build/zookeeper-install.md"]],
  ["v-d2fece48","/git/git-basic.html",{"title":"git的基本使用","type":"article","readingTime":{"minutes":12.97,"words":3890},"excerpt":"git的基本使用 由来\r\" 要不说人家是大佬呢，一言不合就自己写一个:+1:\" 安装 下载对应操作系统的 Git 客户端版本 https://git-scm.com/downloads Linux 在centos上安装 windows 下载对应的32位或者64位版本，点击安装即可 Mac 用homebrew命令安装 核心概念 名称 释义 | --------","tag":["Git"]},["/git/git-basic","/git/git-basic.md"]],
  ["v-191529b7","/git/git-commit-message.html",{"title":"Commit message 和 Change log 编写指南","type":"article","readingTime":{"minutes":5.65,"words":1696},"excerpt":"Commit message 和 Change log 编写指南 Git 每次提交代码，都要写 Commit message（提交说明），否则就不允许提交。\r\" \" 上面代码的-m参数，就是用来指定 commit mesage 的。 如果一行不够，可以只执行git commit，就会跳出文本编辑器，让你写多行。\r\" \" 但是，一般来说，commit mess","tag":["Git"]},["/git/git-commit-message","/git/git-commit-message.md"]],
  ["v-4899a812","/monitor/grafana-y.html",{"title":"Grafana Y轴设置","type":"article","readingTime":{"minutes":0.17,"words":51},"excerpt":"Grafana Y轴设置 Y轴要有负数如何设置 grafana网络总图中，Y轴要有负数的话，需要设置，alias or regex，Outing为 Transform：negative-Y","date":"2020-06-02T00:00:00.000Z","category":["监控"],"tag":["grafana"]},["/monitor/grafana-y","/monitor/grafana-y.md"]],
  ["v-104b656e","/monitor/monitor-system.html",{"title":"聊透监控体系","type":"article","readingTime":{"minutes":16.82,"words":5047},"excerpt":"聊透监控体系 经济高速发展的今天，我们处于信息大爆炸的时代。随着经济发展，信息借助互联网的力量在全球自由地流动，于是就催生了各种各样的服务平台和软件系统。 由于业务的多样性，这些平台和系统也变得异常的复杂。如何对其进行监控和维护是我们 IT 人需要面对的重要问题。就在这样一个纷繁复杂地环境下，监控系统粉墨登场了。 今天，我们会对 IT 监控系统进行介绍，包括","category":["监控"],"sticky":10,"star":10},["/monitor/monitor-system","/monitor/monitor-system.md"]],
  ["v-420473ed","/monitor/promethues-alerts.html",{"title":"PrometheusAlert","type":"article","readingTime":{"minutes":0.85,"words":256},"excerpt":"PrometheusAlert Prometheus Alert是开源的运维告警中心消息转发系统,支持主流的监控系统Prometheus,Zabbix,日志系统Graylog和数据可视化系统Grafana发出的预警消息,支持钉钉,微信,华为云短信,腾讯云短信,腾讯云电话,阿里云短信,阿里云电话等 文档 https://feiyu563.gitbook.io/","date":"2020-11-02T00:00:00.000Z","category":["监控"],"tag":["alert"]},["/monitor/promethues-alerts","/monitor/promethues-alerts.md"]],
  ["v-2c479559","/openldap/Centos7%20%E6%90%AD%E5%BB%BAopenldap.html",{"title":"Centos7 搭建openldap","type":"article","readingTime":{"minutes":6.5,"words":1949},"excerpt":"Centos7 搭建openldap 环境：\rcentos7.6; \ropenldap 2.4.44; \rphpldapadmin 1.2.3; 安装openldap yum 安装相关包 复制一个默认配置到指定目录下,并授权，这一步一定要做，然后再启动服务，不然生产密码时会报错 授权给ldap用户,此用户yum安装时便会自动创建 启动&加入开机自启 修改op","tag":["openldap"]},["/openldap/Centos7 搭建openldap.html","/openldap/Centos7%20%E6%90%AD%E5%BB%BAopenldap","/openldap/Centos7 搭建openldap.md","/openldap/Centos7%20%E6%90%AD%E5%BB%BAopenldap.md"]],
  ["v-75a25f69","/openldap/phpldapadmin%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC.html",{"title":"phpldapadmin操作指导","type":"article","readingTime":{"minutes":0.74,"words":223},"excerpt":"phpldapadmin操作指导 1.在浏览器中打开http://IP/phpldapadmin 2. 点击【Login】按钮，输入管理员密码。 3.点击【创建新条目】. 4. 点击【Generic: Postfix Group】. 5. 输入【Users】, 点击【创建对象】 6. 点击【提交】 7. 下一步添加用户，点击刚才所创建的组【users】 8.","tag":["openldap"]},["/openldap/phpldapadmin操作指导.html","/openldap/phpldapadmin%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC","/openldap/phpldapadmin操作指导.md","/openldap/phpldapadmin%E6%93%8D%E4%BD%9C%E6%8C%87%E5%AF%BC.md"]],
  ["v-73fbd21f","/other/blog.html",{"title":"优秀的技术博客 & 在线工具","type":"article","readingTime":{"minutes":0.98,"words":295},"excerpt":"优秀的技术博客 & 在线工具 技术博客 博客地址 简介 | ------------------------------------------------------------ ------------------------------------------------------------ | 敖小剑的博客 资深码农，十九年软件开发经验，微服务专","tag":["技术博客"],"sticky":40,"star":40},["/other/blog","/other/blog.md"]],
  ["v-8d980508","/other/curl-bash.html",{"title":"curl方式执行shell脚本时如何传参","type":"article","readingTime":{"minutes":3.03,"words":910},"excerpt":"curl方式执行shell脚本时如何传参 有时候shell脚本可以放在http页面上，不用download，可以直接执行。 通常我们可以用curl的方式执行http页面上的shell脚本。 一般方式是： 这样脚本就可以在本地机器上执行了。 但是需要传入参数的脚本。我们可以用下面的方式传入shell参数\r-s方式; \r< 方式; \r\" 注意 <( 之间不要有空","date":"2020-07-27T00:00:00.000Z","tag":["奇技淫巧"]},["/other/curl-bash","/other/curl-bash.md"]],
  ["v-cc3a53f4","/other/mac-disk.html",{"title":"Mac上挂载移动硬盘出现\"Read-only file system\"问题","type":"article","readingTime":{"minutes":1.37,"words":410},"excerpt":"Mac上挂载移动硬盘出现\"Read-only file system\"问题 \" 转载自：Mac上挂载移动硬盘出现\"Read-only file system\"问题\" 解决步骤如下 1. 确保移动硬盘链接，查看硬盘挂在的节点，操作如下 找到 Device Node 比如我这里的硬盘默认挂在在/Volumes/Elements 我查看我的硬盘挂在节点信息如下 找","tag":["Mac"]},["/other/mac-disk","/other/mac-disk.md"]],
  ["v-4d7b907e","/other/mac-proxy.html",{"title":"macOS配置终端走socks5代理","type":"article","readingTime":{"minutes":0.44,"words":132},"excerpt":"macOS配置终端走socks5代理 \" 转载自：macOS配置终端走socks5代理\" 在~/.bash_profile 中添加如下内容（如果是是zsh用户那么配置文件为~/.zshrc）： 修改完成之后需要使用source ~/.bash_profile 其中，1080为端口号，需要和自己的代理软件的设置保持一致。 这样在终端中使用proxy命令就可以打","tag":["Mac"]},["/other/mac-proxy","/other/mac-proxy.md"]],
  ["v-6bac1857","/other/vim.html",{"title":"vim 使用整理","type":"article","readingTime":{"minutes":0.37,"words":111},"excerpt":"vim 使用整理 推荐文章 vim设置参数以方便YAML语句录入 大别阿郎 OSCHINA 常用命令 显示当前正在编辑的文件名 vim粘贴 vim 将文件所有行合并到一行","tag":["vim"]},["/other/vim","/other/vim.md"]],
  ["v-26fca4d5","/other/writing.html",{"title":"IT 博客写作工作","type":"article","readingTime":{"minutes":3.67,"words":1100},"excerpt":"IT 博客写作工作 写作前 trello 官网地址:https://trello.com/ 这是一款任务管理工具，类似于敏捷开发中看板，我们可以快速管理任务。 日常工作我只要想到一个 idea，就会第一时间先记录到 idea 列表中。这里千万不要高估自己的记忆力，如果想到了，感觉记录下来。以前上午灵光一现想到一个 idea，准备晚上写一下，然后晚上就想不起来","tag":["写作排版"]},["/other/writing","/other/writing.md"]],
  ["v-21814b64","/automate/ansible/ad-hoc.html",{"title":"3.1 Ansible Ad-hoc 常用命令集","type":"article","readingTime":{"minutes":13.68,"words":4103},"excerpt":"3.1 Ansible Ad-hoc 常用命令集 1 Ad-hoc简介 Ad-Hoc（点对点模式）是指ansible下临时执行的一条命令，并且不需要保存的命令，对于复杂的命令会使用playbook。Ad-hoc的执行依赖于模块，ansible官方提供了大量的模块。 如：command、raw、shell、file、cron等，具体可以通过ansible-do","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/ad-hoc","/automate/ansible/ad-hoc.md"]],
  ["v-65d6284a","/automate/ansible/advanced-playbook.html",{"title":"4.4 Playbook高级用法","type":"article","readingTime":{"minutes":7.97,"words":2390},"excerpt":"4.4 Playbook高级用法 1 本地执行 默认情况下，Ansible使用ssh去连接远程主机，但实际上它提供了多种插件来丰富连接方式：smart、ssh、paramiko、local、docker、winrm，默认为smart。 smart表示智能选择ssh和paramiko(paramiko是Python的一个ssh协议模块)，当Ansible端安装","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/advanced-playbook","/automate/ansible/advanced-playbook.md"]],
  ["v-6783a462","/automate/ansible/custom.html",{"title":"5.1 自定义变量","type":"article","readingTime":{"minutes":6.58,"words":1973},"excerpt":"5.1 自定义变量 简单说明 ansible支持变量，用于存储会在整个项目中重复使用到的一些值。以简化项目的创建与维护，降低出错的机率。 变量的定义：\r变量名应该由字母、数字下划数组成; \r变量名必须以字母开头; \ransible内置关键字不能作为变量名; 1. 在Inventory中定义变量 1.1. 定义主机变量 1.1.1. 内置主机变量 所谓内置变量","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/custom","/automate/ansible/custom.md"]],
  ["v-9f51c0b0","/automate/ansible/dir-handler.html",{"title":"4.1 Playbook的结构及handler用法","type":"article","readingTime":{"minutes":3.98,"words":1194},"excerpt":"4.1 Playbook的结构及handler用法 1 playbook的结构说明 playbook是由一个或多个\"play\"组成的列表。play的主要功能就是对一组主机应用play中定义好的task。从根本上来讲一个task就是对ansible一个module的调用。而将多个play按照一定的顺序组织到一个playbook中，我们称之为编排。 playbo","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/dir-handler","/automate/ansible/dir-handler.md"]],
  ["v-bc356518","/automate/ansible/fact.html",{"title":"5.2 Fact变量","type":"article","readingTime":{"minutes":13.72,"words":4116},"excerpt":"5.2 Fact变量 1 fact简介 为了让Ansible更了解目标节点，可以让它去收集目标节点的信息，比如获取对方的主机名、系统版本、IP地址或其它网卡信息、分区挂载信息等等。在Ansible中，收集到的这些节点信息称为Facts。 有了这些信息，用户可以更好的控制管理节点，比如当IP地址为xxx时就怎样怎样，当系统是CentOS 6时怎样怎样，是Cen","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/fact","/automate/ansible/fact.md"]],
  ["v-db2064fc","/automate/ansible/first.html",{"title":"1 初识Ansible","type":"article","readingTime":{"minutes":6.64,"words":1991},"excerpt":"1 初识Ansible 1 Ansible简介 Ansible官方文档： https://docs.ansible.com/ Ansible 是一个 IT 自动化工具。它能配置系统、部署软件、编排更复杂的 IT 任务，如连续部署或零停机时间滚动更新。 Ansible 用 python 编写，尽管市面上已经有很多可供选择的配置管理解决方案（例如 Salt，Pu","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/first","/automate/ansible/first.md"]],
  ["v-aa1d0454","/automate/ansible/inventory.html",{"title":"2 Ansible Inventory配置详解","type":"article","readingTime":{"minutes":12.17,"words":3651},"excerpt":"2 Ansible Inventory配置详解 在使用Ansible来批量管理主机的时候，通常我们需要先定义要管理哪些主机或者主机组，而这个用于管理主机与主机组的文件就叫做Inventory，也叫主机清单。 Ansible Inventory 是包含静态 Inventory 和动态 Inventory 两部分的，静态 Inventory 指的是在文件中指定的","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/inventory","/automate/ansible/inventory.md"]],
  ["v-2da6adb4","/automate/ansible/jinja2.html",{"title":"4.7 Jinja2 模板","type":"article","readingTime":{"minutes":12.95,"words":3886},"excerpt":"4.7 Jinja2 模板 Jinja2 简介 Jinja2 是什么？模板是什么？ Jinja2 是基于 python 的模板引擎。那么什么是模板？ 所谓模板，是可以在纯文本字符串中嵌入一些特殊语法格式的表达式，然后使用模板引擎去解析整个模板，将其中嵌入的特殊语法部分解析替换成对应的结果字符串。其中，解析并替换模板表达式的过程称为渲染。 为了让模板引擎只替换","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/jinja2","/automate/ansible/jinja2.md"]],
  ["v-0ed3932b","/automate/ansible/lineinfile.html",{"title":"3.2 Ansible lineinfile模块详解","type":"article","readingTime":{"minutes":4.42,"words":1326},"excerpt":"3.2 Ansible lineinfile模块详解 1 简介 之所以专门说一说这个模块，是因为lineinfile在实际使用中非常有用。 lineinfile模块用于在源文件中插入、删除、替换行，和sed命令的功能类似，也支持正则表达式匹配和替换。 实际上，在大多数时候，我们在linux上的操作，就是针对文件的操作，通过配置管理工具对配置文件作统一的配置修","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/lineinfile","/automate/ansible/lineinfile.md"]],
  ["v-cdd12534","/automate/ansible/lookup.html",{"title":"5.4 使用lookup生成变量","type":"article","readingTime":{"minutes":5.9,"words":1771},"excerpt":"5.4 使用lookup生成变量 简单说明 在通常情况下，所有的配置信息都会被作为ansible的变量保存了，而且可以保存在ansible允许定义变量的各种地方，诸如vars区段，varsfiles加载的文件中，以及hostvars和group_vars目录中。 但在有些时候，我们希望从诸如文本文件或者.csv文件中收集数据作为ansible的变量，或者直接","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/lookup","/automate/ansible/lookup.md"]],
  ["v-0cbe66b6","/automate/ansible/magic.html",{"title":"5.3 魔法变量","type":"article","readingTime":{"minutes":2.86,"words":859},"excerpt":"5.3 魔法变量 魔法变量 Ansible默认会提供一些内置的变量以实现一些特定的功能，我们称之为魔法变量。下面列举一些常用的魔法变量。 https://docs.ansible.com/ansible/latest/referenceappendices/specialvariables.html#magic 1. hostvars hostvars变量用","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/magic","/automate/ansible/magic.md"]],
  ["v-93b857ba","/automate/ansible/optimize.html",{"title":"6 Ansible使用优化","type":"article","readingTime":{"minutes":8.48,"words":2544},"excerpt":"6 Ansible使用优化 1 加大forks的值 默认forks=5，即最多5个Ansible工作进程。即便是只有6个目标节点，对于\"效率\"常挂嘴边的21世纪IT人来说，这么一点数量的工作进程，也显然是杯水车薪。 对于Ansible来说，它的的大多数任务都是分派给目标节点去执行的，所以控制端通常比较闲暇。换句话说，控制端在浪费宝贵的资源。因此，如果没有其它","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/optimize","/automate/ansible/optimize.md"]],
  ["v-9b974c32","/automate/ansible/playbook-for.html",{"title":"4.2 Playbook循环语句","type":"article","readingTime":{"minutes":6.72,"words":2015},"excerpt":"4.2 Playbook循环语句 1 简介 我们在编写playbook的时候，不可避免的要执行一些重复性操作，比如指安装软件包，批量创建用户，操作某个目录下的所有文件等。正如我们所说，ansible一门简单的自动化语言，所以流程控制、循环语句这些编程语言的基本元素它同样都具备。 loop循环，它是在Ansible 2.5版本中新添加的循环结构，等价于with","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/playbook-for","/automate/ansible/playbook-for.md"]],
  ["v-47206ac5","/automate/ansible/playbook-if.html",{"title":"4.3 Playbook条件语句","type":"article","readingTime":{"minutes":12.03,"words":3610},"excerpt":"4.3 Playbook条件语句 1 简介 在有的时候play的结果依赖于变量、fact或者是前一个任务的执行结果，或者有的时候，我们会基于上一个task执行返回的结果而决定如何执行后续的task。这个时候就需要用到条件判断。 条件语句在Ansible中的使用场景：\r在目标主机上定义了一个硬限制，比如目标主机的最小内存必须达到多少，才能执行该task; \r捕","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/playbook-if","/automate/ansible/playbook-if.md"]],
  ["v-2e67ab09","/automate/ansible/playbook-tags.html",{"title":"4.5 Playbook之tags","type":"article","readingTime":{"minutes":3.62,"words":1085},"excerpt":"4.5 Playbook之tags 1 简介 在大型项目当中，通常一个playbook会有非常多的task。而我们每次执行这个playbook时，都会将所有task运行一遍。而事实上，在实际使用过程中，我们可能只是想要执行其中的一部分任务而已，并不想把整个playbook完整跑一遍。这个时候就需要用到tags。 通过tags，我们可以给playbook中的某","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/playbook-tags","/automate/ansible/playbook-tags.md"]],
  ["v-dba63a3a","/automate/ansible/playbook.html",{"title":"4 Ansible Playbook","type":"article","readingTime":{"minutes":4.43,"words":1329},"excerpt":"4 Ansible Playbook 1 Ansible Playbook简介 Ansible 靠ansible命令是撑不起自动化管理这把大伞的，Ansible真正强大的是playbook，它才是Ansible撬动自动化管理的结实杠杆。 ansbile-playbook是一系列ansible命令的集合，利用yaml 语言编写。playbook命令根据自上而下","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/playbook","/automate/ansible/playbook.md"]],
  ["v-4b627210","/automate/ansible/qa.html",{"title":"7 常见问题","type":"article","readingTime":{"minutes":1.13,"words":338},"excerpt":"7 常见问题 4.3 关于ssh连接一些常见的错误说明 1. ERROR! to use the 'ssh' connection type with passwords, you must install the sshpass program 完整错误示例如下： 一般出现这种错误，是在通过密码验证远程被管理机的时候，需要在server端安装sshpass","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/qa","/automate/ansible/qa.md"]],
  ["v-53115c99","/automate/ansible/",{"title":"Ansible 学习笔记","type":"article","readingTime":{"minutes":0.79,"words":238},"excerpt":"Ansible 学习笔记 常用官网 Ansible Doc Ansible Galaxy 推荐教程 ansible breezey csdn :star: 一步到位玩透 Ansible 骏马金龙 51cto :star: \" 以下笔记大多数整理自以上两篇教程\" 知识体系 Hello Ansible~ 详细的核心知识点 复习思维导图 Summary 1 初识A","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"],"sticky":51,"star":51},["/automate/ansible/index.html","/automate/ansible/readme.md"]],
  ["v-29e89195","/automate/ansible/roles.html",{"title":"4.6 巧用Roles","type":"article","readingTime":{"minutes":19.3,"words":5791},"excerpt":"4.6 巧用Roles 1 如何重用Playbook 不能站在巨人肩膀上的编程语言不是好语言，支持重用机制会节省重复的调研工作上浪费大量的时间，当然也会提高可维护性。 Playbook支持两种重用机制，一种是重用静态Playbook脚本，另外一种是类似于编程语言中函数的机制。\rinclude语句 - 重用静态的Playbook脚本，使用起来简单、直接。; \r","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/roles","/automate/ansible/roles.md"]],
  ["v-cdb6e4aa","/automate/ansible/var.html",{"title":"5 Ansible变量","type":"article","readingTime":{"minutes":1.28,"words":384},"excerpt":"5 Ansible变量 变量优先级 这些变量定义的方法，它们的优先级如下： 1. 在命令行中定义的变量（即用-e或--extra-vars定义的变量）； 2. 在Inventory中定义的连接变量（比如：ansiblesshuser）; 3. 大多数的其他变量（命令行转换、play中的变量、included的变量、role中的变量等）； 4. 在Invent","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/var","/automate/ansible/var.md"]],
  ["v-0b896180","/automate/ansible/vault.html",{"title":"5.5 使用vault配置加密","type":"article","readingTime":{"minutes":1.04,"words":312},"excerpt":"5.5 使用vault配置加密 1 简介 在使用ansible的过程中，不可避免的会存储一些敏感信息，比如在变量文件中存储帐号密码信息等。 ansible通过ansible-vault命令行工具来提供对敏感文件的加密和解密。 ansible-vault可以创建、加密、解密和查看文件。其可以加密任何ansible使用的文件，包括inventory文件，play","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/vault","/automate/ansible/vault.md"]],
  ["v-b35dd3ce","/automate/ansible/yaml.html",{"title":"4.8 yaml语法","type":"article","readingTime":{"minutes":2.51,"words":754},"excerpt":"4.8 yaml语法 playbook的语法：YAML ansible的playbook采用yaml语法，它以非常简洁的方式实现了json格式的事件描述。 yaml之于json就像markdown之于html一样，极度简化了json的书写。 YAML文件后缀通常为.yaml或.yml。 YAML在不少工具里都使用，学习它是\"一次学习、终生受益\"的，所以很有必","date":"2020-03-20T00:00:00.000Z","category":["自动化工具"],"tag":["Ansible"]},["/automate/ansible/yaml","/automate/ansible/yaml.md"]],
  ["v-71690632","/automate/gitlab/",{"title":"gitlab备份迁移升级&集成openldap","type":"article","readingTime":{"minutes":3.6,"words":1081},"excerpt":"gitlab备份迁移升级&集成openldap gitlab安装 安装相关依赖 镜像切换 切换为国内的清华源 由于不同版本号的备份文件不能相互使用，下载旧gitlab中的对应的版本 配置使用 安装完成之后，可以在/etc/gitblab/gitlab.rb中按照需求修改配置， 主要需要修改external_url，改成自己使用的 url 地址。 执行命令配置","date":"2019-12-20T00:00:00.000Z","category":["自动化工具"],"tag":["Gitlab"]},["/automate/gitlab/index.html","/automate/gitlab/readme.md"]],
  ["v-2fdcbfee","/automate/jenkins/ansible-install.html",{"title":"2.3 使用 ansible 安装 jenkins","type":"article","readingTime":{"minutes":0.44,"words":133},"excerpt":"2.3 使用 ansible 安装 jenkins\r\" 经实验：ansible 2.7.10版本可以安装 jenkins 2.210版本\"\r\"\"\r\" 安装更高版本，请一并升级ansible，低版本ansible在安装插件时会报如下错误：\"\r\"\"\r\" \" ansible安装jenkins galaxy中有详细的文档说明：\r\" 链接地址：https://gala","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/ansible-install","/automate/jenkins/ansible-install.md"]],
  ["v-129202da","/automate/jenkins/api.html",{"title":"3.2 访问 API","type":"article","readingTime":{"minutes":6.36,"words":1909},"excerpt":"3.2 访问 API\r\" 转载自：访问API willseecloud 看云\" 远程访问API Jenkins为功能提供了机器消耗的远程访问API。目前，它具有三种风格： 1. XML 2. JSON with JSONP support 3. Python 远程访问API以类似REST的样式提供。也就是说，没有所有功能的单个入口点，而是在\".../api/","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/api","/automate/jenkins/api.md"]],
  ["v-94bb6510","/automate/jenkins/build-tools.html",{"title":"5.1 构建发布工具集成","type":"article","readingTime":{"minutes":0.59,"words":176},"excerpt":"5.1 构建发布工具集成 安装完成后，配置管理工具 安装并配置 git 编辑git环境变量为/usr/bin/git 安装并配置 maven vim /etc/profile.d/maven.sh 编辑maven的环境变量为/usr/local/maven 安装并配置 ansible 编辑ansible的环境变量为/usr/bin 安装并配置 node 参考","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/build-tools","/automate/jenkins/build-tools.md"]],
  ["v-a6cec512","/automate/jenkins/cicd.html",{"title":"1.1 DevOps、CI、CD都是什么鬼？","type":"article","readingTime":{"minutes":4.46,"words":1338},"excerpt":"1.1 DevOps、CI、CD都是什么鬼？\r\" 转载自：DevOps、CI、CD都是什么鬼？| 晶晶的博客\" DevOps DevOps是Development和Operations的组合，是一种方法论，是一组过程、方法与系统的统称，用于促进应用开发、应用运维和质量保障（QA）部门之间的沟通、协作与整合。以期打破传统开发和运营之间的壁垒和鸿沟。 DevOp","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/cicd","/automate/jenkins/cicd.md"]],
  ["v-30b54790","/automate/jenkins/dingding-plugin.html",{"title":"4.5 共享库之钉钉消息推送","type":"article","readingTime":{"minutes":2.56,"words":768},"excerpt":"4.5 共享库之钉钉消息推送 起因：执行完流水线后进行一定程度的消息推送，所以选择钉钉进行jenkins构建结构的消息推送 下载配置相关依赖插件 相关环境：\rJenkins 2.277.3，安装文档见上篇; \rDingTalk 插件 2.4.3; \rbuild user vars plugin 插件 1.7; 1. 在Jenkins中安装钉钉插件DingTa","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/dingding-plugin","/automate/jenkins/dingding-plugin.md"]],
  ["v-1496f6a7","/automate/jenkins/docker-install-jenkins.html",{"title":"2.4 使用docker安装jenkins","type":"article","readingTime":{"minutes":2.29,"words":688},"excerpt":"2.4 使用docker安装jenkins 安装配置docker 1. 更换yum源，如果本来就是国内源，无需更换 2. 安装配置Docker 使用官方脚本安装 Docker 加载br_netfilter 设置下系统内核参数\r\" ⚠️ 慎用sysctl --system命令，如果参数在不同文件中设置，会有优先级问题，目前看来/etc/sysctl.conf的","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/docker-install-jenkins","/automate/jenkins/docker-install-jenkins.md"]],
  ["v-67430d44","/automate/jenkins/first.html",{"title":"1.2 Jenkins简介","type":"article","readingTime":{"minutes":3.66,"words":1097},"excerpt":"1.2 Jenkins简介 简单介绍 Jenkins前身是Hudson，Jenkins是一款开源 CI&CD 软件，基于Java开发，用于自动化各种任务，包括构建、测试和部署软件。 Jenkins 支持各种运行方式，可通过系统包、Docker 或者通过一个独立的 Java 程序。 Jenkins 项目产生两个发行线, 长期支持版本 (LTS) 和每周更新版本","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/first","/automate/jenkins/first.md"]],
  ["v-625837f8","/automate/jenkins/groovy-simple-tutorial.html",{"title":"4.3 Groovy 简明教程","type":"article","readingTime":{"minutes":6.1,"words":1829},"excerpt":"4.3 Groovy 简明教程\r\" 转载自：Groovy 简明教程 | 阳明的博客\" 最近一直有很多同学提到不会写 Jenkins Pipeline 脚本，我都是直接摔一个 Jenkins 官方文档给他们，但是当我自己仔细去查看资料的时候发现并非如此简单，无论是声明式还是脚本式的 Pipeline 都依赖了 Groovy 脚本，所以如果要很好的掌握 Pipe","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/groovy-simple-tutorial","/automate/jenkins/groovy-simple-tutorial.md"]],
  ["v-31e51bd8","/automate/jenkins/jenkins-shared-library.html",{"title":"4.4 Jenkins共享库应用","type":"article","readingTime":{"minutes":5.06,"words":1518},"excerpt":"4.4 Jenkins共享库应用 由来与演进 在Jenkins 1.x中，对于job的配置大多是基于图形界面的，也就是说，要在GUI页面手动设置相关的job参数。 随着不同类型和用途的job越来越多，参数越来越复杂，难以有效地管理数量庞大的图形界面配置信息，也无法有效追踪和记录配置的更改。 在Jenkins 2.0中，基于Pipeline，用户可以在一个 J","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/jenkins-shared-library","/automate/jenkins/jenkins-shared-library.md"]],
  ["v-28a541f9","/automate/jenkins/migrate-job.html",{"title":"7.1 Jenkins Job迁移","type":"article","readingTime":{"minutes":5.13,"words":1540},"excerpt":"7.1 Jenkins Job迁移 在工作中可能会遇到这样的场景，即需要把一个Jenkins Master上的job迁移到另外一台Jenkins Master上，那怎么做比较好呢？ 如果只是单独的一个job且这个job的设置很简单，这种情况下当然可以直接在新的Jenkins Master上直接创建job然后从旧的job拷贝下配置即可。但如果job很多，或者j","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/migrate-job","/automate/jenkins/migrate-job.md"]],
  ["v-180efde6","/automate/jenkins/pipeline-dev-tools.html",{"title":"4.6 流水线开发工具","type":"article","readingTime":{"minutes":1.67,"words":500},"excerpt":"4.6 流水线开发工具\r\" 转载自：流水线开发工具 | 泽阳\" 您好，本模块主要了解在流水线中常用的方法😀 ------ 片段生成器 使用片段生成器可以根据个人需要生成方法，有些方法来源于插件，则需要先安装相关的插件才能使用哦。 填写好参数后，点击生成，然后复制粘贴到Jenkinsfile 声明式语法生成器 全局变量参考 env变量 currentbuil","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/pipeline-dev-tools","/automate/jenkins/pipeline-dev-tools.md"]],
  ["v-22d732ff","/automate/jenkins/pipeline-example.html",{"title":"4.7 pipeline 生产配置实例","type":"article","readingTime":{"minutes":3,"words":899},"excerpt":"4.7 pipeline 生产配置实例 pipeline配置java项目 pipeline 配置前端项目 vue 这个jenkinsfile中有保存 制品， 需要注意的是：制品的保存时间，和jenkins丢弃旧的构建参数，相同 局部变量的定义和传递 自定义变量（局部） 环境变量（局部） exit code, stdout and stderr 返回值和输出 ","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/pipeline-example","/automate/jenkins/pipeline-example.md"]],
  ["v-a435378e","/automate/jenkins/pipelinesyntax.html",{"title":"4.2 Jenkins流水线语法","type":"article","readingTime":{"minutes":7.7,"words":2309},"excerpt":"4.2 Jenkins流水线语法 您好，本模块主要学习声明式流水线的核心语法，掌握核心语法便于编写Jenkinsfile 😀 ------ 声明式流水线 声明式Pipleine是官方推荐的语法，声明式语法更加简洁。所有的声明式Pipeline都必须包含一个 pipeline块中，比如： 在声明式Pipeline中的基本语句和表达式遵循Groovy的语法。但","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/pipelinesyntax","/automate/jenkins/pipelinesyntax.md"]],
  ["v-00b3198e","/automate/jenkins/qa.html",{"title":"8 Jenkins 常见问题","type":"article","readingTime":{"minutes":1.68,"words":503},"excerpt":"8 Jenkins 常见问题 Jenkins报错Error cloning remote repo 'origin' Jenkins配置了2个节点，但是只有master安装了git，很有可能任务被调到slave上执行所以报错 解决办法\rslave安装git; \r指定任务在master执行; jenkins添加从节点失败 jenkins在添加从节点时 可以在启","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/qa","/automate/jenkins/qa.md"]],
  ["v-157b06db","/automate/jenkins/",{"title":"Jenkins 学习笔记","type":"article","readingTime":{"minutes":0.92,"words":276},"excerpt":"Jenkins 学习笔记 常用官网 Jenkins 优秀教程 Jenkins 实践 | 泽阳 jenkins willseecloud 看云 推荐书籍 Jenkins 2.x 实践指南 | 翟之军 知识体系 Summary\r1 Jenkins 简介; \r1.1 DevOps、CI、CD都是什么鬼; \r 1.2 Jenkins简介; \r2 安装 Jenkins","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"],"sticky":50,"star":50},["/automate/jenkins/index.html","/automate/jenkins/readme.md"]],
  ["v-c7daaaf6","/automate/jenkins/restart.html",{"title":"6.1 Jenkins 关闭和重启的实现方式","type":"article","readingTime":{"minutes":0.31,"words":94},"excerpt":"6.1 Jenkins 关闭和重启的实现方式 关闭 jenkins 只需要在访问jenkins服务器的网址url地址后加上exit。例如我jenkins的地址http://localhost:8080/，那么我只需要在浏览器地址栏上敲下http://localhost:8080/exit 网址就能关闭jenkins服务. 重启 Jenkins http://","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/restart","/automate/jenkins/restart.md"]],
  ["v-7cc4e38d","/automate/jenkins/start-jenkinsfile.html",{"title":"4.1 开始编写Jenkinsfile","type":"article","readingTime":{"minutes":3.35,"words":1005},"excerpt":"4.1 开始编写Jenkinsfile\r\" 本文转自：开始编写 Jenkinsfile | 泽阳\" 您好，还在疑惑什么是流水线吗？ 本章我们将告诉您如何运行一条流水线 赶快学习吧！ 😀 ------ 为什么使用pipeline? 本质上，jenkins是一个自动化引擎，它支持许多自动模式。流水线向Jenkins添加了一组强大的工具，支持用例、简单的持续集成","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/start-jenkinsfile","/automate/jenkins/start-jenkinsfile.md"]],
  ["v-60d7e44a","/automate/jenkins/user-auth.html",{"title":"5.2 用户认证系统集成","type":"article","readingTime":{"minutes":2.8,"words":839},"excerpt":"5.2 用户认证系统集成\r\" 转载自：用户认证系统集成 | 泽阳\" 您好，本章主要讲解与jenkins与用户认证系统集成 例如：LDAP Gitlab GitHub 。我们做实验的过程中建议先开启匿名模式，防止配置错误导致无法直接登录。 😀 --- Jenkins默认使用自带数据库模式存储用户，在企业中一般都会有统一的认证中心，例如 LDAP、Active","date":"2020-01-16T00:00:00.000Z","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/user-auth","/automate/jenkins/user-auth.md"]],
  ["v-54b30fc6","/automate/jenkins/userandpermissions.html",{"title":"3.1 Jenkins用户权限管理","type":"article","readingTime":{"minutes":1.66,"words":498},"excerpt":"3.1 Jenkins用户权限管理\r\" 转载自：Jenkins用户权限管理 | 泽阳\" Jenkins默认使用的是自带的数据库管理用户，支持同步LDAP、Github等认证集成。关于用户与权限管理是Jenkins比较弱的一点，当大规模授权的时候建议使用API接口授权，否则当你打开web页面授权时，会很乱加载缓慢，最终导致保存失败权限丢失。 用户管理\r配置用户","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/userandpermissions","/automate/jenkins/userandpermissions.md"]],
  ["v-61e57b7a","/automate/jenkins/validate-jenkinsfile.html",{"title":"4.8 在 VS Code 中校验 Jenkinsfile","type":"article","readingTime":{"minutes":1.41,"words":424},"excerpt":"4.8 在 VS Code 中校验 Jenkinsfile\r\" 转载自：在 VS Code 中校验 Jenkinsfile jenkins-zh/jenkins-zh github \" 在日常工作中，我经常需要创建或修改很多 Jenkinsfile，有时还会发生错误。这是一个非常繁琐的流程——修改 Jenkinsfile，提交、推送，然后等 Jenkins ","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/validate-jenkinsfile","/automate/jenkins/validate-jenkinsfile.md"]],
  ["v-c952b084","/automate/jenkins/war-install.html",{"title":"2.2 war 包安装 jenkins","type":"article","readingTime":{"minutes":1.09,"words":328},"excerpt":"2.2 war 包安装 jenkins\r\" 转载自：war包安装jenkins willseecloud 看云\" war 包安装 jenkins 参考：https://www.jenkins.io/doc/pipeline/tour/getting-started/ 要求：java8或java11 下载jenkins 运行jenkins 浏览器访问jenki"},["/automate/jenkins/war-install","/automate/jenkins/war-install.md"]],
  ["v-0b6c7f16","/automate/jenkins/yum-install.html",{"title":"2.1 yum 安装 jenkins","type":"article","readingTime":{"minutes":3.41,"words":1023},"excerpt":"2.1 yum 安装 jenkins\r\" 转载自： yum安装jenkins willseecloud 看云\" yum安装jenkins 官方文档： https://pkg.jenkins.io/redhat-stable/ http://mirrors.jenkins-ci.org/ 可选择Jenkins长期支持版本或Jenkins每周版本进行安装。 长期","category":["自动化工具"],"tag":["Jenkins"]},["/automate/jenkins/yum-install","/automate/jenkins/yum-install.md"]],
  ["v-7131b57c","/automate/jumpserver/",{"title":"jumpserver 学习笔记","type":"article","readingTime":{"minutes":0.16,"words":47},"excerpt":"jumpserver 学习笔记 常用官网 官方文档 API 文档 关联文档 jumpserver 中可使用的 fontawesome","category":["自动化工具"],"tag":["jumpserver"]},["/automate/jumpserver/index.html","/automate/jumpserver/readme.md"]],
  ["v-a1ff8004","/basic/network/kernel-para-opt.html",{"title":"内核参数调优","type":"article","readingTime":{"minutes":0.85,"words":254},"excerpt":"内核参数调优","category":["计算机网络"]},["/basic/network/kernel-para-opt","/basic/network/kernel-para-opt.md"]],
  ["v-d623d08a","/basic/network/",{"title":"计算机网络学习笔记","type":"article","readingTime":{"minutes":0.13,"words":39},"excerpt":"计算机网络学习笔记 文章推荐\r图解网络 PDF | 小林coding :star:; Summary\rTCP 三次握手与四次挥手; TODO IP 篇","category":["计算机网络"]},["/basic/network/index.html","/basic/network/readme.md"]],
  ["v-d64bd706","/basic/network/tcp-three-four.html",{"title":"TCP 三次握手和四次挥手","type":"article","readingTime":{"minutes":0.12,"words":35},"excerpt":"TCP 三次握手和四次挥手 常问知识点 问题答案 图解网络 PDF 小林coding 微信公众号"},["/basic/network/tcp-three-four","/basic/network/tcp-three-four.md"]],
  ["v-ba097eb4","/basic/system/",{"title":"操作系统学习笔记","type":"article","readingTime":{"minutes":1.05,"words":316},"excerpt":"操作系统学习笔记 文章推荐\r图解系统 PDF | 小林coding :star:; SRE: Google运维解密 SRE团队要承担以下几类职责：可用性改进，延迟优化，性能优化，效率优化，变更管理，监控，紧急事务处理以及容量规划与管理。 事后总结的意义可能更大：因为它将揭示监控系统中的漏洞。事后总结应该包括以下内容：事故发生、发现、解决的全过程，事故的根本原","category":["操作系统"]},["/basic/system/index.html","/basic/system/readme.md"]],
  ["v-2d9f4ba5","/basic/system/ssh-key.html",{"title":"Linux SSH 基于密钥交换的自动登录原理","type":"article","readingTime":{"minutes":0.15,"words":46},"excerpt":"Linux SSH 基于密钥交换的自动登录原理 参考此链接：Linux SSH 基于密钥交换的自动登录原理是怎样的？","category":["操作系统"],"tag":["原理"]},["/basic/system/ssh-key","/basic/system/ssh-key.md"]],
  ["v-87f9ec82","/cloudnative/docker/docker-docker.html",{"title":"如何在Docker容器中运行Docker [3种方法]","type":"article","readingTime":{"minutes":5.32,"words":1596},"excerpt":"如何在Docker容器中运行Docker [3种方法] \" 转载自：如何在Docker容器中运行Docker 3种方法\" 在本博客中，我将向您介绍在docker中运行docker所需的三种不同方法。 Docker In Docker的用处 1. dockerIndocker的一个潜在用处是CI管道，在代码成功构建后，您需要在其中构建docker镜像并将其推送","category":["云原生"],"tag":["Docker"]},["/cloudnative/docker/docker-docker","/cloudnative/docker/docker-docker.md"]],
  ["v-1497ef65","/cloudnative/docker/docker-proxy.html",{"title":"Docker 设置代理","type":"article","readingTime":{"minutes":0.49,"words":148},"excerpt":"Docker 设置代理\r\" 起因：由于有些国外的镜像拉取不下来，所以设置翻墙代理，下载成功后，再导出docker save xx:tar -o xx.tar，传输到需要的节点导入docker load -i xx.tar\"\r\" 其中 socks5 中的地址，是我本地启动的代理服务地址\" 参考链接： Docker设置代理","category":["云原生"],"tag":["Docker"]},["/cloudnative/docker/docker-proxy","/cloudnative/docker/docker-proxy.md"]],
  ["v-508989f3","/cloudnative/docker/",{"title":"Docker 学习笔记","type":"article","readingTime":{"minutes":0.07,"words":21},"excerpt":"Docker 学习笔记 文章推荐 Docker — 从入门到实践 | yeasy :star:","category":["云原生"],"tag":["Docker"]},["/cloudnative/docker/index.html","/cloudnative/docker/readme.md"]],
  ["v-5257418c","/cloudnative/etcd/etcd-defrag.html",{"title":"ETCD 磁盘空间爆满解决方案","type":"article","readingTime":{"minutes":1.66,"words":499},"excerpt":"ETCD 磁盘空间爆满解决方案 \" etcd默认的空间配额限制为2G，超出空间配额限制就会影响服务，所以需要定期清理\" 查看集群状态 查看ETCD集群报警情况 输出为： \" 此处 alarm 提示 NOSPACE，需要升级 ETCD 集群的空间（默认为2G的磁盘使用空间），或者压缩老数据，升级空间后，需要使用 etcd命令，取消此报警信息，否则集群依旧无法使","category":["云原生"],"tag":["etcd"]},["/cloudnative/etcd/etcd-defrag","/cloudnative/etcd/etcd-defrag.md"]],
  ["v-7da870a3","/cloudnative/etcd/etcd-first.html",{"title":"etcd 问题、调优、监控","type":"article","readingTime":{"minutes":25.47,"words":7640},"excerpt":"etcd 问题、调优、监控 \" 转载自：etcd 问题、调优、监控\" etcd 原理解析：读《etcd 技术内幕》这篇文章主要是原理性的内容，本文主要是实践角度，谈谈平时用到的一些操作和监控 高可用 etcd 是基于 raft算法的分布式键值数据库，生来就为集群化而设计的，由于Raft算法在做决策时需要超半数节点的投票，所以etcd集群一般推荐奇数节点，如3","category":["云原生"],"tag":["etcd"]},["/cloudnative/etcd/etcd-first","/cloudnative/etcd/etcd-first.md"]],
  ["v-bcd7447a","/cloudnative/etcd/",{"title":"etcd 学习笔记","type":"article","readingTime":{"minutes":0.05,"words":15},"excerpt":"etcd 学习笔记 常用官网 etcd 官网 :star:","category":["云原生"],"tag":["etcd"]},["/cloudnative/etcd/index.html","/cloudnative/etcd/readme.md"]],
  ["v-16624cc8","/cloudnative/kubernetes/cni.html",{"title":"","type":"article","readingTime":{"minutes":6.7,"words":2011},"excerpt":"CNI 是什么 首先我们介绍一下什么是 CNI，它的全称是 Container Network Interface，即容器网络的 API 接口。 它是 K8s 中标准的一个调用网络实现的接口。Kubelet 通过这个标准的 API 来调用不同的网络插件以实现不同的网络配置方式，实现了这个接口的就是 CNI 插件，它实现了一系列的 CNI API 接口。常见的","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/cni","/cloudnative/kubernetes/cni.md"]],
  ["v-805e1314","/cloudnative/kubernetes/cordon-drain-delete.html",{"title":"Node节点禁止调度（平滑维护）方式 - cordon，drain，delete","type":"article","readingTime":{"minutes":5.24,"words":1573},"excerpt":"Node节点禁止调度（平滑维护）方式 - cordon，drain，delete \" 转载自：Node节点禁止调度（平滑维护）方式- cordon，drain，delete\" cordon、drain和delete三个命令都会使node停止被调度，后期创建的pod不会继续被调度到该节点上，但操作的暴力程度却不一样。 一、cordon 停止调度（不可调度，临时","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/cordon-drain-delete","/cloudnative/kubernetes/cordon-drain-delete.md"]],
  ["v-399e5546","/cloudnative/kubernetes/deploy-ceph-cluster-with-rook.html",{"title":"使用 Rook 快速搭建 Ceph 集群","type":"article","readingTime":{"minutes":8.43,"words":2529},"excerpt":"使用 Rook 快速搭建 Ceph 集群 在容器世界中，无状态是一个核心原则，然而我们始终需要保存数据，并提供给他人进行访问。所以就需要一个方案用于保持数据，以备重启之需。 在 Kubernetes 中，PVC 是管理有状态应用的一个推荐方案。有了 PVC 的帮助，Pod 可以申请并连接到存储卷，这些存储卷在 Pod 生命周期结束之后，还能独立存在。 PVC","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/deploy-ceph-cluster-with-rook","/cloudnative/kubernetes/deploy-ceph-cluster-with-rook.md"]],
  ["v-ec89bf0a","/cloudnative/kubernetes/etcd-restore.html",{"title":"通过备份 Etcd 来完美恢复 Kubernetes 中的误删数据","type":"article","readingTime":{"minutes":6.18,"words":1855},"excerpt":"通过备份 Etcd 来完美恢复 Kubernetes 中的误删数据 \" 转载自：Etcd备份数据如何做到完美恢复Kubernetes中误删数据呢\" 误删或者机器宕机，会导致etcd数据的丢失或某个节点的etcd数据异常时，请不要慌，认真看完此文，绝对有收获。当误删时，如何恢复数据，这个操作需求在实际环境当中是不可避免的。以下描述删除两个namespace下的","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/etcd-restore","/cloudnative/kubernetes/etcd-restore.md"]],
  ["v-0af65a54","/cloudnative/kubernetes/helm-prometheus-operator.html",{"title":"使用 Helm 和 Operator 快速部署 Prometheus","type":"article","readingTime":{"minutes":4.11,"words":1233},"excerpt":"使用 Helm 和 Operator 快速部署 Prometheus 随着heapster项目停止更新并慢慢被metrics-server取代，集群监控这项任务也将最终转移。prometheus的监控理念、数据结构设计其实相当精简，包括其非常灵活的查询语言；但是对于初学者来说，想要在k8s集群中实践搭建一套相对可用的部署却比较麻烦，由此还产生了不少专门的项目","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/helm-prometheus-operator","/cloudnative/kubernetes/helm-prometheus-operator.md"]],
  ["v-095f9124","/cloudnative/kubernetes/helm.html",{"title":"Helm 安装使用","type":"article","readingTime":{"minutes":0.23,"words":68},"excerpt":"Helm 安装使用 安装 下载二进制文件 设置补全命令","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/helm","/cloudnative/kubernetes/helm.md"]],
  ["v-a659ac38","/cloudnative/kubernetes/ingress-nginx.html",{"title":"Ingress","type":"article","readingTime":{"minutes":6.87,"words":2062},"excerpt":"Ingress 对外暴露集群服务 前面我们学习了在 Kubernetes 集群内部使用 kube-dns 实现服务发现的功能，那么我们部署在 Kubernetes 集群中的应用如何暴露给外部的用户使用呢？我们知道可以使用 NodePort 和 LoadBlancer 类型的 Service 可以把应用暴露给外部用户使用，除此之外，Kubernetes 还为我","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/ingress-nginx","/cloudnative/kubernetes/ingress-nginx.md"]],
  ["v-528008d6","/cloudnative/kubernetes/k8s-w.html",{"title":"如何为你的Kubernetes保驾护航","type":"article","readingTime":{"minutes":13.41,"words":4022},"excerpt":"如何为你的Kubernetes保驾护航\r\" 转载自：运维开发故事 | 乔克\" 随着Kubernetes的不断发展，技术不断成熟，越来越多的公司选择把自家的应用部署到Kubernetes中。但是把应用部署到Kubernetes中就完事了吗？显然不是，应用容器化只是万里长征的第一步，如何让应用安心、稳定的运行才是后续的所有工作。 这里主要从以下几个方面来进行整理","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/k8s-w","/cloudnative/kubernetes/k8s-w.md"]],
  ["v-2b1b7ec1","/cloudnative/kubernetes/kube-prometheus-stack.html",{"title":"安装 kube-prometheus-stack","type":"article","readingTime":{"minutes":1.05,"words":314},"excerpt":"安装 kube-prometheus-stack Helm 安装配置 下载二进制文件 设置补全命令 Prometheus 安装配置 添加 helm repo \" 之前拉取的最新版本，kube-state-metrisc 的 target 没添加上去，所以用的 23.3.2\" 下拉压缩包 为 prometheus 创建 Namespace 新增 etcd se","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/kube-prometheus-stack","/cloudnative/kubernetes/kube-prometheus-stack.md"]],
  ["v-76fb0a5e","/cloudnative/kubernetes/kube-reserved.html",{"title":"kubelet 配置资源预留的姿势","type":"article","readingTime":{"minutes":6.99,"words":2098},"excerpt":"kubelet 配置资源预留的姿势 \" 转载自：k8s 技术圈 | 阳明\" Kubernetes 的节点可以按照节点的资源容量进行调度，默认情况下 Pod 能够使用节点全部可用容量。这样就会造成一个问题，因为节点自己通常运行了不少驱动 OS 和 Kubernetes 的系统守护进程。除非为这些系统守护进程留出资源，否则它们将与 Pod 争夺资源并导致节点资源","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/kube-reserved","/cloudnative/kubernetes/kube-reserved.md"]],
  ["v-890930f8","/cloudnative/kubernetes/kubeasz-install-k8s.html",{"title":"使用 kubeasz 安装 kubernetes","type":"article","readingTime":{"minutes":2.26,"words":677},"excerpt":"使用 kubeasz 安装 kubernetes\r\" github 地址：https://github.com/easzlab/kubeasz\" 项目致力于提供快速部署高可用k8s集群的工具, 同时也努力成为k8s实践、使用的参考书；基于二进制方式部署和利用ansible-playbook实现自动化；既提供一键安装脚本, 也可以根据安装指南分步执行安装各个组","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/kubeasz-install-k8s","/cloudnative/kubernetes/kubeasz-install-k8s.md"]],
  ["v-444e8662","/cloudnative/kubernetes/kubelet-pleg.html",{"title":"深入理解 Kubelet 中的 PLEG is not healthy","type":"article","readingTime":{"minutes":12.67,"words":3800},"excerpt":"深入理解 Kubelet 中的 PLEG is not healthy \" 转载自：深入理解 Kubelet 中的 PLEG is not healthy | 米开朗基杨\" 在 Kubernetes 社区中，PLEG is not healthy 成名已久，只要出现这个报错，就有很大概率造成 Node 状态变成 NotReady。社区相关的 issue 也有","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/kubelet-pleg","/cloudnative/kubernetes/kubelet-pleg.md"]],
  ["v-25e45772","/cloudnative/kubernetes/minimal-kubesphere-on-k8s.html",{"title":"在 Kubernetes 上最小化安装 KubeSphere","type":"article","readingTime":{"minutes":1.91,"words":572},"excerpt":"在 Kubernetes 上最小化安装 KubeSphere 前提条件\r如需在 Kubernetes 上安装 KubeSphere v3.1.1，您的 Kubernetes 版本必须为：1.17.x、1.18.x、1.19.x 或 1.20.x。; \r确保您的机器满足最低硬件要求：CPU > 1 核，内存 > 2 GB。; \r在安装之前，需要配置 Kuber","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/minimal-kubesphere-on-k8s","/cloudnative/kubernetes/minimal-kubesphere-on-k8s.md"]],
  ["v-13597e74","/cloudnative/kubernetes/namespace-stuck-as-terminating-how-do-i-remove-it.html",{"title":"如何更新Terminating状态的命名空间","type":"article","readingTime":{"minutes":2.54,"words":763},"excerpt":"如何更新Terminating状态的命名空间 Kubernetes中namespace有两种常见的状态，即Active和Terminating状态，其中Terminating状态一般会比较少见，当对应的命名空间下还存在运行的资源，但该命名空间被删除时才会出现所谓的Terminating状态，这种情况下只要等待Kubernetes本身将命名空间下的资源回收后，","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/namespace-stuck-as-terminating-how-do-i-remove-it","/cloudnative/kubernetes/namespace-stuck-as-terminating-how-do-i-remove-it.md"]],
  ["v-b976b9e8","/cloudnative/kubernetes/nodelocaldns.html",{"title":"Coredns+Nodelocaldns cache解决Coredns域名解析延迟","type":"article","readingTime":{"minutes":17.43,"words":5228},"excerpt":"Coredns+Nodelocaldns cache解决Coredns域名解析延迟 \" 转载自：Coredns+Nodelocaldns cache解决Coredns域名解析延迟\" 目前18.6版本和之前的coredns都会出现超时5s的情况，那么为什么会出现coredns超时的情况发生？ 背景 在Kubernetes中，Pod访问DNS服务器（kube-d","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/nodelocaldns","/cloudnative/kubernetes/nodelocaldns.md"]],
  ["v-b69d52ca","/cloudnative/kubernetes/quick-command.html",{"title":"快捷命令","type":"article","readingTime":{"minutes":0.14,"words":43},"excerpt":"快捷命令 快速查找 k8s pod 和 service 的 CIDR;","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/quick-command","/cloudnative/kubernetes/quick-command.md"]],
  ["v-645adb07","/cloudnative/kubernetes/rancher-install.html",{"title":"Rancher 安装","type":"article","readingTime":{"minutes":0.72,"words":217},"excerpt":"Rancher 安装 添加 Helm Chart 仓库 为 Rancher 创建 Namespace 添加 TLS 密文 \" 下载nginx使用的key和pem到服务器，并重命名为 tls.xxx\" \"\" \" 使用openssl把pem证书转换为crt\" \"\" \" \" 通过 helm 安装 rancher \" rancher.xxx.xxx 为申请的域名\" ","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/rancher-install","/cloudnative/kubernetes/rancher-install.md"]],
  ["v-1f0f80e6","/cloudnative/kubernetes/",{"title":"Kubernetes 学习笔记","type":"article","readingTime":{"minutes":0.62,"words":187},"excerpt":"Kubernetes 学习笔记 常用官网 中文官网 :star: :star: :star: :star: :star: Kubernetes 教程 Kubernetes 中文指南/云原生应用架构实践手册 | jimmysong 从Docker到Kubernetes进阶 | 阳明 Kubernetes相关文档 | 十点运维 Kubernetes教程 | ku","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/index.html","/cloudnative/kubernetes/readme.md"]],
  ["v-ae3b9898","/cloudnative/kubernetes/resource-requests-and-limits.html",{"title":"Kubernetes 资源请求和限制","type":"article","readingTime":{"minutes":7.99,"words":2397},"excerpt":"Kubernetes 资源请求和限制\r\" 转载自：Kubernetes 资源请求和限制 | IT老男孩\" 资源调度是 Kubernetes 的核心功能之一。Kubernetes 调度程序确保容器获得足够的资源以正确执行。此过程由调度策略控制。在深入研究调度程序的工作原理之前，我们确保我们了解 Kubernetes 集群内部资源定义，分配和限制的基本结构。 资","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/resource-requests-and-limits","/cloudnative/kubernetes/resource-requests-and-limits.md"]],
  ["v-7795d718","/cloudnative/kubernetes/taint-and-toleration.html",{"title":"Kubernetes 污点 Taint 和容忍 Toleration","type":"article","readingTime":{"minutes":9.17,"words":2752},"excerpt":"Kubernetes 污点 Taint 和容忍 Toleration\r\" 转载自：Kubernetes 污点 Taint 和容忍 Toleration | 超级小豆丁\" 参考地址：kubernetes 官方文档 Taint And Toleration 一、介绍 ​ 在 Kubernetes 中，节点亲和性 NodeAffinity 是 Pod 上定义的一种","category":["云原生"],"tag":["Kubernetes"]},["/cloudnative/kubernetes/taint-and-toleration","/cloudnative/kubernetes/taint-and-toleration.md"]],
  ["v-11a4aeb6","/container/Docker/docker_harbor.html",{"title":"Harbor 搭建","type":"article","readingTime":{"minutes":1.43,"words":430},"excerpt":"Harbor 搭建 Harbor创建 安装依赖软件 Installation Steps 1）Offline installer: 从github上下载官方最新包，然后上传到服务器上 2）解压 3）修改配置文件\r\" hostname一定要用域名\" 4）安装启动 Configuring Harbor with HTTPS Access Getting Cert","category":["常见服务的搭建"],"tag":["harbor"]},["/container/Docker/docker_harbor","/container/Docker/docker_harbor.md"]],
  ["v-2d061178","/container/Docker/docker_harbor_ha.html",{"title":"Harbor 高可用搭建","type":"article","readingTime":{"minutes":9.84,"words":2952},"excerpt":"Harbor 高可用搭建 Harbor简介 Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。 作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。 提升用户使用Registry构建和运行环境传输镜","category":["常见服务的搭建"],"tag":["harbor"]},["/container/Docker/docker_harbor_ha","/container/Docker/docker_harbor_ha.md"]],
  ["v-b7534df8","/container/Docker/docker_rabbitmq.html",{"title":"docker 安装rabbitmq集群","type":"article","readingTime":{"minutes":6.59,"words":1977},"excerpt":"docker 安装rabbitmq集群 RabbitMQ 高可用集群架构 将两个 RabbitMQ 磁盘节点和一个 RabbitMQ 内存节点组成一个内建集群，之所以要用两个磁盘节点是防止，唯一的磁盘节点挂掉后，不能重建队列，交换器。用 HAProxy 作为 RabbitMQ 集群的负载均衡。为了防止 HAProxy 单点故障，用 Keepalived 将两","category":["常见服务的搭建"],"tag":["docker","rabbitmq"]},["/container/Docker/docker_rabbitmq","/container/Docker/docker_rabbitmq.md"]],
  ["v-37c1affd","/db/mysql/ab-copy.html",{"title":"8 AB复制","type":"article","readingTime":{"minutes":2.51,"words":752},"excerpt":"8 AB复制 MySQL AB简介 AB复制又称主从复制，实现的是数据同步。 如果要做MySQL AB复制，数据库版本尽量保持一致。如果版本不一致，从服务器版本高于主服务器，但是版本不一致不能做双向复制。 MySQL AB复制有什么好处呢？ 解决宕机带来的数据不一致，因为MySQL AB复制可以实时备份数据；; 减轻数据库服务器压力，多台服务器的性能一般比单","category":["MySQL"]},["/db/mysql/ab-copy","/db/mysql/ab-copy.md"]],
  ["v-36f16a4d","/db/mysql/back.html",{"title":"7 备份恢复","type":"article","readingTime":{"minutes":27.49,"words":8248},"excerpt":"7 备份恢复 对于任何数据库来说，备份都是非常重要的 数据库复制不能取代备份的作用 比如我们由于误操作，在主数据库上删除了一些数据，由于主从复制的时间很短，在发现时，从数据库上的数据可能也已经被删除了， 我们不能使用从数据库上的数据来恢复主数据库上的数据，只能通过备份进行误删除数据的恢复 1 备份的分类 1.1 按备份的结果来分 1.1.1 逻辑备份 其备份","category":["MySQL"]},["/db/mysql/back","/db/mysql/back.md"]],
  ["v-f2aceb80","/db/mysql/bin-log.html",{"title":"14 MySQL bin-log日志清理","type":"article","readingTime":{"minutes":0.57,"words":171},"excerpt":"14 MySQL bin-log日志清理 自动清理 永久生效 需要重启mysql才能生效 修改my.cnf文件 添加下面一行 临时生效 进入mysql，执行，下面的语句 手动清理 进入mysql，查看binlog日志 删除某个日志文件之前的所有日志文件 清理2019-09-09 13:00:00前binlog日志 清除3天前的bin日志 \" 注意，不要轻易手","category":["MySQL"]},["/db/mysql/bin-log","/db/mysql/bin-log.md"]],
  ["v-528061dd","/db/mysql/des-select.html",{"title":"3 数据库设计与查询语句","type":"article","readingTime":{"minutes":22.69,"words":6806},"excerpt":"3 数据库设计与查询语句 1 数据库基本概念 1、关系：两个表的公共字段 2、行：也称记录，也称实体 3、列：也称字段，也称属性 4、数据冗余：相同的数据存储在不同的地方 5、数据完整性：正确性+准确性=数据完整性 思考：学生的年龄是整型，输入1000岁，正确性和准确性如何？ 答：正确的，但不准确的 思考：年龄是整形的，收入了字符串，正确性和准确性如何？ 答","category":["MySQL"]},["/db/mysql/des-select","/db/mysql/des-select.md"]],
  ["v-426b1ca9","/db/mysql/jiagou.html",{"title":"11 MySQL逻辑架构","type":"article","readingTime":{"minutes":0.38,"words":113},"excerpt":"11 MySQL逻辑架构 mysql架构 mysql架构分为三层： 1. 服务层：为客户请求做连接处理、授权认证、安全等 2. 核心层：查询解析，分析，优化，缓存，所有内建函数；存储过程，触发器，视图等 3. 存储引擎层：存储和提取数据以及事务处理 服务层 ​ 核心层 ​ 存储引擎层 ​ 总图 ​","category":["MySQL"]},["/db/mysql/jiagou","/db/mysql/jiagou.md"]],
  ["v-06da267c","/db/mysql/list-com.html",{"title":"2 列表类型和数据完整性","type":"article","readingTime":{"minutes":16.05,"words":4816},"excerpt":"2 列表类型和数据完整性 1 数据类型 1.1 值类型 1.1.1 整型 类型 字节 范围 :-------: :--: :--------------: tinyint 1 -128~127 smallint 2 -32768~32767 mediumint 3 -8388608~8388607 int 4 -2^31^~2^31^-1 bigint 8 ","category":["MySQL"]},["/db/mysql/list-com","/db/mysql/list-com.md"]],
  ["v-a02396ee","/db/mysql/lock.html",{"title":"12 MySQL锁等待","type":"article","readingTime":{"minutes":1.71,"words":514},"excerpt":"12 MySQL锁等待 1 锁等待模拟 创建数据库 创建表 插入数据 取消自动提交 则当执行语句commit或者rollback执行提交事务或者回滚 更新第一条插入的数据 新开一个终端，也更新第一条数据 2 监控锁状态 2.1 查看有无锁等待 Innodbrowlockcurrentwaits 表示当前所等待的数量; Innodbrowlock_waits ","category":["MySQL"]},["/db/mysql/lock","/db/mysql/lock.md"]],
  ["v-0bf9122d","/db/mysql/owner-kee.html",{"title":"9 主主和keepalived","type":"article","readingTime":{"minutes":2.14,"words":643},"excerpt":"9 主主和keepalived keepalived简介 keepalived是vrrp协议的实现，原生设计目的是为了高可用ipvs服务，keepalived能够配置文件中的定义生成ipvs规则，并能够对各RS的健康状态进行检测；通过共用的虚拟IP地址对外提供服务；每个热备组内同一时刻只有一台主服务器提供服务，其他服务器处于冗余状态，若当前在线的服务器宕机，","category":["MySQL"]},["/db/mysql/owner-kee","/db/mysql/owner-kee.md"]],
  ["v-9c2214f8","/db/mysql/qa.html",{"title":"13 MySQL常见问题","type":"article","readingTime":{"minutes":3.69,"words":1108},"excerpt":"13 MySQL常见问题 主库异常，从库手动切换为主库方案 1.登录从服务器，确认从服务器已经完成所有同步操作： 2.停止从服务器slave服务： 3.将从服务器切换为主服务器： 完成切换 4.授权内网其他机器有写入等权限(如果没有权限的话) 5.修改其他机器hosts或应用内连接 Mysql常见的几个错误问题及解决方法： mysql DNS反解：skip-","category":["MySQL"]},["/db/mysql/qa","/db/mysql/qa.md"]],
  ["v-17e5e2ac","/db/mysql/read-write.html",{"title":"10 读写分离和Amoeba","type":"article","readingTime":{"minutes":0.04,"words":11},"excerpt":"10 读写分离和Amoeba 后续补充","category":["MySQL"]},["/db/mysql/read-write","/db/mysql/read-write.md"]],
  ["v-248713a5","/db/mysql/",{"title":"1 MySQL基本操作","type":"article","readingTime":{"minutes":7.12,"words":2137},"excerpt":"1 MySQL基本操作 1 数据库相关概念 1.1 什么是数据？ ​\t\t数据（data）是事实或观察的结果，是对客观事物的逻辑归纳，是用于表示客观事物的未经加工的原始素材。数据是信息的表现形式和载体，可以是符号、文字、数字、语音、图像、视频等。数据和信息是不可分离的，数据是信息的表达，信息是数据的内涵。数据本身没有意义，数据只有对实体行为产生影响才成为信息。","category":["MySQL"]},["/db/mysql/index.html","/db/mysql/readme.md"]],
  ["v-34f80d94","/db/mysql/stro.html",{"title":"5 MySQL存储引擎","type":"article","readingTime":{"minutes":5.45,"words":1634},"excerpt":"5 MySQL存储引擎 存储引擎简介 ​\t\tMySQL中的数据用各种不同的技术存储在文件(或者内存)中。这些技术中的每一种技术都使用不同的存储机制、索引技巧、锁定水平并且最终提供广泛的不同的功能和能力。通过选择不同的技术，你能够获得额外的速度或者功能，从而改善你的应用的整体功能。 ​\t\t例如，如果你在研究大量的临时数据，你也许需要使用内存存储引擎。内存存储引","category":["MySQL"]},["/db/mysql/stro","/db/mysql/stro.md"]],
  ["v-1f31eb54","/db/mysql/user-contr.html",{"title":"6 用户权限和访问控制","type":"article","readingTime":{"minutes":3.62,"words":1086},"excerpt":"6 用户权限和访问控制 1 用户 1.1 创建用户并设置密码 1.2 重命名用户 1.3 删除用户 2 权限 2.1 授予权限 2.1.1 查询、插入、更新、删除的权限 2.1.2 创建和删除表、索引、视图、存储过程的权限 2.1.3 指定用户管理数据库的权限 2.2 权限的作用层次 2.2.1 作用在整个MySQL服务器上 2.2.2 作用在单个数据库上 ","category":["MySQL"]},["/db/mysql/user-contr","/db/mysql/user-contr.md"]],
  ["v-73a05a52","/db/mysql/view-func.html",{"title":"4 视图、事务、索引、函数","type":"article","readingTime":{"minutes":16.56,"words":4967},"excerpt":"4 视图、事务、索引、函数 1 视图【view】 1、\t视图是一张虚拟表，它表示一张表的部分或多张表的综合的结构。 2、\t视图仅仅是表结构，没有表数据。视图的结构和数据建立在表的基础上。 1.1 创建视图 语法 例题： 1.2 使用视图 视图是一张虚拟表，视图的用法和表的用法一样的 1.3 查看视图的结构 语法： 例题 1.4 查看创建视图的语法 语法： 例","category":["MySQL"]},["/db/mysql/view-func","/db/mysql/view-func.md"]],
  ["v-72ca315d","/db/redis/qa.html",{"title":"redis面试题","type":"article","readingTime":{"minutes":11.73,"words":3519},"excerpt":"redis面试题 \" todo: 添加小林coding的redis相关问题，缓存，穿透，雪崩等\" Redis是什么 Redis（Remote Dictionary Server）是C语言开发的一个开源的（遵从BSD协议）高性能键值对（key-value）的内存数据库，可以用作数据库、缓存、消息中间件。它是一种NoSQL（not-only sql，泛指非关系型","category":["Redis"]},["/db/redis/qa","/db/redis/qa.md"]],
  ["v-2bee89ec","/db/redis/",{"title":"redis5.0.4集群搭建","type":"article","readingTime":{"minutes":4.96,"words":1488},"excerpt":"redis5.0.4集群搭建 redis5.0新特性 Redis 5主要专注于几个重要功能。相比之下Redis 4非常非常专注于操作类型，Redis 5的变化大多是面向用户的。即在现有的基础上增加新的数据类型和操作类型。以下是此版本的主要功能： 1. 新的Stream数据类型。[1] 2. 新的Redis模块API：Timers and Cluster AP","category":["Redis"]},["/db/redis/index.html","/db/redis/readme.md"]],
  ["v-a01d2bb2","/db/redis/redis-dump.html",{"title":"redis-dump方式导入导出数据","type":"article","readingTime":{"minutes":0.4,"words":121},"excerpt":"redis-dump方式导入导出数据 安装redis-dump工具 安装ruby（略）,详见上一章节 数据导出 示例 数据导入 示例 导入本机的6379端口，没有密码时，可以写成下面这样 如果报错，请使用-n选项，使用请参考官方，请谨慎使用！ -n （以二进制形式导入）","category":["Redis"]},["/db/redis/redis-dump","/db/redis/redis-dump.md"]],
  ["v-eeddae12","/db/redis/redis-sentinel.html",{"title":"Redis 6.x 哨兵安装配置","type":"article","readingTime":{"minutes":0.74,"words":223},"excerpt":"Redis 6.x 哨兵安装配置 1 升级 gcc centos7 默认的 gcc 默认是4.8.5,版本小于 5.3 无法编译,需要先安装gcc新版才能编译 2 用 ansible 安装 redis 哨兵 下载role Example Playbook cat /etc/ansible/playbooks/redis_sentinel.yml 安装 参考链","category":["Redis"]},["/db/redis/redis-sentinel","/db/redis/redis-sentinel.md"]],
  ["v-219cbae0","/db/redis/redis-slave.html",{"title":"centos7安装redis-5.0.0主从","type":"article","readingTime":{"minutes":2.88,"words":864},"excerpt":"centos7安装redis-5.0.0主从 下载redis-5.0.0安装包 从官网下载安装包 编译安装 安装gcc依赖 编辑配置文件 主服务器 vim conf/redis.conf增加以下内容 bind 中的IP地址为服务器IP地址 从服务器 和主服务器操作相同 改变redis.conf中bind地址 打开replicaof并改为主服务器地址即可 启动","category":["Redis"]},["/db/redis/redis-slave","/db/redis/redis-slave.md"]],
  ["v-7e89ffae","/db/redis/ruby-update.html",{"title":"centos7安装升级ruby","type":"article","readingTime":{"minutes":0.64,"words":192},"excerpt":"centos7安装升级ruby 转载自： 在线安装ruby 添加ruby仓库 添加aliyun镜像 删除原来的镜像 查看当前镜像源 安装RAM \" RAM（Ruby Version Manager ）是一款RAM的命令行工具，可以使用RAM轻松安装，管理Ruby版本。RVM包含了Ruby的版本管理和Gem库管理(gemset)安装\" 安装 更新配置文件，使其","category":["Redis"]},["/db/redis/ruby-update","/db/redis/ruby-update.md"]],
  ["v-9b126160","/db/redis/server-client.html",{"title":"服务器端和客户端命令","type":"article","readingTime":{"minutes":0.61,"words":183},"excerpt":"服务器端和客户端命令 服务器端 服务器端的命令为redis-server 可以使⽤help查看帮助⽂档 推荐使⽤服务的⽅式管理redis服务 启动 停⽌ 重启 个人习惯 客户端 客户端的命令为redis-cli 可以使⽤help查看帮助⽂档 连接redis 运⾏测试命令 切换数据库 数据库没有名称，默认有16个，通过0-15来标识，连接redis默认选择第一","category":["Redis"]},["/db/redis/server-client","/db/redis/server-client.md"]],
  ["v-c64aa418","/code/frontend/",{"title":"前端学习笔记","type":"article","readingTime":{"minutes":0.08,"words":25},"excerpt":"前端学习笔记 文章推荐 Web前端学习笔记 | 千古壹号","category":["前端"]},["/code/frontend/index.html","/code/frontend/readme.md"]],
  ["v-24848cfb","/code/python/access-control.html",{"title":"9.2 访问控制和属性装饰器","type":"article","readingTime":{"minutes":3.14,"words":942},"excerpt":"9.2 访问控制和属性装饰器 访问控制 私有（Private） 成员 在 Python 中，在类变量或实例变量前使用两个下划线的变量，称为私有成员，包括私有属性、私有方法。 在类的定义范围内，使用前置双下划线的标识符，在类外部不能直接访问。 私有成员本质 打开类字典和实例字典，一目了然，都被悄悄的改了名称，所以使用定义的名字就访问不了了。 名称都被前置了_类","category":["Python"]},["/code/python/access-control","/code/python/access-control.md"]],
  ["v-017fe212","/code/python/action-scope.html",{"title":"4.3 作用域","type":"article","readingTime":{"minutes":6.69,"words":2007},"excerpt":"4.3 作用域 一个标识符的可见范围，这就是标识符的作用域。一般常说的是变量的作用域 上例中x不可以访问到，会抛出异常（NameError: name 'x' is not defined），原因在于函数是一个封装，它会开辟一个作用域，x变量被限制在这个作用域中，所以在函数外部x变量不可见。\r\" 注意：每一个函数都会开辟一个作用域\" 作用域分类\r全局作用域;","category":["Python"]},["/code/python/action-scope","/code/python/action-scope.md"]],
  ["v-632afeee","/code/python/bytearray-data.html",{"title":"2.3.3 字节序列","type":"article","readingTime":{"minutes":4.96,"words":1487},"excerpt":"2.3.3 字节序列 Python3 引入两个新的类型 bytes、bytearray。 bytes 不可变字节序列；bytearray 是可变字节数组。 编码与解码\r编码：str => bytes，将字符串这个字符序列使用指定字符集encode编码为一个个字节组成的序列bytes; \r解码：bytes 或 bytearray => str，将一个个字节按照","category":["Python"]},["/code/python/bytearray-data","/code/python/bytearray-data.md"]],
  ["v-6a3d55a6","/code/python/codeSpecification.html",{"title":"1.2 Python 代码规范","type":"article","readingTime":{"minutes":6.56,"words":1967},"excerpt":"1.2 Python 代码规范\r\" 转载自：草根学 Python | TwoWater\" 简明概述 代码格式 缩进\r统一使用 4 个空格进行缩进; 行宽 每行代码尽量不超过 80 个字符(在特殊情况下可以略微超过 80 ，但最长不得超过 120) 理由：\r这在查看 side-by-side 的 diff 时很有帮助; \r方便在控制台下查看代码; \r太长可能是","category":["Python"]},["/code/python/codeSpecification","/code/python/codeSpecification.md"]],
  ["v-7cb1645a","/code/python/first.html",{"title":"1.1 初识Python","type":"article","readingTime":{"minutes":6.54,"words":1961},"excerpt":"1.1 初识Python\r\" 转载自：Python - 100天从新手到大师 | 骆昊\" Python简介 Python的历史 1. 1989年圣诞节：Guido von Rossum开始写Python语言的编译器。 2. 1991年2月：第一个Python编译器（同时也是解释器）诞生，它是用C语言实现的（后面），可以调用C语言的库函数。在最早的版本中，Py","category":["Python"]},["/code/python/first","/code/python/first.md"]],
  ["v-1205d2a0","/code/python/func-prog.html",{"title":"5 函数式编程","type":"article","readingTime":{"minutes":1.68,"words":505},"excerpt":"5 函数式编程 函数是Python内建支持的一种封装，我们通过把大段代码拆成函数，通过一层一层的函数调用，就可以把复杂任务分解成简单的任务，这种分解可以称之为面向过程的程序设计。函数就是面向过程的程序设计的基本单元。 而函数式编程（请注意多了一个“式”字）——Functional Programming，虽然也可以归结到面向过程的程序设计，但其思想更接近数学","category":["Python"]},["/code/python/func-prog","/code/python/func-prog.md"]],
  ["v-bf9d600a","/code/python/function-parameter.html",{"title":"4.2 函数参数","type":"article","readingTime":{"minutes":3.74,"words":1122},"excerpt":"4.2 函数参数 函数在定义是要定义好形式参数，调用时也提供足够的实际参数，一般来说，形参和实参个数要一致（可变参数除外）。 实参传参方式 1、位置传参 定义时def f(x, y, z)， 调用使用 f(1, 3, 5)，按照参数定义顺序传入实参 2、关键字传参 定义时def f(x, y, z)，调用使用 f(x=1, y=3, z=5)，使用形参的名字","category":["Python"]},["/code/python/function-parameter","/code/python/function-parameter.md"]],
  ["v-e912ba58","/code/python/high-func.html",{"title":"5.1 高阶函数","type":"article","readingTime":{"minutes":8.81,"words":2642},"excerpt":"5.1 高阶函数 一等共民\r函数在Python是一等公民（First-Class Object）; \r函数也是对象，是可调用对象; \r函数可以作为普通变量，也可以作为函数的参数、返回值; 高级函数 高阶函数（High-order Function）\r数学概念 y = f(g(x)); \r在数学和计算机科学中，高阶函数应当是至少满足下面一个条件的函数; \r接受","category":["Python"]},["/code/python/high-func","/code/python/high-func.md"]],
  ["v-ef1495f0","/code/python/lambda.html",{"title":"5.3 匿名函数","type":"article","readingTime":{"minutes":1.45,"words":435},"excerpt":"5.3 匿名函数 Python 中，匿名函数也叫 lambda 表达式。 匿名：隐藏名字，即没有名称 匿名函数：没有名字的函数。 函数没有名字该如何定义？函数没有名字如何调用？ Lambda 表达式 Python中，使用 Lambda 表达式构建匿名函数。\r使用 lambda 关键字定义匿名函数，格式为 lambda [参数列表]: 表达式; \r参数列表不需","category":["Python"]},["/code/python/lambda","/code/python/lambda.md"]],
  ["v-bcee94b6","/code/python/list-tuple-data.html",{"title":"2.3.4 列表 list & 元组 tuple","type":"article","readingTime":{"minutes":4.68,"words":1405},"excerpt":"2.3.4 列表 list & 元组 tuple 列表 list\r一个排列整齐的队伍，Python采用顺序表实现; \r列表内的个体称作元素，由若干元素组成列表; \r元素可以是任意对象（数字、字符串、对象、列表等）; \r列表内元素有顺序，可以使用索引; \r线性的数据结构; \r使用 [ ] 表示; \r列表是可变的; 列表是非常重要的数据结构，对其内存结构和操作方","category":["Python"]},["/code/python/list-tuple-data","/code/python/list-tuple-data.md"]],
  ["v-e6964004","/code/python/num-data.html",{"title":"2.3.1 数值型","type":"article","readingTime":{"minutes":2.3,"words":691},"excerpt":"2.3.1 数值型\rint、float、complex、bool 都是class，1、5.0、2+3j 都是对象即实例; \rint：python3 的 int 就是长整型，且没有大小限制，受限于内存区域的大小; \rfloat：由整数部分和小数部分组成。支持十进制和科学计数法表示。C 的双精度型实现; \rcomplex：有实数和虚数部分组成，实数和虚数部分都是","category":["Python"]},["/code/python/num-data","/code/python/num-data.md"]],
  ["v-36c2f847","/code/python/process-thread.html",{"title":"并发","type":"article","readingTime":{"minutes":1.99,"words":598},"excerpt":"并发 并发和并行区别 并行，parallel 同时做某些事，可以互不干扰的同一个时刻做几件事 并发，concurrency 也是同时做某些事，但是强调，一个时段内有事情要处理。 举例 高速公路的车道，双向4车道，所有车辆（数据）可以互不干扰的在自己的车道上奔跑（传输）。 在同一个时刻，每条车道上可能同时有车辆在跑，是同时发生的概念，这是并行。 在一段时间内，","category":["Python"]},["/code/python/process-thread","/code/python/process-thread.md"]],
  ["v-11582f7c","/code/python/python-analytic-expre.html",{"title":"3.2 列表、集合、字典解析式","type":"article","readingTime":{"minutes":2.49,"words":747},"excerpt":"3.2 列表、集合、字典解析式 列表解析式 列表解析式 List Comprehension，也叫列表推导式。 语法 [返回值 for 元素 in 可迭代对象 if 条件]; 使用中括号[]，内部是 for 循环，if 条件语句可选; 返回一个新的列表; 列表解析式是一种语法糖 编译器会优化，不会因为简写而影响效率，反而因优化提高了效率; 减少程序员工作量，","category":["Python"]},["/code/python/python-analytic-expre","/code/python/python-analytic-expre.md"]],
  ["v-747a5278","/code/python/python-basic-grammar.html",{"title":"2.1 Python基础语法","type":"article","readingTime":{"minutes":4.59,"words":1376},"excerpt":"2.1 Python基础语法 数字 整数int; Python3开始不再区分 long 、int ，long 被重命名为int，所以只有 int 类型了; 进制表示：; 十进制10; 十六进制0x10; 八进制0o10; 二进制0b10; bool 类型，有2个值 True、False; 浮点数 float; 1.2、3.1415、-0.12、1.46e9等","category":["Python"]},["/code/python/python-basic-grammar","/code/python/python-basic-grammar.md"]],
  ["v-45447483","/code/python/python-control.html",{"title":"2.2 程序控制","type":"article","readingTime":{"minutes":3.27,"words":981},"excerpt":"2.2 程序控制\r顺序; \r按照先后顺序一条条执行; 例如，先洗手，再吃饭，再洗碗\r分支; \r根据不同的情况判断，条件满足执行某条件下的语句; 例如，先洗手，如果饭没有做好，玩游戏；如果饭做好了，就吃饭；如果饭都没有做，叫外卖\r循环; \r条件满足就反复执行，不满足就不执行或不再执行; 例如，先洗手，看饭好了没有，没有好，一会来看一次是否好了，一会儿来看一次，","category":["Python"]},["/code/python/python-control","/code/python/python-control.md"]],
  ["v-0ed8c2b6","/code/python/python-decorator.html",{"title":"5.4 装饰器","type":"article","readingTime":{"minutes":5.89,"words":1766},"excerpt":"5.4 装饰器 由来 需求：为一个加法函数增加记录实参的功能 上面的代码满足了需求，但有缺点： 记录信息的功能，可以是一个单独的功能。显然和add函数耦合太紧密。加法函数属于业务功能，输出信息属于非功能代码，不该放在add函数中 1、提供一个函数logger完成记录功能 2、改进传参 3、柯里化 再进一步 4、装饰器语法 @logger就是装饰器语法 *等价","category":["Python"]},["/code/python/python-decorator","/code/python/python-decorator.md"]],
  ["v-659e17b6","/code/python/python-dir-file-pro.html",{"title":"7.1 操作文件和目录","type":"article","readingTime":{"minutes":10.3,"words":3089},"excerpt":"7.1 操作文件和目录 文件IO操作 函数 说明 --------- -------- **open** 打开 read 读取 **write** 写入 close 关闭 readline 行读取 readlines 多行读取 open 方法 `open(file, mode='r', buffering=-1, encoding=None, errors=","category":["Python"]},["/code/python/python-dir-file-pro","/code/python/python-dir-file-pro.md"]],
  ["v-583cf311","/code/python/python-exception.html",{"title":"8.1 异常处理","type":"article","readingTime":{"minutes":6.71,"words":2013},"excerpt":"8.1 异常处理 错误 Error 逻辑错误：算法写错了，例如加法写成了减法 笔误：例如变量名写错了，语法错误 函数或类使用错误，其实这也属于逻辑错误 总之，错误是可以避免的 异常 Exception 本意就是意外情况 这有个前提，没有出现上面说的错误，也就是说程序写的没有问题，但是在某些情况下，会出现一些意外，导致程序无法正常的执行下去。 例如open函数","category":["Python"]},["/code/python/python-exception","/code/python/python-exception.md"]],
  ["v-33deec0c","/code/python/python-function.html",{"title":"4.1 函数的定义 & 调用 & 返回值","type":"article","readingTime":{"minutes":2.55,"words":766},"excerpt":"4.1 函数的定义 & 调用 & 返回值 函数 数学定义 y=f(x) ，y是x的函数，x是自变量。y=f(x0, x1, ..., xn); Python函数 由若干语句组成的语句块、函数名称、参数列表构成，它是组织代码的最小单元; 完成一定的功能; 函数的作用 结构化编程对代码的最基本的封装，一般按照功能组织一段代码; 封装的目的为了复用，减少冗余代码;","category":["Python"]},["/code/python/python-function","/code/python/python-function.md"]],
  ["v-21e01b0d","/code/python/python-generator.html",{"title":"3.3 生成器","type":"article","readingTime":{"minutes":5.82,"words":1746},"excerpt":"3.3 生成器 要创建一个generator，有很多种方法。 生成器表达式 第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator 语法\r(返回值 for 元素 in 可迭代对象 if 条件); \r列表解析式的中括号换成小括号就行了; \r返回一个生成器对象; 和列表解析式的区别\r生成器表达式是按需计算（或称惰性求值、延迟计算），","category":["Python"]},["/code/python/python-generator","/code/python/python-generator.md"]],
  ["v-973f5452","/code/python/python-gil-multiprocessing.html",{"title":"10.1 多进程","type":"article","readingTime":{"minutes":6.81,"words":2043},"excerpt":"10.1 多进程 GIL CPython 在解释器进程级别有一把锁，叫做GIL，即全局解释器锁。 GIL 保证CPython进程中，只有一个线程执行字节码。甚至是在多核CPU的情况下，也只允许同时只能有一个CPU核心上运行该进程的一个线程。 CPython中 IO密集型，某个线程阻塞，GIL会释放，就会调度其他就绪线程; CPU密集型，当前线程可能会连续的获","category":["Python"]},["/code/python/python-gil-multiprocessing","/code/python/python-gil-multiprocessing.md"]],
  ["v-1941575d","/code/python/python-instance.html",{"title":"python 实际工作中的实例","type":"article","readingTime":{"minutes":8.34,"words":2503},"excerpt":"python 实际工作中的实例 调用zabbixAPI批量添加web监控 起因：刚来一家公司，要求我添加web监控，800多个页面监控，手动一个个加，不得加死了，所以写了个python脚本，批量添加 脚本如下： 结合下面的shell脚本运行， shell脚本如下：\rarr_hostname为添加web监控的两个主机，我进行的是交叉互检; 最后还需要一个lis","category":["Python"],"tag":["工作脚本"]},["/code/python/python-instance","/code/python/python-instance.md"]],
  ["v-3f18b850","/code/python/python-io-model.html",{"title":"17 IO 模型","type":"article","readingTime":{"minutes":9.02,"words":2706},"excerpt":"17 IO 模型 重要概念 同步、异步 函数或方法被调用的时候，调用者是否得到最终结果的。 直接得到最终结果结果的，就是同步调用； 不直接得到最终结果的，就是异步调用。 阻塞、非阻塞 函数或方法调用的时候，是否立刻返回。 立即返回就是非阻塞调用； 不立即返回就是阻塞调用。 区别 同步、异步，与阻塞、非阻塞不相关。 同步、异步强调的是，是否得到（最终的）结果；","category":["Python"]},["/code/python/python-io-model","/code/python/python-io-model.md"]],
  ["v-3a976324","/code/python/python-iterator.html",{"title":"3.4 迭代器","type":"article","readingTime":{"minutes":3.23,"words":969},"excerpt":"3.4 迭代器 我们已经知道，可以直接作用于for循环的数据类型有以下几种： 一类是集合数据类型，如list、tuple、dict、set、str等； 一类是generator，包括生成器和带yield的generator function。 这些可以直接作用于for循环的对象统称为可迭代对象：Iterable。 可以使用isinstance()判断一个对象","category":["Python"]},["/code/python/python-iterator","/code/python/python-iterator.md"]],
  ["v-a1e7d070","/code/python/python-linear-data-structure.html",{"title":"3.1 线性结构特征 可迭代 & 切片","type":"article","readingTime":{"minutes":3.08,"words":925},"excerpt":"3.1 线性结构特征 可迭代 & 切片 线性结构特征： 可迭代 for ... in; 有长度，通过len(x)获取，容器; 通过整数下标可以访问元素。正索引、负索引; 可以切片; 已经学习过的线性结构：list、tuple、str、bytes、bytearray 切片 通过给定的索引区间获得线性结构的一部分数据; start、stop、step为整数，可以","category":["Python"]},["/code/python/python-linear-data-structure","/code/python/python-linear-data-structure.md"]],
  ["v-b5c2201a","/code/python/python-magic.html",{"title":"11 魔术方法","type":"article","readingTime":{"minutes":12.04,"words":3612},"excerpt":"11 魔术方法 实例化 方法 意义 --------- ------------------------------------------------------------ __new__ 实例化一个对象该方法需要返回一个值，如果该值不是 cls 的实例，则不会调用 init该方法永远都是静态方法 | new 方法很少使用，即使创建了该方法，也会使用 r","category":["Python"]},["/code/python/python-magic","/code/python/python-magic.md"]],
  ["v-4cb0a918","/code/python/python-module-install.html",{"title":"6.1 Python 模块常用的几种安装方式","type":"article","readingTime":{"minutes":0.78,"words":233},"excerpt":"6.1 Python 模块常用的几种安装方式 单文件模块 直接把文件拷贝到 $python_dir/Lib 多文件模块，带setup.py 下载模块包，进行解压，进入模块文件夹，执行： easy_install 方式 先下载 ezsetup.py，运行 python ezsetup 进行 easyinstall 工具的安装，之后就可以使用 easyinsta","category":["Python"]},["/code/python/python-module-install","/code/python/python-module-install.md"]],
  ["v-998003b4","/code/python/python-module.html",{"title":"6 模块","type":"article","readingTime":{"minutes":5.1,"words":1531},"excerpt":"6 模块 模块简介 在计算机程序的开发过程中，随着程序代码越写越多，在一个文件里代码就会越来越长，越来越不容易维护。 为了编写可维护的代码，我们把很多函数分组，分别放到不同的文件里，这样，每个文件包含的代码就相对较少，很多编程语言都采用这种组织代码的方式。在Python中，一个.py文件就称之为一个模块（Module）。 使用模块有什么好处？ 最大的好处是大","category":["Python"]},["/code/python/python-module","/code/python/python-module.md"]],
  ["v-0786bde2","/code/python/python-oo-inher-pol.html",{"title":"9.3 继承、多态和Mixin","type":"article","readingTime":{"minutes":11.8,"words":3541},"excerpt":"9.3 继承、多态和Mixin 继承基本概念 面向对象三要素之一，继承 Inheritance 人类和猫类都继承自动物类。 个体继承自父母，继承了父母的一部分特征，但也可以有自己的个性。 在面向对象的世界中，从父类继承，就可以直接拥有父类的属性和方法，这样可减少代码冗余、多复用。子类也可以定义自己的属性和方法。 看一个不用继承的例子 上面的2个类虽然有关系，","category":["Python"]},["/code/python/python-oo-inher-pol","/code/python/python-oo-inher-pol.md"]],
  ["v-9320324e","/code/python/python-oo-package.html",{"title":"9.1 类、实例和封装","type":"article","readingTime":{"minutes":9.67,"words":2902},"excerpt":"9.1 类、实例和封装 封装 封装就是定义类，将属性和操作组织在类中 Python 类定义 1. 必须使用 class 关键字 2. 类名强烈建议使用大驼峰命名方式，即每个单词首字母大写。其本质就是一个标识符 3. 类定义完成后，就产生了一个类对象，绑定到了标识符 ClassName 上 举例 类及类属性 类对象：类也是对象，类的定义执行后会生成一个类对象;","category":["Python"]},["/code/python/python-oo-package","/code/python/python-oo-package.md"]],
  ["v-e25702a0","/code/python/python-oop.html",{"title":"9 面向对象编程","type":"article","readingTime":{"minutes":3.51,"words":1052},"excerpt":"9 面向对象编程 面向对象 面向对象编程——Object Oriented Programming，简称OOP，是一种程序设计思想。OOP把对象作为程序的基本单元，一个对象包含了数据和操作数据的函数。 面向过程的程序设计把计算机程序视为一系列的命令集合，即一组函数的顺序执行。为了简化程序设计，面向过程把函数继续切分为子函数，即把大块函数通过切割成小块函数来降","category":["Python"]},["/code/python/python-oop","/code/python/python-oop.md"]],
  ["v-737185ae","/code/python/python-partial-function.html",{"title":"5.5 偏函数","type":"article","readingTime":{"minutes":2.02,"words":607},"excerpt":"5.5 偏函数 Python的functools模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。 在介绍函数参数的时候，我们讲到，通过设定参数的默认值，可以降低函数调用的难度。而偏函数也可以做到这一点。举例如下： int()函数可以把字符串转换为整数，当仅传入字符串时，int(","category":["Python"]},["/code/python/python-partial-function","/code/python/python-partial-function.md"]],
  ["v-8d5f6fee","/code/python/python-pip.html",{"title":"1.5 pypi 配置国内镜像","type":"article","readingTime":{"minutes":0.79,"words":237},"excerpt":"1.5 pypi 配置国内镜像\r\" 转载自：Python willseecloud 看云\" pypi 国内镜像目前有：\r阿里云(aliyun) - https://mirrors.aliyun.com/pypi/simple/; \r豆瓣(douban) - https://pypi.douban.com/simple/; \r清华大学(tuna) - http","category":["Python"]},["/code/python/python-pip","/code/python/python-pip.md"]],
  ["v-13fe8742","/code/python/python-recursive-function.html",{"title":"4.4 递归函数","type":"article","readingTime":{"minutes":3.28,"words":985},"excerpt":"4.4 递归函数 简介 在函数内部，可以调用其他函数。如果一个函数在内部调用自身本身，这个函数就是递归函数。 举个例子，我们来计算阶乘n! = 1 x 2 x 3 x ... x n，用函数fact(n)表示，可以看出： 所以，fact(n)可以表示为n x fact(n-1)，只有n=1时需要特殊处理。 于是，fact(n)用递归的方式写出来就是： 上面就","category":["Python"]},["/code/python/python-recursive-function","/code/python/python-recursive-function.md"]],
  ["v-c57983ea","/code/python/python-return-function.html",{"title":"5.2 返回函数","type":"article","readingTime":{"minutes":3.31,"words":993},"excerpt":"5.2 返回函数 柯里化\r指的是将原来接受两个参数的函数变成新的接受一个参数的函数的过程。新的函数返回一个以原有第二个参数为参数的函数; \rz = f(x, y) 转换成 z = f(x)(y) 的形式; 例如 原来函数调用为 add(4, 5) ，柯里化目标是 add(4)(5) 。如何实现？ 每一次括号说明是函数调用，说明 add(4)(5) 是2次函数","category":["Python"]},["/code/python/python-return-function","/code/python/python-return-function.md"]],
  ["v-09b7cf20","/code/python/python-serialize.html",{"title":"7.2 序列化和反序列化","type":"article","readingTime":{"minutes":5.62,"words":1685},"excerpt":"7.2 序列化和反序列化 csv csv 文件简介 参看 RFC 4180 http://www.ietf.org/rfc/rfc4180.txt 逗号分隔值Comma-Separated Values。 CSV 是一个被行分隔符、列分隔符划分成行和列的文本文件。 CSV 不指定字符编码。 行分隔符为\\r\\n，最后一行可以没有换行符 列分隔符常为逗号或者制表","category":["Python"]},["/code/python/python-serialize","/code/python/python-serialize.md"]],
  ["v-f15b3dba","/code/python/python-setup.html",{"title":"6.2 Python 的 setup.py 详解","type":"article","readingTime":{"minutes":16.59,"words":4976},"excerpt":"6.2 Python 的 setup.py 详解\r\" 转载自：花了两天，终于把 Python 的 setup.py 给整明白了 Python编程时光 知乎\" 1. 为什么需要对项目分发打包？ 平常我们习惯了使用 pip 来安装一些第三方模块，这个安装过程之所以简单，是因为模块开发者为我们默默地为我们做了所有繁杂的工作，而这个过程就是 打包。 打包，就是将你的","category":["Python"]},["/code/python/python-setup","/code/python/python-setup.md"]],
  ["v-0c5f5f9c","/code/python/python-socketserver.html",{"title":"11.1 SocketServer","type":"article","readingTime":{"minutes":4.17,"words":1250},"excerpt":"11.1 SocketServer socket 编程过于底层，编程虽然有套路，但是想要写出健壮的代码还是比较困难的，所以很多语言都对 socket 底层 API 进行封装，Python 的封装就是 socketserver 模块。它是网络服务编程框架，便于企业级快速开发。 类的继承关系 SocketServer简化了网络服务器的编写。 它有4个同步类： T","category":["Python"]},["/code/python/python-socketserver","/code/python/python-socketserver.md"]],
  ["v-361a70e2","/code/python/python-tcp-pg.html",{"title":"11.2 TCP 编程","type":"article","readingTime":{"minutes":13.1,"words":3929},"excerpt":"11.2 TCP 编程 Socket介绍 Socket 套接字。Socket是一种通用的网络编程接口，和网络层次没有一一对应的关系。 Python 中标准库中提供了 socket 模块。socket 模块中也提供了 socket 类，实现了对底层接口的封装， socket 模块是非常底层的接口库。 socke类定义为 协议族 AF表示Address Fami","category":["Python"]},["/code/python/python-tcp-pg","/code/python/python-tcp-pg.md"]],
  ["v-049ef682","/code/python/python-thread-sync.html",{"title":"10.2 线程同步","type":"article","readingTime":{"minutes":7.6,"words":2281},"excerpt":"10.2 线程同步 线程同步概念 线程同步，线程间协同，通过某种技术，让一个线程访问某些数据时，其他线程不能访问这些数据，直到该线程完成对数据的操作。 Event Event 事件，是线程间通信机制中最简单的实现，使用一个内部的标记 flag，通过 flag 的 True 或 False 的变化来进行操作。 名称 含义 ------------------ ","category":["Python"]},["/code/python/python-thread-sync","/code/python/python-thread-sync.md"]],
  ["v-6d90a948","/code/python/python-thread.html",{"title":"10.2 多线程","type":"article","readingTime":{"minutes":11.8,"words":3540},"excerpt":"10.2 多线程 线程的状态 就绪（Ready）：线程能够运行，但在等待被调度。可能线程刚刚创建启动，或刚刚从阻塞中恢复，或者被其他线程抢占; 运行（Running）：线程正在运行; 阻塞（Blocked）：线程等待外部事件发生而无法运行，如 I/O 操作; 终止（Terminated）：线程完成，或退出，或被取消; Python的线程开发 Python 的","category":["Python"]},["/code/python/python-thread","/code/python/python-thread.md"]],
  ["v-7692b860","/code/python/python-virtualenv.html",{"title":"1.3 Python 虚拟环境","type":"article","readingTime":{"minutes":12.28,"words":3684},"excerpt":"1.3 Python 虚拟环境\r\" 转载自：Python 虚拟环境 看这一篇就够了 | Python 技术\" Python 之所以强大，除了语言本身的特性外，更重要的是拥有无所不及的第三方库。强大的软件库，让开发者将精力集中在业务上，而避免重复造轮子的浪费。但众多的软件库，形成了复杂的依赖关系，加上 Python2 和 Python3 旷日持久之争，对采用 ","category":["Python"]},["/code/python/python-virtualenv","/code/python/python-virtualenv.md"]],
  ["v-b72643ac","/code/python/",{"title":"Python 学习笔记","type":"article","readingTime":{"minutes":0.96,"words":288},"excerpt":"Python 学习笔记 常用官网 官方文档 :star: Python 教程 Python 运维自动化 | 马哥教育 :star: Python 教程 | 廖雪峰 :star: Python - 100天从新手到大师 骆昊 github :star: Python willseecloud 看云 草根学 Python TwoWater github Pyth","category":["Python"],"sticky":53,"star":53},["/code/python/index.html","/code/python/readme.md"]],
  ["v-4accd2e6","/code/python/set-dict-data.html",{"title":"2.3.5 集合 set & 字典 dict","type":"article","readingTime":{"minutes":6.83,"words":2050},"excerpt":"2.3.5 集合 set & 字典 dict 集合 set 集合，简称集。由任意个元素构成的集体。高级语言都实现了这个非常重要的数据结构类型。 Python中，它是可变的、无序的、不重复的元素的集合。 初始化\rset() -> new empty set object; \rset(iterable) -> new set object; 元素性质\r去重：在集","category":["Python"]},["/code/python/set-dict-data","/code/python/set-dict-data.md"]],
  ["v-1609d8e9","/code/python/str-data.html",{"title":"2.3.2 字符串 str","type":"article","readingTime":{"minutes":5.29,"words":1586},"excerpt":"2.3.2 字符串 str\r一个个字符组成的有序的序列，是字符的集合; \r使用单引号、双引号、三引号引住的字符序列; \r字符串是不可变对象，是字面常量; Python3 起，字符串都是 Unicode 类型 初始化 r前缀：所有字符都是本来的意思，没有转义 f前缀：3.6开始，使用变量插值 索引 字符串是序列，支持下标访问。但不可变，不可以修改元素。 连接 ","category":["Python"]},["/code/python/str-data","/code/python/str-data.md"]],
  ["v-0939f9c2","/code/python/type-of-data.html",{"title":"2.3 Python数据类型","type":"article","readingTime":{"minutes":2.65,"words":795},"excerpt":"2.3 Python数据类型 内建常用数据类型\r数值型; \rint、float、complex、bool; \r序列 sequence; \r字符串 str、字节序列 bytes、bytearray; \r列表 list、元组 tuple; \r键值对; \r集合 set、字典 dict; 类型转换\rint、float、complex、bool 也可以当做内建函数对数","category":["Python"]},["/code/python/type-of-data","/code/python/type-of-data.md"]],
  ["v-79604bf8","/code/python/vscode-python.html",{"title":"1.4 使用 vscode 打造 python 开发环境","type":"article","readingTime":{"minutes":6.61,"words":1982},"excerpt":"1.4 使用 vscode 打造 python 开发环境 1 软件准备 既然是在 VS Code 中进行 Python 环境配置，在配置之前需要安装好 Python 和 VS Code。 1.1 Python 安装 关于 Python 的安装，可以从 Python 官网下载 Python 进行安装，也可以通过 Anaconda 来安装。 注意区分64位还是3","tag":["vscode"]},["/code/python/vscode-python","/code/python/vscode-python.md"]],
  ["v-4a90c93a","/linux/basic/common-kno.html",{"title":"常用知识","type":"article","readingTime":{"minutes":0.77,"words":230},"excerpt":"常用知识 如何查看当前服务器内核的版本 查看当前服务器 cpu 的 core(核心)数 判断当前机器是虚拟机还是物理机 Linux删除软链接","category":["Linux"]},["/linux/basic/common-kno","/linux/basic/common-kno.md"]],
  ["v-0e042827","/linux/basic/crontab.html",{"title":"计划任务","type":"article","readingTime":{"minutes":11.96,"words":3587},"excerpt":"计划任务 crontab命令被用来提交和管理用户的需要周期性执行的任务，与windows下的计划任务类似，当安装完成操作系统后，默认会安装此服务工具，并且会自动启动crond进程，crond进程每分钟会定期检查是否有要执行的任务，如果有要执行的任务，则自动执行该任务。 语法 选项 复制 参数 crontab文件：指定包含待执行任务的crontab文件。 知识","category":["Linux"]},["/linux/basic/crontab","/linux/basic/crontab.md"]],
  ["v-9b86713a","/linux/basic/i-o.html",{"title":"管道及I/O重定向","type":"article","readingTime":{"minutes":0.39,"words":117},"excerpt":"管道及I/O重定向 标准输入、标准输出、标准错误 输出重定向 输出重定向（覆盖） 输出重定向（追加） 错误输出重定向 正确和错误都输入到相同位置 重定向到空设备/dev/null 输入重定向 总和应用","category":["Linux"]},["/linux/basic/i-o","/linux/basic/i-o.md"]],
  ["v-2d9933f2","/linux/basic/inter.html",{"title":"网络管理","type":"article","readingTime":{"minutes":0.29,"words":87},"excerpt":"网络管理 网络基础 常见的网络接口 eth0\t\t\t以太网接口 lo\t\t\t\t本地环回接口 br0\t\t\t桥接接口 （虚拟交换机） vnet0\t\t KVM虚拟机网卡接口 查看网络信息","category":["Linux"]},["/linux/basic/inter","/linux/basic/inter.md"]],
  ["v-24f9c073","/linux/basic/limit.html",{"title":"/etc/security/limits.conf 详解与配置","type":"article","readingTime":{"minutes":7.34,"words":2201},"excerpt":"/etc/security/limits.conf 详解与配置 一、 /etc/security/limits.conf 详解 /etc/security/limits.conf 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，而且只针对于单个会话。","category":["Linux"]},["/linux/basic/limit","/linux/basic/limit.md"]],
  ["v-5bcc9602","/linux/basic/process.html",{"title":"进程管理","type":"article","readingTime":{"minutes":19.82,"words":5947},"excerpt":"进程管理 静态查看进程 ps ps命令用于报告当前系统的进程状态。可以搭配kill指令随时中断、删除不必要的程序。ps命令是最基本同时也是非常强大的进程查看命令，使用该命令可以确定有哪些进程正在运行和运行的状态、进程是否结束、进程有没有僵死、哪些进程占用了过多的资源等等，总之大部分信息都是可以通过执行该命令得到的。 1. 运行(正在运行或在运行队列中等待) ","category":["Linux"]},["/linux/basic/process","/linux/basic/process.md"]],
  ["v-43ef4cb5","/linux/basic/",{"title":"前言","type":"article","readingTime":{"minutes":19.56,"words":5867},"excerpt":"前言 文章教程 LINUX-TUTORIAL | dunwu 三十分钟学会AWK | 程序猿成长计划 :star: 三十分钟学会SED | 程序猿成长计划 :star: 开源镜像站 阿里巴巴开源镜像站 :star: 清华大学开源软件镜像站 :star: 网易开源镜像站 :star: 腾讯软件源 :star: 博客 CTC的运维学习笔记 LINUX-TUTOR","category":["Linux"]},["/linux/basic/index.html","/linux/basic/readme.md"]],
  ["v-2dff2bff","/linux/basic/rpm.html",{"title":"软件包管理","type":"article","readingTime":{"minutes":0.41,"words":122},"excerpt":"软件包管理 yum管理RPM包 清空缓存及其它文件 建立缓存数据库 查询可用的仓库 查询 升级 查询指定的文件属于哪个包 卸载 使用RPM工具管理RPM包 安装 升级 查询 卸载","category":["Linux"]},["/linux/basic/rpm","/linux/basic/rpm.md"]],
  ["v-e61762de","/linux/basic/ugo.html",{"title":"基本权限 UGO","type":"article","readingTime":{"minutes":1.17,"words":350},"excerpt":"基本权限 UGO 文件权限设置： 可以赋于某个用户或组 能够以何种方式 访问某个文件 文件权限管理之： UGO设置基本权限(r、w、x) 权限对象： 属主： u; 属组：g; 其他人： o; 权限类型： 读：r 4; 写：w 2; 执行： x 1; 设置权限 1. 更改文件的属主、属组 chown：; chgrp：; 2. 更改权限 使用符号; 使用数字; ","category":["Linux"]},["/linux/basic/ugo","/linux/basic/ugo.md"]],
  ["v-4ff82ad9","/linux/basic/user.html",{"title":"用户管理","type":"article","readingTime":{"minutes":0.27,"words":81},"excerpt":"用户管理 查看当前登录的用户信息： 系统约定： RHEL6 uid: 0 \t 特权用户 uid: 1~499 \t 系统用户 uid: 500+ \t 普通用户 给普通用户提权 1.su 2.添加用户至sudoers","category":["Linux"]},["/linux/basic/user","/linux/basic/user.md"]],
  ["v-29d1ef0e","/code/golang/4.1%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.html",{"title":"","type":"article","readingTime":{"minutes":9.97,"words":2990},"excerpt":"命名 命名规则： 1）可以使用字母 数字 下划线 2）不允许使用数字开头 3）不允许使用系统关键字 4）区分大小写 5）见名知意 函数命名规则： 1）包本身的名字一般总是小写字母开头 2）可以被外部访问的包是大写字母开头 作用域命名规则： 1）局部变量一般用i这类的短名字 2）全局变量的名字一般较长，更有意义 命名习惯： 1）推荐使用驼峰式命名。 声明 Go"},["/code/golang/4.1 程序结构.html","/code/golang/4.1%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84","/code/golang/4.1 程序结构.md","/code/golang/4.1%20%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84.md"]],
  ["v-a03f7510","/code/golang/4.2.1%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"title":"","type":"article","readingTime":{"minutes":0.94,"words":281},"excerpt":"虽然从底层而言，所有的数据都是由比特组成，但计算机一般操作的是固定大小的数，如整数、浮点数、比特数组、内存地址等。 Go语言将数据类型分为四类：基础类型、复合类型、引用类型和接口类型。 数据类型 具体类型 ------ 基础类型 数字、字符串、布尔型 复合数据类型数组、结构体 引用类型指针、切片、字典、函数、通道 接口类型interface 整型 Go语言的"},["/code/golang/4.2.1 基础数据类型.html","/code/golang/4.2.1%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/code/golang/4.2.1 基础数据类型.md","/code/golang/4.2.1%20%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-e3abd37e","/code/golang/go-fmt.html",{"title":"golang fmt格式“占位符”","type":"article","readingTime":{"minutes":3.56,"words":1067},"excerpt":"golang fmt格式“占位符” \" 转载自：golang fmt格式“占位符”\" golang 的fmt 包实现了格式化I/O函数，类似于C的 printf 和 scanf。 golang没有 '%u' 点位符，若整数为无符号类型，默认就会被打印成无符号的。 宽度与精度的控制格式以Unicode码点为单位。宽度为该数值占用区域的最小宽度；精度为小数点之后","category":["Golang"]},["/code/golang/go-fmt","/code/golang/go-fmt.md"]],
  ["v-61e20373","/code/golang/go-install.html",{"title":"Golang 安装","type":"article","readingTime":{"minutes":1.31,"words":392},"excerpt":"Golang 安装 Windows 安装 go 1. 在Go中文网进行Go最新版安装包的下载， https://studygolang.com/dl 2. 将安装包下载好后直接一步到位next即可 3. 在控制台输入go version，如果显示了版本号，即代表安装成功 4. 修改go env go env -w GO111MODULE=on // 打开Go","category":["Golang"]},["/code/golang/go-install","/code/golang/go-install.md"]],
  ["v-9f4ff810","/code/golang/go-restful-api.html",{"title":"Go语言：RESTful API 服务，急速入门","type":"article","readingTime":{"minutes":8.74,"words":2623},"excerpt":"Go语言：RESTful API 服务，急速入门 \" 转载自：\" \"\" \" Go语言：RESTful API 服务，急速入门\" \"\" \" golang常用的http请求操作 \" RESTful API EST即表述性状态传递（英文：Representational State Transfer，简称REST），它是一种针对网络应用的设计和开发方式，可以降低开","category":["Golang"]},["/code/golang/go-restful-api","/code/golang/go-restful-api.md"]],
  ["v-a895956a","/code/golang/go-specification.html",{"title":"Go中的命名规范","type":"article","readingTime":{"minutes":2.92,"words":877},"excerpt":"Go中的命名规范 \" 转载自：Go中的命名规范\" 1.命名规范 1.1 Go是一门区分大小写的语言。 命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。 Go语言从语法层面进行了以下限定：任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头。 1. 当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如","category":["Golang"]},["/code/golang/go-specification","/code/golang/go-specification.md"]],
  ["v-a77317a2","/code/golang/go-struct.html",{"title":"Go Struct超详细讲解","type":"article","readingTime":{"minutes":9.07,"words":2721},"excerpt":"Go Struct超详细讲解 \" 转载自：Go Struct超详细讲解 | 程序员读书\" Go语言中提供了对struct的支持,struct,中文翻译称为结构体，与数组一样，属于复合类型，并非引用类型。 Go语言的struct，与C语言中的struct或其他面向对象编程语言中的类(class)类似，可以定义字段(属性)和方法，但也有很不同的地方，需要深入学习","category":["Golang"]},["/code/golang/go-struct","/code/golang/go-struct.md"]],
  ["v-925f3920","/code/golang/",{"title":"Golang 学习笔记","type":"article","readingTime":{"minutes":0.25,"words":76},"excerpt":"Golang 学习笔记 常用官网 golang.google.cn :star: go 语言中文网 :star: GoCN社区 Go 语言教程 Go 语言圣经（中文版） :star: Go入门指南 :star: Go 语言设计与实现","category":["Golang"]},["/code/golang/index.html","/code/golang/readme.md"]],
  ["v-689741b0","/code/golang/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8gomod.html",{"title":"","type":"article","readingTime":{"minutes":3.48,"words":1044},"excerpt":"\" 转载自： https://www.jianshu.com/p/bbed916d16ea\" 如果你还在使用 GOPATH 模式来开发Golang程序，那么你可以参考本文来告别 GOPATH，并带给你一个方便的包管理工具。 关于 go mod 的说明和简单使用，可以参考： 1、Go1.1.1新功能module的介绍及使用 2、Introduction to "},["/code/golang/快速使用gomod.html","/code/golang/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8gomod","/code/golang/快速使用gomod.md","/code/golang/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8gomod.md"]],
  ["v-251038ea","/linux/gainian/code-type.html",{"title":"编程语言的分类","type":"article","readingTime":{"minutes":1.67,"words":500},"excerpt":"编程语言的分类 编程语言的分类可以从三个角度出发： 编译型和解释型 编译型 即把源程序的每一条语句都编译成机器语言，并保存为二进制文件，这样运行时计算机可以直接以机器语言来运行此程序。 优点：执行速度很快; 缺点：开发效率低，不能跨平台; 常见语言有C\\C++、Go等 解释型 只在运行时才一条一条的解释成机器语言给计算机执行。 优点：开发效率高，跨平台; 缺","tag":["概念"]},["/linux/gainian/code-type","/linux/gainian/code-type.md"]],
  ["v-1dac2bea","/linux/gainian/dev-ops-env.html",{"title":"DEV SIT UAT PET SIM PRD PROD常见环境英文缩写含义","type":"article","readingTime":{"minutes":0.96,"words":287},"excerpt":"DEV SIT UAT PET SIM PRD PROD常见环境英文缩写含义 英文缩写 英文 中文 DEV development 开发 SIT System Integrate Test 系统整合测试（内测） UAT User Acceptance Test 用户验收测试 PET Performance Evaluation Test 性能评估测试（压测）","tag":["概念"]},["/linux/gainian/dev-ops-env","/linux/gainian/dev-ops-env.md"]],
  ["v-71c3d342","/linux/gainian/document-style-guide.html",{"title":"中文技术文档的写作规范","type":"article","readingTime":{"minutes":5.13,"words":1539},"excerpt":"中文技术文档的写作规范 \" 转载自：https://github.com/ruanyf/document-style-guide\" 标题 层级 标题分为四级。 一级标题：文章的标题; 二级标题：文章主要部分的大标题; 三级标题：二级标题下面一级的小标题; 四级标题：三级标题下面某一方面的小标题; 下面是示例。 原则 （1）一级标题下，不能直接出现三级标题。 ","tag":["概念"]},["/linux/gainian/document-style-guide","/linux/gainian/document-style-guide.md"]],
  ["v-3e5b3ed6","/linux/qa/centos-time.html",{"title":"","type":"article","readingTime":{"minutes":0.65,"words":196},"excerpt":"centos7下时区问题 centos7时区同样, 在 CentOS 7 中, 引入了一个叫 timedatectl 的设置设置程序。 用法很简单： 其实不考虑各个发行版的差异化, 从更底层出发的话, 修改时间时区比想象中要简单:","category":["Linux"],"tag":["常见问题"]},["/linux/qa/centos-time","/linux/qa/centos-time.md"]],
  ["v-0042dc04","/linux/qa/curl-https.html",{"title":"证书相关问题","type":"article","readingTime":{"minutes":0.62,"words":187},"excerpt":"证书相关问题 curl https报错: curl: (35) SSL connect error 原因：curl默认支持https是nss，而不是openssl，需要换成openss 源码编译curl 转载自： ca证书过期导致请求错误 1）查看一下时间date 2） 系统 curl 命令不通的时候 更新一下 证书 3）更新一下java里面的cacerts","category":["Linux"],"tag":["常见问题"]},["/linux/qa/curl-https","/linux/qa/curl-https.md"]],
  ["v-69c431cc","/linux/qa/du-df-diff.html",{"title":"Linux，du、df统计的硬盘使用情况不一致问题","type":"article","readingTime":{"minutes":2.44,"words":733},"excerpt":"Linux，du、df统计的硬盘使用情况不一致问题 在运维Linux服务器时，会碰到需要查看硬盘空间的情况，这时候，通常会使用df -lh命令来检查每个挂载了文件系统的硬盘的总量和已使用量，或者，可以使用du -sh [directory]命令来统计某个目录下所有文件的空间占用。 在使用df、du命令时，常常会遇到统计的硬盘使用情况不一致的问题。比如du统计","category":["Linux"],"tag":["常见问题"]},["/linux/qa/du-df-diff","/linux/qa/du-df-diff.md"]],
  ["v-500e3316","/linux/qa/mysql-max-con.html",{"title":"mysql最大连接数的改变","type":"article","readingTime":{"minutes":0.98,"words":294},"excerpt":"mysql最大连接数的改变 在使用MySQL数据库的时候，经常会遇到这么一个问题，就是“Can not connect to MySQL server. Too many connections”-mysql 1040错误，这是因为访问MySQL且还未释放的连接数目已经达到MySQL的上限。通常，mysql的最大连接数默认是100, 最大可以达到16384。","category":["Linux"],"tag":["常见问题"]},["/linux/qa/mysql-max-con","/linux/qa/mysql-max-con.md"]],
  ["v-b7ef744a","/linux/qa/swap.html",{"title":"linux下如何增加swap交换分区","type":"article","readingTime":{"minutes":0.88,"words":265},"excerpt":"linux下如何增加swap交换分区 swap即交换分区，类似于windows虚拟内存功能，就是在硬盘上分配出一块空间作为虚拟内存来使用. 通常swap都是在装系统硬盘分区时设定，这里只是探讨一下系统已经安装好后，扩展swap分区的方法.下面我们来将下如何在安装好的linux下增加swap交换分区. 可以有两种方法来增加swap分区，一种是将新的分区来作为s","category":["Linux"],"tag":["常见问题"]},["/linux/qa/swap","/linux/qa/swap.md"]],
  ["v-2b64c83c","/code/shell/part4-command.html",{"title":"第四部分 命令","type":"article","readingTime":{"minutes":1.91,"words":572},"excerpt":"第四部分 命令 掌握 Linux 命令是编写有效的 shell 脚本必不可少的序曲。 本章节涉及了下列的命令： .（参照 source）; ac; adduser; agetty; agrep; ar; arch; at; autoload; awk（参考 使用 awk 进行数学运算）; badblocks; banner; basename; batch;","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part4-command","/code/shell/part4-command.md"]],
  ["v-d1ce3044","/code/shell/part6.html",{"title":"第六部分 Google Shell 风格指南","type":"article","readingTime":{"minutes":16.65,"words":4996},"excerpt":"第六部分 Google Shell 风格指南 1 背景 1.1 使用哪一种Shell\r\" Bash是唯一被允许执行的shell脚本语言。\" 可执行文件必须以#!/bin/bash和最小数量的标志开始。请使set来设置shell的选项，使得用bash 调用你的脚本时不会破坏其功能。 限制所有的可执行shell脚本为bash使得我们安装在所有计算机中的shell","author":"Google","category":["Linux"],"tag":["Bash","风格"]},["/code/shell/part6","/code/shell/part6.md"]],
  ["v-19fa2dc8","/code/shell/",{"title":"高级 Bash 脚本编程指南","type":"article","readingTime":{"minutes":4.69,"words":1407},"excerpt":"高级 Bash 脚本编程指南\r\" 本教程内容转载自：https://github.com/LinuxStory/Advanced-Bash-Scripting-Guide-in-Chinese\"\r\"\"\r\" 感谢开源翻译！！！\" 《高级Bash脚本编程指南》Revision 10中文版 知识体系 详细的核心知识点 复习思维导图 原著及早期翻译作品 原著\r原著链","author":"LinuxStory & Clay","category":["Linux"],"tag":["Bash"],"sticky":60,"star":60},["/code/shell/index.html","/code/shell/readme.md"]],
  ["v-1f4e571e","/code/shell/shell.html",{"title":"Shell","type":"article","readingTime":{"minutes":5.39,"words":1616},"excerpt":"Shell 青铜 什么时候使用shell 自动化常用命令; 执行系统管理和故障排除; 创建简单的应用程序; 处理文本或文件; 什么是 Sha-bang 脚本起始行 Sha-bang：系统这个脚本文件需要使用指定的命令解释器来执行#!/bin/bash 或 #!/usr/bin/env bash shell 脚本如何调用 bash 或 sh 脚本名称; 给脚本"},["/code/shell/shell","/code/shell/shell.md"]],
  ["v-ef4ea5ce","/monitor/elk/",{"title":"ELK","type":"article","readingTime":{"minutes":0.01,"words":3},"excerpt":"ELK hello elk~","category":["监控"],"tag":["ELK"]},["/monitor/elk/index.html","/monitor/elk/readme.md"]],
  ["v-d3fe39f2","/monitor/prometheus/multi_remote_read.html",{"title":"别再乱用 Prometheus 联邦了，分享一个 Prometheus 高可用新方案","type":"article","readingTime":{"minutes":6.16,"words":1848},"excerpt":"别再乱用 Prometheus 联邦了，分享一个 Prometheus 高可用新方案 \" 转载自：别再乱用 Prometheus 联邦了，分享一个 Prometheus 高可用新方案 ｜ 云原生实验室\" 前言 我看到很多人会这样使用联邦：联邦 prometheus 收集多个采集器的数据; 实在看不下下去了，很多小白还在乱用prometheus的联邦; 其实很","category":["监控"],"tag":["prometheus"]},["/monitor/prometheus/multi_remote_read","/monitor/prometheus/multi_remote_read.md"]],
  ["v-32678264","/monitor/prometheus/pod-label.html",{"title":"Prometheus迷雾 - 无法获取Pod的label","type":"article","readingTime":{"minutes":7.42,"words":2226},"excerpt":"Prometheus迷雾 - 无法获取Pod的label \" 转载自：Prometheus迷雾 - 无法获取Pod的label 喜贵的云原生 简书\" 问题背景 Prometheus在抓取container的CPU/Mem等metric的时候，发现metric上没有带Pod的label，这导致一个问题，无法通过自定义的label查看其下的所有metric资源。","category":["监控"],"tag":["prometheus"]},["/monitor/prometheus/pod-label","/monitor/prometheus/pod-label.md"]],
  ["v-78cfc7b7","/monitor/prometheus/",{"title":"Prometheus 学习笔记","type":"article","readingTime":{"minutes":0.13,"words":38},"excerpt":"Prometheus 学习笔记 常用官网 prometheus 官方文档 :star: Prometheus 教程 Prometheus yunlzheng github :star: Awesome Prometheus alerts","category":["监控"],"tag":["prometheus"]},["/monitor/prometheus/index.html","/monitor/prometheus/readme.md"]],
  ["v-46bc9423","/monitor/zabbix/agent2-https.html",{"title":"使用zabbix-agent2自定义插件获取https证书过期时间","type":"article","readingTime":{"minutes":3.8,"words":1141},"excerpt":"使用zabbix-agent2自定义插件获取https证书过期时间\r\" 转载自: 公众号运维开发故事 | wanger\" 需求 对经常维护网站的人来说，要经常跟https的证书打交道。一般https证书的有效期是一年，证书一旦过期，公司的损失会非常大。去年网易邮箱因为https证书忘记续期，导致大量用户无法正常使用邮箱就是个典型案例。什么时候想起来才去手动查","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/agent2-https","/monitor/zabbix/agent2-https.md"]],
  ["v-f875cf44","/monitor/zabbix/qa.html",{"title":"6 常见问题","type":"article","readingTime":{"minutes":0.89,"words":267},"excerpt":"6 常见问题 Zabbix客户端日志出现(Not all processes could be identified） 场景：因为使用了netstat -p参数。 权限问题，zabbix_agentd是zabbix用户启动的，默认不能执行netstat -p等命令，导致从服务器取到的自动发现脚本为空 (Not all processes could be i","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/qa","/monitor/zabbix/qa.md"]],
  ["v-0b0f120b","/monitor/zabbix/",{"title":"1 zabbix4.4新功能","type":"article","readingTime":{"minutes":4.67,"words":1401},"excerpt":"1 zabbix4.4新功能 探索Zabbix4.4新功能 \" https://www.zabbix.com/cn/whatsnew4_4 \" 新一代的Zabbix Agent; Go语言编写; 用于监控各种服务和应用的插件框架 ; 并发检查时确保状态正常(例如，保持持续的DB连接) ; 内置时间调度器（scheduler ），支持灵活的时间间隔 ; 使用批","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/index.html","/monitor/zabbix/readme.md"]],
  ["v-24eba14a","/monitor/zabbix/todolist.html",{"title":"10 Todolist","type":"article","readingTime":{"minutes":0.38,"words":113},"excerpt":"10 Todolist 待整理链接有： tomcat监控自动重启脚本：https://mp.weixin.qq.com/s?_biz=MzU2MDg5NzYzNA==&mid=2247483717&idx=1&sn=f3404f8b58d260cf29bb465525a0c391&chksm=fc004a48cb77c35e4a0646d82b015ea76","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/todolist","/monitor/zabbix/todolist.md"]],
  ["v-baa733fa","/monitor/zabbix/zabbix-activemq.html",{"title":"8 activemq监控","type":"article","readingTime":{"minutes":0.82,"words":245},"excerpt":"8 activemq监控 \" zabbix旧版本可以用，新版本建议用官方模板\" 关闭被监控端的防火墙 activemq 防火墙的添加还是有问题，先把防火墙给关了，它好像是后续会再产生一个随机端口，进行数据的传输 zabbixproxy安装javagateway， 因为是基于JMX进行监控的 修改配置文件 配置./apache-activemq-5.11.1/","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-activemq","/monitor/zabbix/zabbix-activemq.md"]],
  ["v-9baa27c2","/monitor/zabbix/zabbix-ans.html",{"title":"2 zabbix借助ansible安装","type":"article","readingTime":{"minutes":3.36,"words":1009},"excerpt":"2 zabbix借助ansible安装 zabbix-server安装 1. 下载roles 2. 编写playbook vim new-zabbix-server.yml 3. 安装zabbix-server 4. 优化 优化磁盘，去除atime 5. 注意事项 zabbix-web，筛选历史问题时，记得选择时间范围 zabbix-proxy安装 1. 下","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-ans","/monitor/zabbix/zabbix-ans.md"]],
  ["v-7de67fc4","/monitor/zabbix/zabbix-api-web.html",{"title":"7 用zabbix api批量添加web监控","type":"article","readingTime":{"minutes":2.38,"words":713},"excerpt":"7 用zabbix api批量添加web监控 python脚本如下： vim zabbix_agent.py 编写shell，调用python，打日志 vim web_monitor.sh list文件内容格式如下： \"参考链接：https://cloud.tencent.com/developer/article/1157571\" \"\" \"https://","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-api-web","/monitor/zabbix/zabbix-api-web.md"]],
  ["v-1b3959e1","/monitor/zabbix/zabbix-media.html",{"title":"3 zabbix添加报警媒介","type":"article","readingTime":{"minutes":0.71,"words":213},"excerpt":"3 zabbix添加报警媒介 zabbix添加报警媒介 进入zabbix-web，点击Administrator-->Media types-->Create Media type 添加Email报警 添加钉钉报警 推荐文章 Zabbix使用JavaScript配置Webhook发送告警通知 图中Script内容如下 \"参考官方文档：https://www.","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-media","/monitor/zabbix/zabbix-media.md"]],
  ["v-fe8a603a","/monitor/zabbix/zabbix-mysql.html",{"title":"4 MySQL监控模块","type":"article","readingTime":{"minutes":2.64,"words":793},"excerpt":"4 MySQL监控模块 \" zabbix旧版本可以用，新版本建议用官方模板\" Template DB MySQL简介 应用集 MySQL 监控项 1. MySQL begin operations per second（MySQL每秒开始操作） 2. MySQL bytes received per second（从所有客户端接收的字节数） 3. MySQL","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-mysql","/monitor/zabbix/zabbix-mysql.md"]],
  ["v-01406aac","/monitor/zabbix/zabbix-redis.html",{"title":"5 Redis监控模块","type":"article","readingTime":{"minutes":0.54,"words":161},"excerpt":"5 Redis监控模块 \" zabbix旧版本可以用，新版本建议用官方模板\" 模板导入 打开“配置”-->“模板”-->\"导入\" 导入zaxredis文件夹下的redistemplatesforzbx_3.4.xml文件 配置文件导入 将zaxredis文件夹下的userparameterredis.conf文件上传到redis服务器的/etc/zabbix","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-redis","/monitor/zabbix/zabbix-redis.md"]],
  ["v-306cc50e","/monitor/zabbix/zabbix-zookeeper.html",{"title":"9 zookeeper集群监控","type":"article","readingTime":{"minutes":0.54,"words":161},"excerpt":"9 zookeeper集群监控 \" zabbix旧版本可以用，新版本建议用官方模板\" Zabbix-Zookeper-Template System requirements zabbix >= 3.4 (preprocessing used by this template); zookeeper >= 3.4 (mntr stats); netcat ;","category":["监控"],"tag":["Zabbix"]},["/monitor/zabbix/zabbix-zookeeper","/monitor/zabbix/zabbix-zookeeper.md"]],
  ["v-cd5b6460","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/nginx%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D.html",{"title":"","type":"article","readingTime":{"minutes":1.08,"words":325},"excerpt":"Nginx升级加固SSL/TLS协议信息泄露漏洞(CVE-2016-2183)和HTTP服务器的缺省banner漏洞\r\" :warning: 注意：要根据实际情况进行修改，这只是大体的思路\" Nginx缺省banner修改 然后重新编译，热升级nginx"},["/other/23 未分类/nginx漏洞修复.html","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/nginx%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D","/other/23 未分类/nginx漏洞修复.md","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/nginx%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D.md"]],
  ["v-3125c2ab","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/oracle%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%A1%A8%E8%A2%AB%E9%94%81%E4%BD%8F%E4%BA%86.html",{"title":"","type":"article","readingTime":{"minutes":0.3,"words":90},"excerpt":"查看哪些表被锁住了 查询引起死锁的会话 查出sid和serial# 查v$process视图,得到spid 杀死进程(sid,serial#)"},["/other/23 未分类/oracle查看哪些表被锁住了.html","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/oracle%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%A1%A8%E8%A2%AB%E9%94%81%E4%BD%8F%E4%BA%86","/other/23 未分类/oracle查看哪些表被锁住了.md","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/oracle%E6%9F%A5%E7%9C%8B%E5%93%AA%E4%BA%9B%E8%A1%A8%E8%A2%AB%E9%94%81%E4%BD%8F%E4%BA%86.md"]],
  ["v-c137e9d6","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/rsync+inotify%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5.html",{"title":"","type":"article","readingTime":{"minutes":1.29,"words":386},"excerpt":"由于我的jenkins和ansible没有安装在一台主机上，所以，现在利用rsync+inotify实现jenkins的工作目录，同步到ansible主机上 环境如下： inotify-master IP :192.168.162.175 inotify-slave IP:192.168.162.119 1 inotify slave部署 1.1 安装rsy"},["/other/23 未分类/rsync+inotify实现实时同步.html","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/rsync+inotify%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5","/other/23 未分类/rsync+inotify实现实时同步.md","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/rsync+inotify%E5%AE%9E%E7%8E%B0%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5.md"]],
  ["v-3a0e3b36","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A2%AB%E9%99%8D%E9%A2%91%E9%94%81%E9%A2%91%E9%97%AE%E9%A2%98.html",{"title":"","type":"article","readingTime":{"minutes":0.12,"words":37},"excerpt":"下载一个throttlestop，然后安装之后在最下面的BD prochot 选项勾掉不选 点击下面的turn on,解决限频问题"},["/other/23 未分类/小米笔记本被降频锁频问题.html","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A2%AB%E9%99%8D%E9%A2%91%E9%94%81%E9%A2%91%E9%97%AE%E9%A2%98","/other/23 未分类/小米笔记本被降频锁频问题.md","/other/23%20%E6%9C%AA%E5%88%86%E7%B1%BB/%E5%B0%8F%E7%B1%B3%E7%AC%94%E8%AE%B0%E6%9C%AC%E8%A2%AB%E9%99%8D%E9%A2%91%E9%94%81%E9%A2%91%E9%97%AE%E9%A2%98.md"]],
  ["v-478df006","/other/temp/python%20subprocess%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.html",{"title":"","type":"article","readingTime":{"minutes":3.9,"words":1169},"excerpt":"subprocess模块允许你去创建一个新的进程让其执行另外的程序，并与它进行通信，获取标准的输入、标准输 出、标准错误以及返回码等。(使用这个模块之前先导入import subprocess)。 subprocess模块打算来替代几个过时的模块和函数，比如： os.system, os.spawn, os.popen, popen2.*命令。 让我们来看一"},["/other/temp/python subprocess模块的使用.html","/other/temp/python%20subprocess%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8","/other/temp/python subprocess模块的使用.md","/other/temp/python%20subprocess%E6%A8%A1%E5%9D%97%E7%9A%84%E4%BD%BF%E7%94%A8.md"]],
  ["v-369f9189","/other/vscode/vscode%E5%8D%B8%E8%BD%BD.html",{"title":"","type":"article","readingTime":{"minutes":0.08,"words":23},"excerpt":"卸载vscode; \r清除C:\\Users\\user\\.vscode文件夹; \r清楚C:\\Users\\user\\AppData\\Roaming\\Code文件夹;"},["/other/vscode/vscode卸载.html","/other/vscode/vscode%E5%8D%B8%E8%BD%BD","/other/vscode/vscode卸载.md","/other/vscode/vscode%E5%8D%B8%E8%BD%BD.md"]],
  ["v-6e285e1e","/other/vscode/vscode%E5%AE%89%E8%A3%85.html",{"title":"","type":"article","readingTime":{"minutes":0.16,"words":49},"excerpt":"1. 从官网下载https://code.visualstudio.com/ 2. 根据喜好安装相关插件\rChinese (Simplified) Language Pack for Visual Studio Code // 中文; \rCode Runner // 运行代码; \rMaterial Icon Theme // 文件图标; \rOne Dark "},["/other/vscode/vscode安装.html","/other/vscode/vscode%E5%AE%89%E8%A3%85","/other/vscode/vscode安装.md","/other/vscode/vscode%E5%AE%89%E8%A3%85.md"]],
  ["v-29496566","/other/vscode/vscode%E9%85%8D%E7%BD%AEgo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html",{"title":"","type":"article","readingTime":{"minutes":0.27,"words":81},"excerpt":"1. 安装go插件 2. 安装插件提供的工具\rctrl+shift+p, 选择 Go: Install/Update tools，勾选全部工具进行安装; \r额外安装gopls工具，Go modules需要; 3. 设置\rsettings.json增加一行\"go.formatTool\": \"goimports\"，也是Go modules的影响; \r增加一行\"g"},["/other/vscode/vscode配置go开发环境.html","/other/vscode/vscode%E9%85%8D%E7%BD%AEgo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83","/other/vscode/vscode配置go开发环境.md","/other/vscode/vscode%E9%85%8D%E7%BD%AEgo%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md"]],
  ["v-3a0b9430","/other/vscode/vscode%E9%85%8D%E7%BD%AEjenkins%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.html",{"title":"","type":"article","readingTime":{"minutes":0.24,"words":73},"excerpt":"1. 安装插件，找下载量大的下载\rJenkinsfile Support; \rJenkins Pipeline Linter Connector; 2. 设置，ctrl+shift+p, 打开首选项：打开设置(json)\r添加下面四行;"},["/other/vscode/vscode配置jenkins开发环境.html","/other/vscode/vscode%E9%85%8D%E7%BD%AEjenkins%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83","/other/vscode/vscode配置jenkins开发环境.md","/other/vscode/vscode%E9%85%8D%E7%BD%AEjenkins%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83.md"]],
  ["v-34f4c76c","/other/%E5%BE%85%E6%95%B4%E7%90%86/12.1%20keepalived%E5%92%8Cheartbeat%E5%AF%B9%E6%AF%94.html",{"title":"高可用开源方案 Keepalived VS Heartbeat对比","type":"article","readingTime":{"minutes":1.44,"words":431},"excerpt":"高可用开源方案 Keepalived VS Heartbeat对比 最近因为项目需要，简单的试用了两款高可用开源方案：Keepalived和Heartbeat。两者都很流行，但差异还是很大的，现将试用过程中的感受以及相关知识点简单总结一下，供大家选择方案的时候参考。 1）Keepalived使用更简单：从安装、配置、使用、维护等角度上对比，Keepalive"},["/other/待整理/12.1 keepalived和heartbeat对比.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/12.1%20keepalived%E5%92%8Cheartbeat%E5%AF%B9%E6%AF%94","/other/待整理/12.1 keepalived和heartbeat对比.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/12.1%20keepalived%E5%92%8Cheartbeat%E5%AF%B9%E6%AF%94.md"]],
  ["v-3c122d46","/other/%E5%BE%85%E6%95%B4%E7%90%86/%E7%99%BD%E5%A4%A9%E5%81%9A%E8%BF%90%E7%BB%B4%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%90%9E%E5%89%AF%E4%B8%9A%E8%B5%9A%E9%92%B1.html",{"title":"白天做运维，晚上搞副业赚钱","type":"article","readingTime":{"minutes":1.75,"words":524},"excerpt":"白天做运维，晚上搞副业赚钱 作为 运维工程师，除了固定工作外，你有想过副业变现提升收入吗？ 谁不想凭自己的努力赚点钱，让自己和家人过得更好呢？ 1 送外卖？写公号？录教程？ 你有对副业变现，增加收入，有深入研究么？ 1.1 送外卖，卖血汗？ No，这个并不合适我，我第一次送外卖，就骑电动车摔了，摔了好几处伤，恢复了一个月，还把手机摔坏了，总共送了两单，赚了2"},["/other/待整理/白天做运维，晚上搞副业赚钱.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/%E7%99%BD%E5%A4%A9%E5%81%9A%E8%BF%90%E7%BB%B4%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%90%9E%E5%89%AF%E4%B8%9A%E8%B5%9A%E9%92%B1","/other/待整理/白天做运维，晚上搞副业赚钱.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/%E7%99%BD%E5%A4%A9%E5%81%9A%E8%BF%90%E7%BB%B4%EF%BC%8C%E6%99%9A%E4%B8%8A%E6%90%9E%E5%89%AF%E4%B8%9A%E8%B5%9A%E9%92%B1.md"]],
  ["v-02e16be0","/web/django/",{"title":"","type":"article","readingTime":{"minutes":0.01,"words":2},"excerpt":"https://pythondjango.cn/"},["/web/django/index.html","/web/django/readme.md"]],
  ["v-5fdd348e","/web/nginx/config.html",{"title":"3. nginx配置文件详解","type":"article","readingTime":{"minutes":10.93,"words":3280},"excerpt":"3. nginx配置文件详解 配置文件详解 1 样例文件解释 2 全局变量\r\" 参考链接：\"\r\"\"\r\" https://jasonhzy.github.io/2017/09/03/nginx/\"\r\"\"\r\" https://blog.csdn.net/tzy233/article/details/79780444\"\r\"\"\r\" https://blog.csdn","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/config","/web/nginx/config.md"]],
  ["v-702e3c11","/web/nginx/core.html",{"title":"4. 内核参数优化","type":"article","readingTime":{"minutes":5.95,"words":1784},"excerpt":"4. 内核参数优化 linux内核参数优化（网络模块） 在Linux下调整内核参数，可以直接编辑配置文件/etc/sysctl.conf，然后执行sysctl -p命令生效 文件内容如下：\rnet.core.somaxconn = 262144; web应用中listen函数的backlog默认会给我们内核参数的net.core.somaxconn限制到12","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/core","/web/nginx/core.md"]],
  ["v-51aecb92","/web/nginx/first.html",{"title":"1. 初识Nginx","type":"article","readingTime":{"minutes":17.68,"words":5304},"excerpt":"1. 初识Nginx 1 Nginx的三个主要应用场景 三个主要应用场景为：\r静态资源服务（通过本地文件系统提供服务）; \r反向代理服务; \rAPI服务（OpenRestydeng ）; 1.1 反向代理服务 1.1.1 负载均衡 负载均衡，一般包含两方面的含义。\r一方面是，将单一的重负载分担到多个网络节点上做并行处理，每个节点处理结束后将结构汇总返回给用户","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/first","/web/nginx/first.md"]],
  ["v-8002e92e","/web/nginx/forbidden.html",{"title":"6.1 Nginx出现403 forbidden的三种原因","type":"article","readingTime":{"minutes":0.99,"words":297},"excerpt":"6.1 Nginx出现403 forbidden的三种原因 引起nginx 403 forbidden通常是三种情况：一是缺少主页文件，二是权限问题，三是SELinux状态。 缺少主页文件 如果在/clay/clay1/clay2/下面没有index.php或index.html的时候，直接文件，会报403 forbidden。\r\" 当index文件问ind","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/forbidden","/web/nginx/forbidden.md"]],
  ["v-80859ef8","/web/nginx/framework.html",{"title":"2. nginx架构基础","type":"article","readingTime":{"minutes":1.86,"words":559},"excerpt":"2. nginx架构基础 1 Nginx请求处理流程 2 Nginx进程结构 3 Nginx进程管理：信号 3.1 Master进程\r监控worker进程; \rCHLD; \r管理worker进程; \r接收信号; \rTERM，INT; \rQUIT; \rHUP; \rUSR1; \rUSR2; \rWINCH; 3.2 Worker进程\r接收信号; \rTERM，INT","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/framework","/web/nginx/framework.md"]],
  ["v-1cb1969f","/web/nginx/global-events.html",{"title":"3.1 nginx全局块和events块配置","type":"article","readingTime":{"minutes":1.82,"words":546},"excerpt":"3.1 nginx全局块和events块配置 1 example 2 配置CPU参数 Nginx默认没有开启利用多核cpu，我们可以通过增加workercpuaffinity配置参数来充分利用多核cpu的性能。cpu是任务处理，计算最关键的资源，cpu核越多，性能就越好。 2.1 nginx worker_processes worker_processes","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/global-events","/web/nginx/global-events.md"]],
  ["v-4d07e670","/web/nginx/http.html",{"title":"3.2 nginxHTTP块配置","type":"article","readingTime":{"minutes":2.75,"words":825},"excerpt":"3.2 nginxHTTP块配置 1 配置块的嵌套 2 指令的合并\r值指令：存储配置项的值; \r可以合并; \r示例：root，access_log，gzip; \r动作类指令：指定行为; \r不可以合并; \r示例：rewrite，proxy_pass; \r生效阶段：server_rewrite阶段，rewrite阶段，content阶段; 存储值的指令继承规则：","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/http","/web/nginx/http.md"]],
  ["v-8f79538a","/web/nginx/location.html",{"title":"3.4 nginxLOCATION块配置","type":"article","readingTime":{"minutes":6.32,"words":1897},"excerpt":"3.4 nginxLOCATION块配置 nginx中location的匹配模式有以下几种：\r精确匹配：以=开头，只有完全匹配才能生效，例子location = /uri; \r非正则匹配：以^~开头，^表示非、~表示正则，例子location ^~ /uri; \r正则匹配：; \r以~开头，表示区分大小写的正则匹配，例子location ~ pattern; ","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/location","/web/nginx/location.md"]],
  ["v-179a7ba4","/web/nginx/module.html",{"title":"3.5 nginx常用模块","type":"article","readingTime":{"minutes":9.49,"words":2846},"excerpt":"3.5 nginx常用模块 1 Module ngxhttpgzip_module 该ngxhttpgzip_module模块是一个使用“gzip”方法压缩响应的过滤器。这通常有助于将传输数据的大小减少一半甚至更多。\r\" 使用SSL / TLS协议时，压缩的响应可能会受到 BREACH攻击。\" 在实际的应用中我们发现压缩的比率往往在 3 到 10 倍，也就是","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/module","/web/nginx/module.md"]],
  ["v-2762ae00","/web/nginx/qa.html",{"title":"6. nginx的常见问题","type":"article","readingTime":{"minutes":5.81,"words":1744},"excerpt":"6. nginx的常见问题 nginx前面有多个反向代理时，proxy的正确设置 注释掉这两行，让它使用默认配置 nginx解决跨域问题 在nginx.conf中编辑 从http跳转到https 项目前期使用http，后期为了安全方面的考虑，启用了https。 项目架构：前端使用nginx作为多个tomcat实例的反向代理和负载均衡。 实际上只需要在ngin","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/qa","/web/nginx/qa.md"]],
  ["v-1943aea9","/web/nginx/",{"title":"Nginx 学习笔记","type":"article","readingTime":{"minutes":0.62,"words":185},"excerpt":"Nginx 学习笔记 推荐教程 nginx核心知识150讲 陶辉 极客时间 :star: Nginx 极简教程 | dunwu OpenResty 最佳实践 | moonbingbing\r\" 以下笔记大部分出自以上教程\" 知识体系 Hello Nginx~ 详细的核心知识点 复习思维导图 Summary\r1. 初识Nginx; \r2. nginx架构基础; ","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"],"sticky":52,"star":52},["/web/nginx/index.html","/web/nginx/readme.md"]],
  ["v-319ae12d","/web/nginx/server.html",{"title":"3.3 nginxSERVER块配置","type":"article","readingTime":{"minutes":0.65,"words":196},"excerpt":"3.3 nginxSERVER块配置 1 Listen 指令 Example Configuration Directives 2 server_name指令 2.1 规则\r指令后可以跟多个域名，第一个是主域名; \r泛域名：进支持在最前或最后（server_name .baiud.com;）; \r正则表达式：加~前缀 (server_name www.tao","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/server","/web/nginx/server.md"]],
  ["v-29b355de","/web/nginx/status.html",{"title":"5. 状态码","type":"article","readingTime":{"minutes":4.55,"words":1364},"excerpt":"5. 状态码 Nginx code 常用状态码学习小结 Nginx Code Status 状态码分为五类： 1. 100-199 用于指定客户端应相应的某些动作。 2. 200-299 用于表示请求成功。 3. 300-399 用于已经移动的文件并且常被包含在定位头信息中指定新的地址信息。 4. 400-499 用于指出客户端的错误。 5. 500-599","date":"2020-03-20T00:00:00.000Z","category":["web中间件"],"tag":["Nginx"]},["/web/nginx/status","/web/nginx/status.md"]],
  ["v-01d2be24","/web/tomcat/cache.html",{"title":"Tomcat “缓存”清理","type":"article","readingTime":{"minutes":2.39,"words":716},"excerpt":"Tomcat “缓存”清理 \" 转载自：Tomcat “缓存”清理\" 一、关于Tomcat“缓存”的介绍 很多时候大家喜欢把tomcat的work目录里的东西叫做缓存，其实那不是很恰当，work目录只是tomcat的工作目录，也就是tomcat把jsp转换为class文件的工作目录，这也正是为什么它叫work目录而不是cache目录的原因。 　　jsp，to","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/cache","/web/tomcat/cache.md"]],
  ["v-3ef6b5c2","/web/tomcat/danger.html",{"title":"tomcat注意事项","type":"article","readingTime":{"minutes":0.08,"words":24},"excerpt":"tomcat注意事项 war正确删除姿势 tomcat中war包停止后才可以删除","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/danger","/web/tomcat/danger.md"]],
  ["v-b121e484","/web/tomcat/dead.html",{"title":"tomcat假死现象","type":"article","readingTime":{"minutes":6.83,"words":2048},"excerpt":"tomcat假死现象 1 背景 1.1 编写目的 为了方便大家以后发现进程假死的时候能够正常的分析并且第一时间保留现场快照。 1.2编写背景 最近服务器发现tomcat的应用会偶尔出现无法访问的情况。经过一段时间的观察最近又发现有台tomcat的应用出 现了无法访问情况。简单描述下该台tomcat当时具体的表现：客户端请求没有响应，查看服务器端tomcat的","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/dead","/web/tomcat/dead.md"]],
  ["v-819f88e4","/web/tomcat/prd.html",{"title":"生产环境中的tomcat配置","type":"article","readingTime":{"minutes":6.38,"words":1913},"excerpt":"生产环境中的tomcat配置 tomcat安全配置 版本安全 升级当前tomcat版本为最新稳定版本。 在升级版本中，需要注意两点：\r尽量避免跨大版本的升级; \r将当前老版本的server.xml , catalina.sh, web.xml和tomcat-users.xml进行备份，然后部署完新的tomcat; 后，将这些配置文件覆盖过去。 隐藏版本信息 ","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/prd","/web/tomcat/prd.md"]],
  ["v-5a715f17","/web/tomcat/",{"title":"Tomcat 学习笔记","type":"article","readingTime":{"minutes":1.28,"words":383},"excerpt":"Tomcat 学习笔记 Hello everyone, let's learn tomcat together！ Tomcat的开幕式 Tomcat以Java编写 安装Tomcat 官网地址为：https://tomcat.apache.org 各个版本的下载地址为：https://archive.apache.org/dist/tomcat/ 安装方式 二","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/index.html","/web/tomcat/readme.md"]],
  ["v-6b2696a0","/web/tomcat/status.html",{"title":"Tomcat 错误代号及状态码","type":"article","readingTime":{"minutes":5.35,"words":1604},"excerpt":"Tomcat 错误代号及状态码 状态代码 状态信息 含义\r\" 转载链接：\"\r\"\"\r\" https://www.jianshu.com/p/8ad1009f927d\"","date":"2020-03-08T00:00:00.000Z","category":["web中间件"],"tag":["Tomcat"]},["/web/tomcat/status","/web/tomcat/status.md"]],
  ["v-3e9942a6","/container/dockerfile/fastdfs/",{"title":"","type":"article","readingTime":{"minutes":0.51,"words":152},"excerpt":"使用方法 需要注意的是 你需要在运行容器的时候制定宿主机的ip 用参数PUBIP 来指定 客户端测试 拷贝一个图片到容器内 进入容器上传图片 返回值为group1/M00/00/00/wKh932A9-xCAcK7FAAGO_BH5JHs036.png 在浏览器访问http://宿主机IP:8888/group1/M00/00/00/wKh932A9-xCA"},["/container/dockerfile/fastdfs/index.html","/container/dockerfile/fastdfs/README.md"]],
  ["v-28948558","/db/redis/operate/hash.html",{"title":"hash类型","type":"article","readingTime":{"minutes":0.48,"words":145},"excerpt":"hash类型 hash⽤于存储对象 对象的结构为属性、值 值的类型为string 增加、修改 设置单个属性; 设置多个属性; 获取 获取指定键所有的属性; 获取⼀个属性的值; 获取多个属性的值; 获取所有属性的值; 获取一个hash有多少个属性; 删除 删除整个hash键及值，使⽤del命令; 删除属性，属性对应的值会被⼀起删除;","category":["Redis"]},["/db/redis/operate/hash","/db/redis/operate/hash.md"]],
  ["v-5c0dc3f1","/db/redis/operate/key.html",{"title":"键命令","type":"article","readingTime":{"minutes":0.35,"words":104},"excerpt":"键命令 查找键; 参数⽀持正则表达式 判断键是否存在，; 如果存在返回1，不存在返回0 查看键对应的value的类型; 删除键; 设置过期时间; 以秒为单位，如果没有指定过期时间则⼀直存在，直到使⽤DEL移除 查看有效时间; 以秒为单位","category":["Redis"]},["/db/redis/operate/key","/db/redis/operate/key.md"]],
  ["v-df69f078","/db/redis/operate/list.html",{"title":"list类型","type":"article","readingTime":{"minutes":1.08,"words":323},"excerpt":"list类型 列表的元素类型为string; 按照插⼊顺序排序; 增加 在左侧插⼊数据; 在右侧插⼊数据; 在指定元素的前或后插⼊新元素; 获取 返回列表⾥指定范围内的元素; start、stop为元素的下标索引; 索引从左侧开始，第⼀个元素为0; 索引可以是负数，表示从尾部开始计数，如-1表示最后⼀个元素; 设置指定索引位置的元素值 索引从左侧开始，第⼀个","category":["Redis"]},["/db/redis/operate/list","/db/redis/operate/list.md"]],
  ["v-dae22064","/db/redis/operate/set.html",{"title":"set 类型","type":"article","readingTime":{"minutes":0.4,"words":119},"excerpt":"set 类型 ⽆序集合; 元素为string类型; 元素具有唯⼀性，不重复; 说明：对于集合没有修改操作; 增加 添加元素; 例1：向键'a3'的集合中添加元素'zhangsan'、'lisi'、'wangwu'; 获取 返回所有的元素; 例2：获取键'a3'的集合中所有元素; 删除 删除指定元素; 例3：删除键'a3'的集合中元素'wangwu';","category":["Redis"]},["/db/redis/operate/set","/db/redis/operate/set.md"]],
  ["v-641cf9f1","/db/redis/operate/string.html",{"title":"string类型","type":"article","readingTime":{"minutes":0.76,"words":229},"excerpt":"string类型 字符串类型是Redis中最为基础的数据存储类型，该类型可以接受任何格式的数据，如JPEG图像数据或Json对象描述信息等。在Redis中字符串类型的Value最多可以容纳的数据长度是512M。 保存 如果设置的键不存在则为添加，如果设置的键已经存在则修改 设置键值; 设置键值及过期时间，以秒为单位; 设置多个键值; 追加值; 中文乱码问题的","category":["Redis"]},["/db/redis/operate/string","/db/redis/operate/string.md"]],
  ["v-5384c60c","/db/redis/operate/zset.html",{"title":"zset 类型","type":"article","readingTime":{"minutes":1.09,"words":328},"excerpt":"zset 类型 sorted set，有序集合; 元素为string类型; 元素具有唯⼀性，不重复; 每个元素都会关联⼀个double类型的score，表示权重，通过权重将元素从⼩到⼤排序; 说明：没有修改操作; 增加 添加; 例1：向键'a4'的集合中添加元素'lisi'、'wangwu'、'zhaoliu'、'zhangsan'，权重分别为4、5、6、3","category":["Redis"]},["/db/redis/operate/zset","/db/redis/operate/zset.md"]],
  ["v-07a2613e","/linux/basic/file/cat.html",{"title":"查看文件内容","type":"article","readingTime":{"minutes":15.98,"words":4795},"excerpt":"查看文件内容 cat命令 cat命令的用途是连接文件或标准输入并打印。这个命令常用来显示文件内容，或者将几个文件连接起来显示，或者从标准输入读取内容并显示，它常与重定向符号配合使用。 语法 cat(选项)(参数) 选项 功能 1.一次显示整个文件:cat filename 2.从键盘创建一个文件:cat > filename 只能创建新文件,不能编辑已有文件","category":["Linux"]},["/linux/basic/file/cat","/linux/basic/file/cat.md"]],
  ["v-6bf10a16","/linux/basic/file/file-detail.html",{"title":"查看文件详细属性","type":"article","readingTime":{"minutes":0.37,"words":111},"excerpt":"查看文件详细属性 stat命令 访问时间：atime，查看内容 修改时间：mtime，修改内容 改变时间：ctime，文件属性，比如权限 删除时间：dtime，文件被删除的时间","category":["Linux"]},["/linux/basic/file/file-detail","/linux/basic/file/file-detail.md"]],
  ["v-77310628","/linux/basic/file/file-type.html",{"title":"查看文件类型","type":"article","readingTime":{"minutes":3.47,"words":1041},"excerpt":"查看文件类型 ls命令 ls命令时linux下最常用的命令。ls命令就是list的缩写，缺省下ls用来打印出当前目录的清单，如果ls指定其他目录，那么就会显示指定目录里的文件及文件夹清单。 通过ls命令不仅可以查看linux文件夹包含的文件，而且可以查看文件权限（包括目录、文件夹、文件权限），查看目录信息等等。 常用选项 常用范例 1. 列出/opt文件夹下","category":["Linux"]},["/linux/basic/file/file-type","/linux/basic/file/file-type.md"]],
  ["v-1c6f6214","/linux/basic/file/zip.html",{"title":"打包、压缩","type":"article","readingTime":{"minutes":7.2,"words":2161},"excerpt":"打包、压缩 tar命令 tar命令可以为linux的文件和目录创建档案。利用tar，可以为某一特定文件创建档案（备份文件），也可以在档案中改变文件，或者向档案中加入新的文件。tar最初被用来在磁带上创建档案，现在，用户可以在任何设备上创建档案。利用tar命令，可以把一大堆的文件和目录全部打包成一个文件，这对于备份文件或将几个文件组合成为一个文件以便于网络传输","category":["Linux"]},["/linux/basic/file/zip","/linux/basic/file/zip.md"]],
  ["v-5da13174","/linux/basic/file/zsgc.html",{"title":"创建、复制、移动、删除","type":"article","readingTime":{"minutes":19.19,"words":5756},"excerpt":"创建、复制、移动、删除 touch命令（创建文件） linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。 语法 touch(选项)(参数) 选项 功能 touch命令参数可更改文档或目录的日期时间，包括存取时间和更改时间。 常用范例 1）创建不存在的文件 如果log2014.log不存在，则不创","category":["Linux"]},["/linux/basic/file/zsgc","/linux/basic/file/zsgc.md"]],
  ["v-dd604362","/code/shell/appendix/E_special_exitcodes.html",{"title":"","type":"article","readingTime":{"minutes":1.7,"words":509},"excerpt":"退出代码 表意 示例 | 注释 -------- ---- ---- |------ 1 通用错误 let \"var1 = 1/0\" | 其他错误，如除以零错误及其他无权限操作。 2 (据 Bash 文档) 误用 Shell builtins empty_function() {} | 缺失关键词或指令，或权限问题 (及 diff 在二进制文件比较时的返回值","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/appendix/E_special_exitcodes","/code/shell/appendix/E_special_exitcodes.md"]],
  ["v-e021017c","/code/shell/appendix/T_ascii_table.html",{"title":"附录 T. ASCII 表","type":"article","readingTime":{"minutes":2.22,"words":666},"excerpt":"附录 T. ASCII 表 传统上，这类书的附录会有一个 ASCII 表。但本书不会。取而代之的是这些生成一张完整 ASCII 表的简短脚本。 例 T-1. 一个生成 ASCII 表的脚本 例 T-2. 另一个 ASCII 表脚本 例 T-3. 第三个 ASCII 表脚本，使用 awk","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/appendix/T_ascii_table","/code/shell/appendix/T_ascii_table.md"]],
  ["v-0362c258","/code/shell/part1/01_shell_programming.html",{"title":"第一章 为什么使用shell编程","type":"article","readingTime":{"minutes":5.6,"words":1681},"excerpt":"第一章 为什么使用shell编程 \" 没有任何一种程序设计语言是完美的，甚至没有一个最好的语言。只有在特定环境下适合的语言。\" \"\" \" —— Herbert Mayer\" 无论你是否打算真正编写shell脚本，只要你想要在一定程度上熟悉系统管理，了解掌握shell脚本的相关知识都是非常有必要的。例如Linux系统在启动的时候会执行/etc/rc.d目录下的","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part1/01_shell_programming","/code/shell/part1/01_shell_programming.md"]],
  ["v-ccb7dd70","/code/shell/part1/02_1_invoking_the_script.html",{"title":"2.1 调用一个脚本","type":"article","readingTime":{"minutes":0.85,"words":256},"excerpt":"2.1 调用一个脚本 写完一个脚本以后，你可以通过sh scriptname或bash scriptname来调用它（不推荐使用sh <scriptname调用脚本，因为这会禁用脚本从标准输入（stdin）读入数据）。更方便的方式是使用chmod命令使脚本可以被直接执行。 执行命令： chmod 555 scriptname（给予所有用户读取/执行的权限） ","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part1/02_1_invoking_the_script","/code/shell/part1/02_1_invoking_the_script.md"]],
  ["v-7af80658","/code/shell/part1/02_2_preliminary_exercises.html",{"title":"2.2 牛刀小试","type":"article","readingTime":{"minutes":0.32,"words":97},"excerpt":"2.2 牛刀小试 1. 系统管理员通常会写一些脚本来完成自动化工作。试举例说明使用脚本的便利之处。 2. 请尝试写一个脚本。调用脚本，会打印当前系统时间和日期，所有已登录的用户和系统运行时间。并将这些信息保存到一个日志文件中。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part1/02_2_preliminary_exercises","/code/shell/part1/02_2_preliminary_exercises.md"]],
  ["v-c0e652fc","/code/shell/part1/02_starting_off_with_a_sha_bang.html",{"title":"第二章 和Sha-Bang（#!）一起出发","type":"article","readingTime":{"minutes":6.71,"words":2012},"excerpt":"第二章 和Sha-Bang（#!）一起出发 \" Shell编程声名显赫\" \"\" \" —— Larry Wall\" 本章目录 2.1 调用一个脚本; 2.2 牛刀小试; --- 一个最简单的脚本其实就是将一连串系统命令存储在一个文件中。最起码，它能帮你省下重复输入这一连串命令的功夫。 样例 2-1. cleanup：清理/var/log目录下的日志文件 这支脚","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part1/02_starting_off_with_a_sha_bang","/code/shell/part1/02_starting_off_with_a_sha_bang.md"]],
  ["v-71241dce","/code/shell/part1/",{"title":"第一部分 初见Shell","type":"article","readingTime":{"minutes":0.89,"words":268},"excerpt":"第一部分 初见Shell \" 脚本：文章；书面文档\" \" \" \" ——韦伯斯特字典1913年版\" Shell是一种命令解释器，它不仅分离了用户层与操作系统内核，更是一门强大的编程语言。我们称为shell编写的程序为脚本（script）。脚本是一种易于使用的工具，它能够将系统调用、工具软件、实用程序（utility）和已编译的二进制文件联系在一起构建程序。实际","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part1/index.html","/code/shell/part1/readme.md"]],
  ["v-765b1b97","/code/shell/part3/09_1_internal_variables.html",{"title":"9.1 内部变量","type":"article","readingTime":{"minutes":22.45,"words":6734},"excerpt":"9.1 内部变量 内建变量 影响 Bash 脚本行为的变量。 $BASH Bash程序的路径。 $BASH_ENV 这个环境变量会指向一个 Bash 启动文件，该文件在脚本被调用时会被读取。 $BASH_SUBSHELL 该变量用于提示所处的 subshell 层级。这是在 Bash version 3 中被引入的新特性。 具体用法可以参考 样例21-1。 ","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/09_1_internal_variables","/code/shell/part3/09_1_internal_variables.md"]],
  ["v-1f7f0293","/code/shell/part3/09_2_1_another_use_for_declare.html",{"title":"9.2.1 declare 的另类用法","type":"article","readingTime":{"minutes":0.29,"words":87},"excerpt":"9.2.1 declare 的另类用法 declare 命令可以帮助用户识别变量、环境变量 或是其他信息，与 数组 搭配效果更佳。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/09_2_1_another_use_for_declare","/code/shell/part3/09_2_1_another_use_for_declare.md"]],
  ["v-66254658","/code/shell/part3/09_2_typing_variables_declare_or_typeset.html",{"title":"9.2 变量类型标注：declare 与 typeset","type":"article","readingTime":{"minutes":2.5,"words":750},"excerpt":"9.2 变量类型标注：declare 与 typeset 内建命令 declare 和 typeset 是完全相同的命令，其被用于修改变量的属性。相比起一部分编程语言来说，这种修改属于非常弱的类型标注方式[^1]。declare 命令只有在 Bash version 2 及更高版本才能使用，而 typeset 命令可以在 ksh 脚本中运行。 declare","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/09_2_typing_variables_declare_or_typeset","/code/shell/part3/09_2_typing_variables_declare_or_typeset.md"]],
  ["v-835049c4","/code/shell/part3/09_3_random_generate_random_integer.html",{"title":"9.3 $RANDOM：生成随机数","type":"article","readingTime":{"minutes":13.67,"words":4101},"excerpt":"9.3 $RANDOM：生成随机数 \" 任何试图通过确定性方法生成随机数的行为都是在犯罪。\" \" \" \" —— 约翰·冯·诺伊曼\" $RANDOM 是 Bash 中用来生成 0 至 32767 之间随机整数^1]的一个内置 [函数（而非常量）。其不应被用于生成密钥。 样例 9-11. 生成随机数 样例 9-12. 从牌组中随机选牌 Example 9-13.","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/09_3_random_generate_random_integer","/code/shell/part3/09_3_random_generate_random_integer.md"]],
  ["v-7583d4e9","/code/shell/part3/09_another_look_at_variables.html",{"title":"第九章 换个角度看变量","type":"article","readingTime":{"minutes":0.3,"words":89},"excerpt":"第九章 换个角度看变量 本章目录 9.1 内部变量; 9.2 变量类型标注：declare 与 typeset; 9.2.1 declare 的另类用法; 9.3 $RANDOM：生成随机数; 在脚本中恰当的使用变量可以增强脚本并提高适应性。因此就需要了解变量的微妙之处和细微差异。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/09_another_look_at_variables","/code/shell/part3/09_another_look_at_variables.md"]],
  ["v-7d04115f","/code/shell/part3/10_1_1_manipulating_strings_using_awk.html",{"title":"10.1.1 使用 awk 处理字符串","type":"article","readingTime":{"minutes":0.72,"words":215},"excerpt":"10.1.1 使用 awk 处理字符串 在 Bash 脚本中可以调用字符串处理工具 awk 来替换内置的字符串处理操作。 样例 10-6. 使用另一种方式来截取和定位子字符串","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/10_1_1_manipulating_strings_using_awk","/code/shell/part3/10_1_1_manipulating_strings_using_awk.md"]],
  ["v-ac3119e6","/code/shell/part3/10_1_2_further_reference.html",{"title":"10.1.2 参考资料","type":"article","readingTime":{"minutes":0.51,"words":152},"excerpt":"10.1.2 参考资料 更多关于脚本中处理字符串的资料，可以查看 章节 10.2 以及 expr 命令的相关章节。 脚本样例： 1. 样例 16-9 2. 样例 10-9 3. 样例 10-10 4. 样例 10-11 5. 样例 10-13 6. 样例 A-36 7. 样例 A-41","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/10_1_2_further_reference","/code/shell/part3/10_1_2_further_reference.md"]],
  ["v-aa29fc70","/code/shell/part3/10_1_manipulating_strings.html",{"title":"10.1 字符串处理","type":"article","readingTime":{"minutes":9.03,"words":2710},"excerpt":"10.1 字符串处理 Bash 支持的字符串操作数量达到了一个惊人的数目。但可惜的是，这些操作工具缺乏一个统一的核心。他们中的一些是参数代换的子集，另外一些则是 UNIX 下 expr 函数的子集。这将会导致语法前后不一致或者功能上出现重叠，更不用说那些可能导致的混乱了。 字符串长度 ${#string} expr length $string 上面两个表达","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/10_1_manipulating_strings","/code/shell/part3/10_1_manipulating_strings.md"]],
  ["v-6f0ebce0","/code/shell/part3/10_2_parameter_substitution.html",{"title":"10.2 参数替换","type":"article","readingTime":{"minutes":10.4,"words":3119},"excerpt":"10.2 参数替换 参数替换用来处理或扩展变量。 ${parameter} 等同于 $parameter，是变量 parameter 的值。在一些特定的环境下，只允许使用不易混淆的 ${parameter} 形式。 可以用于连接变量与字符串。 ${parameter-default}, ${parameter:-default} 在没有设置变量的情况下使用缺","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/10_2_parameter_substitution","/code/shell/part3/10_2_parameter_substitution.md"]],
  ["v-28da4efe","/code/shell/part3/10_manipulating_variables.html",{"title":"第十章 变量处理","type":"article","readingTime":{"minutes":0.13,"words":40},"excerpt":"第十章 变量处理 本章目录 10.1 字符串处理; 10.1.1 使用 awk 处理字符串; 10.1.2 参考资料; 10.2 参数替换;","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/10_manipulating_variables","/code/shell/part3/10_manipulating_variables.md"]],
  ["v-755f1380","/code/shell/part3/11_1_loops.html",{"title":"11.1 循环","type":"article","readingTime":{"minutes":15.51,"words":4653},"excerpt":"11.1 循环 循环是当循环控制条件为真时，一系列命令迭代[^1]执行的代码块。 for 循环 for arg in [list] 这是 shell 中最基本的循环结构，它与C语言形式的循环有着明显的不同。 \" 在循环的过程中，arg 会从 list 中连续获得每一个变量的值。\" 参数 list 中允许含有 通配符。 如果 do 和 for 写在同一行时，需","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/11_1_loops","/code/shell/part3/11_1_loops.md"]],
  ["v-18a04a46","/code/shell/part3/11_2_nested_loops.html",{"title":"11.2 嵌套循环","type":"article","readingTime":{"minutes":0.87,"words":260},"excerpt":"11.2 嵌套循环 嵌套循环，顾名思义就是在循环里面还有循环。外层循环会不断的触发内层循环直到外层循环结束。当然，你仍然可以使用 break 可以终止外层或内层的循环。 样例 11-20. 嵌套循环 查看 样例 27-11 详细了解嵌套 while 循环。查看 样例 27-13 详细了解嵌套 until 循环。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/11_2_nested_loops","/code/shell/part3/11_2_nested_loops.md"]],
  ["v-751027c3","/code/shell/part3/11_3_loop_control.html",{"title":"11.3 循环控制","type":"article","readingTime":{"minutes":3.68,"words":1103},"excerpt":"11.3 循环控制 \" Tournez cent tours, tournez mille tours,\" \"\" \" Tournez souvent et tournez toujours . . .\" \"\" \" ——保尔·魏尔伦，《木马》\" 本节介绍两个会影响循环行为的命令。 break, continue break 和 continue 命令[^1]的","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/11_3_loop_control","/code/shell/part3/11_3_loop_control.md"]],
  ["v-8d45377a","/code/shell/part3/11_4_testing_and_branching.html",{"title":"11.4 测试与分支","type":"article","readingTime":{"minutes":6.46,"words":1939},"excerpt":"11.4 测试与分支 case 和 select 结构并不属于循环结构，因为它们并没有反复执行代码块。但是和循环结构相似的是，它们会根据代码块顶部或尾部的条件控制程序流。 下面介绍两种在代码块中控制程序流的方法： case (in) / esac 在 shell 脚本中，case 模拟了 C/C++ 语言中的 switch，可以根据条件跳转到其中一个分支。其","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/11_4_testing_and_branching","/code/shell/part3/11_4_testing_and_branching.md"]],
  ["v-cc33efae","/code/shell/part3/11_loops_and_branches.html",{"title":"第十一章 循环与分支","type":"article","readingTime":{"minutes":0.35,"words":106},"excerpt":"第十一章 循环与分支 \" 奥赛罗夫人，您为什么把这句话说了又说呢？\" \" \" \" —— 《奥赛罗》，莎士比亚\" 本章目录 11.1 循环; 11.2 嵌套循环; 11.3 循环控制; 11.4 测试与分支; 对代码块的处理是结构化和构建 shell 脚本的关键。循环与分支结构恰好提供了这样一种对代码块处理的工具。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/11_loops_and_branches","/code/shell/part3/11_loops_and_branches.md"]],
  ["v-b6223f7e","/code/shell/part3/12_command_substitution.html",{"title":"第十二章 命令替换","type":"article","readingTime":{"minutes":7.33,"words":2198},"excerpt":"第十二章 命令替换 命令替换重新指定一个[^1]或多个命令的输出。其实就是将命令的输出导到另外一个地方[^2]。 命令替换的通常形式是（ ... ），即用反引号引用命令。 命令的输出可以作为另一个命令的参数，也可以赋值给一个变量。甚至在 for 循环中可以用输出产生参数表。 \" 命令替换本质上是调用了一个 子进程 来执行。\" \" 命令替换有可能会出现 字符分","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/12_command_substitution","/code/shell/part3/12_command_substitution.md"]],
  ["v-39f65eae","/code/shell/part3/13_arithmetic_expansion.html",{"title":"第十三章 算术扩展","type":"article","readingTime":{"minutes":1.22,"words":365},"excerpt":"第十三章 算术扩展 算术扩展为脚本中的（整数）算术操作提供了强有力的工具。你可以使用反引号、双圆括号或者 let 将字符串转换为数学表达式。 差异比较 使用 反引号 的算术扩展（通常与 expr 一起使用） 使用 双圆括号 或 let 的算术扩展。 事实上，在算术扩展中，反引号已经被双圆括号 ((...)) 和 $((...)) 以及 let 所取代。 以下","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/13_arithmetic_expansion","/code/shell/part3/13_arithmetic_expansion.md"]],
  ["v-71241d52","/code/shell/part3/",{"title":"第三部分 shell进阶","type":"article","readingTime":{"minutes":0.45,"words":134},"excerpt":"第三部分 shell进阶 目录 9. 换个角度看变量; 9.1 内部变量; 9.2 变量类型标注：declare 与 typeset; 9.2.1 declare 的另类用法; 9.3 $RANDOM：生成随机数; 10. 变量处理; 10.1 字符串处理; 10.1.1 使用 awk 处理字符串; 10.1.2 参考资料; 10.2 参数替换; 11. 循","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part3/index.html","/code/shell/part3/readme.md"]],
  ["v-3666da25","/code/shell/part2/03_special_characters.html",{"title":"第三章 特殊字符","type":"article","readingTime":{"minutes":29.58,"words":8873},"excerpt":"第三章 特殊字符 是什么让一个字符变得特殊呢？如果一个字符不仅具有字面意义，而且具有元意（meta-meaning），我们就称它为特殊字符。特殊字符同命令和关键词（keywords）一样，是bash脚本的组成部分。 你在脚本或其他地方都能够找到特殊字符。 \\# ### 注释符。如果一行脚本的开头是#（除了#!），那么代表这一行是注释，不会被执行。 注释也可能","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/03_special_characters","/code/shell/part2/03_special_characters.md"]],
  ["v-95c6342c","/code/shell/part2/04_1_variable_substitution.html",{"title":"4.1 变量替换","type":"article","readingTime":{"minutes":3.54,"words":1061},"excerpt":"4.1 变量替换 变量名是其所指向值的一个占位符（placeholder）。引用变量值的过程我们称之为变量替换（variable substitution）。 $ 接下来我们仔细区分一下变量名与变量值。如果变量名是 variable1， 那么 $variable1 就是对变量值的引用。[^1] 变量仅仅在声明时、赋值时、被删除时（unset）、被导出时（ex","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/04_1_variable_substitution","/code/shell/part2/04_1_variable_substitution.md"]],
  ["v-549a3ab9","/code/shell/part2/04_2_variable_assignment.html",{"title":"4.2 变量赋值","type":"article","readingTime":{"minutes":1.45,"words":434},"excerpt":"4.2 变量赋值 = 赋值操作符（在其前后没有空白符）。 \" 不要混淆 = 与 -eq，后者用来进行比较而非赋值。\" \" \" \" 同时也要注意 = 根据使用场景既可作赋值操作符，也可作比较操作符。\" 样例 4-2. 变量赋值 样例 4-3. 奇妙的变量赋值 使用 $(...) 形式进行赋值（与反引号不同的新形式），与命令替换形式相似。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/04_2_variable_assignment","/code/shell/part2/04_2_variable_assignment.md"]],
  ["v-5f6eadd7","/code/shell/part2/04_3_bash_variables_are_untyped.html",{"title":"4.3 Bash变量是弱类型的","type":"article","readingTime":{"minutes":1.76,"words":529},"excerpt":"4.3 Bash变量是弱类型的 不同于许多其他编程语言，Bash 并不区分变量的类型。本质上说，Bash 变量是字符串，但在某些情况下，Bash 允许对变量进行算术运算和比较。决定因素则是变量值是否只含有数字。 样例 4-4. 整数还是字符串？ 弱类型变量有利有弊。它可以使编程更加灵活、更加容易（给与你足够的想象空间）。但它也同样的容易造成一些小错误，容易养","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/04_3_bash_variables_are_untyped","/code/shell/part2/04_3_bash_variables_are_untyped.md"]],
  ["v-160e6fcf","/code/shell/part2/04_4_special_variable_types.html",{"title":"4.4 特殊的变量类型","type":"article","readingTime":{"minutes":6.58,"words":1975},"excerpt":"4.4 特殊的变量类型 局部变量 仅在代码块或函数中才可见的变量（参考函数章节的局部变量部分）。 环境变量 会影响用户及shell行为的变量。 \" 一般情况下，每一个进程都有自己的“环境”（environment），也就是一组该进程可以访问到的变量。从这个意义上来说，shell表现出与其他进程一样的行为。\" \" \" \" 每当shell启动时，都会创建出与其环","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/04_4_special_variable_types","/code/shell/part2/04_4_special_variable_types.md"]],
  ["v-5db426fd","/code/shell/part2/04_introduction_to_variables_and_parameters.html",{"title":"第四章 变量与参数","type":"article","readingTime":{"minutes":0.35,"words":105},"excerpt":"第四章 变量与参数 本章目录 4.1 变量替换; 4.2 变量赋值; 4.3 Bash变量弱类型; 4.4 特殊变量类型; 变量（variable）在编程语言中用来表示数据。它本身只是一个标记，指向数据在计算机内存中的一个或一组地址。 变量通常出现在算术运算，数量操作及字符串解析中。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/04_introduction_to_variables_and_parameters","/code/shell/part2/04_introduction_to_variables_and_parameters.md"]],
  ["v-51c96f18","/code/shell/part2/05_1_quoting_variables.html",{"title":"5.1 引用变量","type":"article","readingTime":{"minutes":3.22,"words":966},"excerpt":"5.1 引用变量 引用变量时，通常建议将变量包含在双引号中。因为这样可以防止除 $， （反引号）和\\（转义符）之外的其他特殊字符被重新解释。[^1]在双引号中仍然可以使用$引用变量（\"$variable\"`），也就是将变量名替换为变量值（详情查看样例 4-1）。 使用双引号可以防止字符串被分割。[^2]即使参数中拥有很多空白分隔符，被包在双引号中后依旧是算作","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/05_1_quoting_variables","/code/shell/part2/05_1_quoting_variables.md"]],
  ["v-44c2064c","/code/shell/part2/05_2_escaping.html",{"title":"5.2 转义","type":"article","readingTime":{"minutes":6.29,"words":1887},"excerpt":"5.2 转义 转义是一种引用单字符的方法。通过在特殊字符前加上转义符 \\ 来告诉shell按照字面意思去解释这个字符。 \" 需要注意的是，在一些特定的命令和工具，比如 echo 和 sed 中，转义字符通常会起到相反的效果，即可能会使得那些字符产生特殊含义。\" 在 echo 与 sed 命令中，转义字符的特殊含义 \\n 换行（line feed）。 \\r 回","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/05_2_escaping","/code/shell/part2/05_2_escaping.md"]],
  ["v-2ef7dc02","/code/shell/part2/05_quoting.html",{"title":"第五章 引用","type":"article","readingTime":{"minutes":1.74,"words":521},"excerpt":"第五章 引用 本章目录 5.1 引用变量; 5.2 转义; --- 引用就是将一个字符串用引号括起来。这样做是为了保护Shell/Shell脚本中被重新解释过或带扩展功能的特殊字符（如果一个字符带有其特殊意义而不仅仅是字面量的话，这个字符就能称为“特殊字符”。比如星号“*”就能表示正则表达式中的一个通配符）。 \" 可以看到，提示不存在该文件。这里的'[Vv]","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/05_quoting","/code/shell/part2/05_quoting.md"]],
  ["v-6a52f4ae","/code/shell/part2/06_exit_and_exit_status.html",{"title":"第六章 退出与退出状态","type":"article","readingTime":{"minutes":3.2,"words":960},"excerpt":"第六章 退出与退出状态 \" Bourne shell里存在不明确之处，但人们也会使用它们。\" \"\" \" —— Chat Ramey\" 跟C程序类似，exit 命令被用来结束脚本。同时，它也会返回一个值，返回值可以被交给父进程。 每个命令都会返回一个退出状态（exit status），有时也叫做返回状态（return status）或退出码（exit code","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/06_exit_and_exit_status","/code/shell/part2/06_exit_and_exit_status.md"]],
  ["v-d3244104","/code/shell/part2/07_1_test_constructs.html",{"title":"7.1 测试结构","type":"article","readingTime":{"minutes":8.08,"words":2423},"excerpt":"7.1 测试结构 if/then 结构是用来检测一系列命令的 退出状态 是否为0（按 UNIX 惯例,退出码 0 表示命令执行成功），如果为0，则执行接下来的一个或多个命令。; 测试结构会使用一个特殊的命令 （参看特殊字符章节 [左方括号）。等同于 test` 命令，它是一个内建命令，写法更加简洁高效。该命令将其参数视为比较表达式或文件测试，以比较结果作为其","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_1_test_constructs","/code/shell/part2/07_1_test_constructs.md"]],
  ["v-57207c61","/code/shell/part2/07_2_file_test_operators.html",{"title":"7.2 文件测试操作","type":"article","readingTime":{"minutes":4.75,"words":1425},"excerpt":"7.2 文件测试操作 下列每一个运算符在满足其下条件时，返回的结果为真。 -e 检测文件是否存在 -a 检测文件是否存在 等价于 -e。不推荐使用，已被弃用[^1]。 -f 文件是常规文件(regular file)，而非目录或 设备文件 -s 文件大小不为0 -d 文件是一个目录 -b 文件是一个 块设备 -c 文件是一个 字符设备 -p 文件是一个 管道","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_2_file_test_operators","/code/shell/part2/07_2_file_test_operators.md"]],
  ["v-d584ed36","/code/shell/part2/07_3_other_comparison_operators.html",{"title":"7.3 其他比较操作","type":"article","readingTime":{"minutes":5.53,"words":1658},"excerpt":"7.3 其他比较操作 二元比较操作比较变量或者数量。注意整数和字符串比较使用的是两套运算符。 整数比较 -eq 等于 if [ \"$a\" -eq \"$b\" ] -ne 不等于 if [ \"$a\" -ne \"$b\" ] -gt 大于 if [ \"$a\" -gt \"$b\" ] -ge 大于等于 if [ \"$a\" -ge \"$b\" ] -lt 小于 if [ \"","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_3_other_comparison_operators","/code/shell/part2/07_3_other_comparison_operators.md"]],
  ["v-49cbb9f9","/code/shell/part2/07_4_nested_if_then_condition_tests.html",{"title":"7.4 嵌套 if/then 条件测试","type":"article","readingTime":{"minutes":0.46,"words":137},"excerpt":"7.4 嵌套 if/then 条件测试 可以嵌套 if/then 条件测试结构。嵌套的结果等价于使用 && 复合比较运算符。 在 样例 37-4 和 样例 17-11 中展示了嵌套 if/then 条件测试结构。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_4_nested_if_then_condition_tests","/code/shell/part2/07_4_nested_if_then_condition_tests.md"]],
  ["v-1b65cd68","/code/shell/part2/07_5_testing_your_knowledge_of_tests.html",{"title":"7.5 牛刀小试","type":"article","readingTime":{"minutes":0.83,"words":249},"excerpt":"7.5 牛刀小试 系统文件 xinitrc 可以用来启动软件 X Server。该文件包含了许多 if/then 测试结构。下面的代码摘录自较早版本的 xinitrc（大约在 Red Hat 7.1 版本）。 试着解释代码片段中的条件测试结构, 然后试着在 /etc/X11/xinit/xinitrc 查看最新版本，并且分析其中的 if/then 条件测试结","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_5_testing_your_knowledge_of_tests","/code/shell/part2/07_5_testing_your_knowledge_of_tests.md"]],
  ["v-41510350","/code/shell/part2/07_tests.html",{"title":"第七章 测试","type":"article","readingTime":{"minutes":0.45,"words":134},"excerpt":"第七章 测试 本章目录 7.1 测试结构; 7.2 文件测试操作; 7.3 其他比较操作; 7.4 嵌套 if/then 条件测试; 7.5 牛刀小试; 每一个完备的程序设计语言都可以对一个条件进行判断，然后根据判断结果执行相应的指令。Bash 拥有 test 命令，双方括号、双圆括号 测试操作符以及 if/then 测试结构。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/07_tests","/code/shell/part2/07_tests.md"]],
  ["v-2f71d652","/code/shell/part2/08_1_operators.html",{"title":"8.1 运算符","type":"article","readingTime":{"minutes":6.28,"words":1884},"excerpt":"8.1 运算符 赋值运算符 变量赋值，初始化或改变一个变量的值。 = 等号=赋值运算符，既可用于算术赋值，也可用于字符串赋值。 \" 注意，不要混淆=赋值运算符与=测试操作符。\" 算术运算符 + 加 - 减 * 乘 / 除 \\*\\* 幂运算 % 取余(返回整数除法的余数) 5/3=1，余2 取余运算符经常被用于生成一定范围内的数( 案例9-11, 案例9-15","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/08_1_operators","/code/shell/part2/08_1_operators.md"]],
  ["v-8d2e7446","/code/shell/part2/08_2_numerical_constants.html",{"title":"8.2 数字常量","type":"article","readingTime":{"minutes":1.29,"words":387},"excerpt":"8.2 数字常量 通常情况下，shell脚本会把数字以十进制整数看待(base 10)，除非数字加了特殊的前缀或标记。 带前缀0的数字是八进制数(base 8)；带前缀0x的数字是十六进制数(base 16)。 内嵌 # 的数字会以 BASE#NUMBER 的方式进行求值（不能超出当前shell支持整数的范围）。 样例 8-4. 数字常量的表示","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/08_2_numerical_constants","/code/shell/part2/08_2_numerical_constants.md"]],
  ["v-0698c03c","/code/shell/part2/08_3_the_double_parentheses_construct.html",{"title":"8.3 双圆括号结构","type":"article","readingTime":{"minutes":1.4,"words":419},"excerpt":"8.3 双圆括号结构 与let命令类似，(( ... )) 结构允许对算术表达式的扩展和求值。它是let命令的简化形式。例如，a=$(( 5 + 3 )) 会将变量a赋值成 5 + 3，也就是8。在Bash中，双圆括号结构也允许以C风格的方式操作变量。例如，(( var++ ))。 样例 8-5. 以C风格的方式操作变量 还可以参看 样例 11-13 与 样","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/08_3_the_double_parentheses_construct","/code/shell/part2/08_3_the_double_parentheses_construct.md"]],
  ["v-22a0477e","/code/shell/part2/08_4_operator_precedence.html",{"title":"8.4 运算符优先级","type":"article","readingTime":{"minutes":2.56,"words":769},"excerpt":"8.4 运算符优先级 在脚本中，运算执行的顺序被称为优先级: 高优先级的操作会比低优先级的操作先执行。[^1] 表 8-1. 运算符优先级(从高到低) 运算符 含义 注解 :------------:--------------:------------ var++ var-- 后缀自增/自减 C风格运算符 ++var --var 前缀自增/自减 ! ~ 按","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/08_4_operator_precedence","/code/shell/part2/08_4_operator_precedence.md"]],
  ["v-339f9476","/code/shell/part2/08_operations_and_related_topics.html",{"title":"第八章 运算符相关话题","type":"article","readingTime":{"minutes":0.14,"words":41},"excerpt":"第八章 运算符相关话题 本章目录 8.1 运算符; 8.2 数字常量; 8.3 双圆括号结构; 8.4 运算符优先级;","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/08_operations_and_related_topics","/code/shell/part2/08_operations_and_related_topics.md"]],
  ["v-71241d90","/code/shell/part2/",{"title":"第二部分 shell基础","type":"article","readingTime":{"minutes":0.5,"words":149},"excerpt":"第二部分 shell基础 目录 3. 特殊字符; 4. 变量与参数; 4.1 变量替换; 4.2 变量赋值; 4.3 Bash弱类型变量; 4.4 特殊变量类型; 5. 引用; 5.1 引用变量; 5.2 转义; 6. 退出与退出状态; 7. 测试; 7.1 测试结构; 7.2 文件测试操作; 7.3 其他比较操作; 7.4 嵌套 if/then 条件测试;","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part2/index.html","/code/shell/part2/readme.md"]],
  ["v-79bd1f4a","/code/shell/part7/shili.html",{"title":"","type":"article","readingTime":{"minutes":0.71,"words":214},"excerpt":"开机集成zabbix和jumpserver脚本","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part7/shili","/code/shell/part7/shili.md"]],
  ["v-6d2d0ad6","/monitor/elk/bak/9.1%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.html",{"title":"","type":"article","readingTime":{"minutes":4.15,"words":1246},"excerpt":"Elasticsearch基础概念 Elasticsearch关键概念\rDocument（文档）：用户存储在es中的数据文档，它是以JSON格式定义的特定方式的字段集合。每个文档都属于一个类型，并驻留在一个索引中。每个文档都有一个唯一的标识符，称为UID。; \rIndex（索引）：包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，"},["/monitor/elk/bak/9.1 基础概念.html","/monitor/elk/bak/9.1%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5","/monitor/elk/bak/9.1 基础概念.md","/monitor/elk/bak/9.1%20%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5.md"]],
  ["v-8c07aeaa","/monitor/elk/bak/9.2%20%E5%88%86%E8%AF%8D.html",{"title":"","type":"article","readingTime":{"minutes":3.85,"words":1154},"excerpt":"Elasticsearch分词 分词相关概念\r分词：是指将文本转换成一系列单词（term or token）,也可以叫做文本分析，在es里面称为Analysis。; \r分词器：是es中专门处理分词的组件，英文为Analyzer，它的组成如下：; \rCharacter Filters：针对原始文本进行处理，比如去除html特殊标记符; \rTokenizer：将"},["/monitor/elk/bak/9.2 分词.html","/monitor/elk/bak/9.2%20%E5%88%86%E8%AF%8D","/monitor/elk/bak/9.2 分词.md","/monitor/elk/bak/9.2%20%E5%88%86%E8%AF%8D.md"]],
  ["v-de62e616","/monitor/elk/bak/9.3%20centos7.6%E4%B8%8Belasticsearch7.2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html",{"title":"","type":"article","readingTime":{"minutes":27.51,"words":8252},"excerpt":"Centos7.6下Elasticseatch7.2集群搭建步骤 环境准备\r云主机：3台; \rlinux系统版本：centos7.6.1810; \r配置：4核 8G; 主机名解析 将三台主机的主机名加入到/etc/hosts文件中 安装依赖环境 安装JDK11和shasum 安装docker Uninstall old versions Install us"},["/monitor/elk/bak/9.3 centos7.6下elasticsearch7.2集群搭建步骤.html","/monitor/elk/bak/9.3%20centos7.6%E4%B8%8Belasticsearch7.2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4","/monitor/elk/bak/9.3 centos7.6下elasticsearch7.2集群搭建步骤.md","/monitor/elk/bak/9.3%20centos7.6%E4%B8%8Belasticsearch7.2%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.md"]],
  ["v-65dead7f","/monitor/elk/bak/filebeat%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F.html",{"title":"","type":"article","readingTime":{"minutes":0.52,"words":156},"excerpt":"filebeat的安装注意\r\" 1.注意yaml文件的格式需要对齐\"\r\"\"\r\" 2.注意注释掉默认的#output.elasticsearch:\" filebeat.yml配置文件 改动地方 enabled 改为true setup.kibana注释掉 output.elasticsearch:下面所有东西注释掉"},["/monitor/elk/bak/filebeat的安装注意.html","/monitor/elk/bak/filebeat%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F","/monitor/elk/bak/filebeat的安装注意.md","/monitor/elk/bak/filebeat%E7%9A%84%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F.md"]],
  ["v-c9d0b03c","/monitor/elk/bak/kafka2.12%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.html",{"title":"","type":"article","readingTime":{"minutes":1.05,"words":315},"excerpt":"kafka2.12集群搭建步骤 下载解压 从官网下载最新的tgz包 下载地址为： http://mirror.bit.edu.cn/apache/kafka/2.3.0/kafka_2.12-2.3.0.tgz 下载完成后上传到服务器 修改配置文件\r\" 服务器标识不能相同 broker.id\"\r\"\"\r\" 不同服务器的ip不同 listeners=PLAINT"},["/monitor/elk/bak/kafka2.12集群搭建步骤.html","/monitor/elk/bak/kafka2.12%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4","/monitor/elk/bak/kafka2.12集群搭建步骤.md","/monitor/elk/bak/kafka2.12%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E6%AD%A5%E9%AA%A4.md"]],
  ["v-f6990a62","/monitor/elk/bak/logstash%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F.html",{"title":"","type":"article","readingTime":{"minutes":0.37,"words":112},"excerpt":"logstash安装注意 在 /etc/sysconfig/logstash中添加对JAVA_HOME的配置 文件权限所属组是不是logstash"},["/monitor/elk/bak/logstash安装注意.html","/monitor/elk/bak/logstash%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F","/monitor/elk/bak/logstash安装注意.md","/monitor/elk/bak/logstash%E5%AE%89%E8%A3%85%E6%B3%A8%E6%84%8F.md"]],
  ["v-ed9713e8","/monitor/elk/bak/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html",{"title":"","type":"article","readingTime":{"minutes":0.34,"words":101},"excerpt":"数据类型 核心数据类型\r字符串： text、keyword; \r数值：long、integer、short、byte、double、float、halffloat、scaledfloat; \r日期：date; \r布尔：boolean; \r二进制：binary; \r范围：integerrange、floatrange、longrange、doublerange"},["/monitor/elk/bak/数据类型.html","/monitor/elk/bak/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B","/monitor/elk/bak/数据类型.md","/monitor/elk/bak/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.md"]],
  ["v-04de7f18","/code/shell/part5/18_1_a_brief_introduction_to_regular_expressions.html",{"title":"18.1 正则表达式简介","type":"article","readingTime":{"minutes":4.02,"words":1207},"excerpt":"18.1 正则表达式简介 正则表达式是一系列的字符串。这些包含超过其字面含义的字符串被称之为元字符。例如，一个符号前面的引用符代表一个人的言语能力，或者按照上面的说法，代表着meta-meaning[1]。正则表达式是一组字符串和（或者）一组匹配（特定的）模式的元字符。 一个正则表达式包含下面的一个或多个选项： 一组字符串。这是仅仅表示字面意思的字符串。最简","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/18_1_a_brief_introduction_to_regular_expressions","/code/shell/part5/18_1_a_brief_introduction_to_regular_expressions.md"]],
  ["v-2ca54d11","/code/shell/part5/18_2_globbing.html",{"title":"18.2文件名替换","type":"article","readingTime":{"minutes":0.02,"words":6},"excerpt":"18.2文件名替换","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/18_2_globbing","/code/shell/part5/18_2_globbing.md"]],
  ["v-731951cc","/code/shell/part5/18_3_regular_expression_comparison_table.html",{"title":"18.3 正则表达式对照表","type":"article","readingTime":{"minutes":15.11,"words":4533},"excerpt":"18.3 正则表达式对照表 正则表达式分为三类（man grep可以看到，分别是basic RegExs，extended RegExs，perl RegExs） 正则表达式分类： 基本的正则表达式（Basic Regular Expression 又叫 Basic RegEx 简称 BREs）; 扩展的正则表达式（Extended Regular Expr","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/18_3_regular_expression_comparison_table","/code/shell/part5/18_3_regular_expression_comparison_table.md"]],
  ["v-04066f84","/code/shell/part5/18_regular_expressions.html",{"title":"18 正则表达式","type":"article","readingTime":{"minutes":0.43,"words":128},"excerpt":"18 正则表达式 \" ...the intellectual activity associated with software development is largely one of gaining insight.\" \" --Stowe Boyd\" 目录 18.1 正则表达式简介 ; 18.2 文件名替换 ; 为了充分利用shell脚本，您需要熟练掌","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/18_regular_expressions","/code/shell/part5/18_regular_expressions.md"]],
  ["v-17e5f48e","/code/shell/part5/19_here_documents.html",{"title":"19 嵌入文档","type":"article","readingTime":{"minutes":10.67,"words":3202},"excerpt":"19 嵌入文档 Here and now, boys. &emsp;&emsp;&emsp;&emsp;--Aldous Huxley, Island 嵌入文档是一段有特殊作用的代码块，它用 I/O 重定向 在交互程序和交互命令中传递和反馈一个命令列表，例如 ftp，cat 或者是 ex 文本编辑器 嵌入文档用限定符作为命令列表的边界，在限定符前需要一个指定","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/19_here_documents","/code/shell/part5/19_here_documents.md"]],
  ["v-d54a4614","/code/shell/part5/20_1_use_exec.html",{"title":"20.1 使用 exec","type":"article","readingTime":{"minutes":3.17,"words":952},"excerpt":"20.1 使用 exec 一个 exec < filename 命令重定向了 标准输入 到一个文件。自此所有 标准输入 都来自该文件而不是默认来源(通常是键盘输入)。在使用 sed 和 awk 时候这种方式可以逐行读文件并逐行解析。 样例 20-1. 使用 exec 重定向 标准输入 同理, exec >filename 重定向 标准输出 到指定文件. 他将","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/20_1_use_exec","/code/shell/part5/20_1_use_exec.md"]],
  ["v-c42e271a","/code/shell/part5/20_2_redirecting_code_blocks.html",{"title":"20.2 重定向代码块","type":"article","readingTime":{"minutes":4.77,"words":1431},"excerpt":"20.2 重定向代码块 有如 while, until, 和 for 循环, 甚至 if/then 也可以重定向 标准输入 测试代码块. 甚至连一个函数都可以用这个方法进行重定向 (见 样例 24-11). 代码块的末尾部分的 \"<\" 就是用来完成这个的. 样例 20-5. while 循环的重定向 样例 20-6. 另一种形式的 while 循环重定向 样","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/20_2_redirecting_code_blocks","/code/shell/part5/20_2_redirecting_code_blocks.md"]],
  ["v-4a7628de","/code/shell/part5/20_3_applications.html",{"title":"20.3 应用程序","type":"article","readingTime":{"minutes":1.22,"words":365},"excerpt":"20.3 应用程序 使用 I/O 重定向可以同时解析和固定命令输出的片段(see 样例 15-7). 这也使得可以生成报告和日志文件. 样例 20-12. 日志记录事件","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/20_3_applications","/code/shell/part5/20_3_applications.md"]],
  ["v-53c8880c","/code/shell/part5/20_io_redirection.html",{"title":"20 I/O 重定向","type":"article","readingTime":{"minutes":6.3,"words":1890},"excerpt":"20 I/O 重定向 目录 20.1 使用 exec; 20.2 重定向代码块; 20.3 应用程序; 有三个默认打开的文件[1], stdin(标准输入，键盘),stdout(标准输出， 屏幕)和 stderr(标准错误，屏幕上输出的错误信息)。这些和任何其他打开的文件都可以被重定向。重定向仅仅意味着捕获输出文件，命令，脚本，甚至是一个脚本的代码块(样例 ","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/20_io_redirection","/code/shell/part5/20_io_redirection.md"]],
  ["v-5aad7141","/code/shell/part5/21_subshells.html",{"title":"第二十一章 子shell","type":"article","readingTime":{"minutes":5.55,"words":1664},"excerpt":"第二十一章 子shell 运行一个shell脚本会启动一个新的进程，即子shell。 定义： 一个子shell是由一个shell（或shell脚本）触发的子进程。 一个子shell是命令处理器（-- 在终端或者xtrem窗口给出提示符的shell）的一个独立的例子。正如你的命令在命令行提示符处被理解执行一样，一个脚本批处理一组命令。每一个shell脚本运行实","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/21_subshells","/code/shell/part5/21_subshells.md"]],
  ["v-ab5e1508","/code/shell/part5/22_Restricted_Shells.html",{"title":"第二十二章. 限制模式的Shell","type":"article","readingTime":{"minutes":1.27,"words":381},"excerpt":"第二十二章. 限制模式的Shell 限制模式下被禁用的命令 在限制模式下运行一个脚本或部分脚本将禁用一些命令，尽管这些命令在正常模式下是可用的。这是个安全措施，可以限制脚本用户的权限，减少运行脚本可能带来的损害。; 被禁用的命令和功能： 使用 cd 来改变工作目录。; 修改 $PATH, $SHELL, $BASH_ENV 或 $ENV 等环境变量; 读取或","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/22_Restricted_Shells","/code/shell/part5/22_Restricted_Shells.md"]],
  ["v-0f5fa4fa","/code/shell/part5/23_Process_Substitution.html",{"title":"第二十三章. 进程替换","type":"article","readingTime":{"minutes":5.33,"words":1598},"excerpt":"第二十三章. 进程替换 用管道 将一个命令的 输送到另一个命令的 是个强大的技术。但是如果你需要用管道输送多个命令的 怎么办？这时候 进程替换 就派上用场了。 进程替换 把一个（或多个）进程 的输出送到另一个进程的 。 样板 命令列表要用括号括起来 进程替换使用 文件发送括号内进程的结果到另一个进程。[1] \"\"与括号之间没有空格，加上空格或报错。 Bash","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/23_Process_Substitution","/code/shell/part5/23_Process_Substitution.md"]],
  ["v-81126a72","/code/shell/part5/24_1_complex_functions_and_function_complexities.html",{"title":"24.1 复杂函数和函数复杂性","type":"article","readingTime":{"minutes":11.48,"words":3445},"excerpt":"24.1 复杂函数和函数复杂性 函数可以处理传递给它的参数，并且能返回它的退出状态码给脚本，以便后续处理。 函数通过位置来引用传递过来的参数（就好像它们是位置参数），例如，$1, $2，等等。 例子 24-2. 带参数的函数 也可以使用shift命令来处理传递给函数的参数（请参考例子 33-18. 但是，传递给脚本的命令行参数怎么办？在函数内部，可以看见这些","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/24_1_complex_functions_and_function_complexities","/code/shell/part5/24_1_complex_functions_and_function_complexities.md"]],
  ["v-66790dab","/code/shell/part5/24_2_local_variables.html",{"title":"24.2 局部变量","type":"article","readingTime":{"minutes":5.45,"words":1634},"excerpt":"24.2 局部变量 怎样使一个变量变成“局部”变量？ 局部变量 如果变量用local来声明，那么它就只能够在该变量被声明的代码块中可见。 这个代码块就是局部范围。 在一个函数中，一个局部变量只有在函数代码中才有意义.[1] 例子 24-12. 局部变量的可见范围 在函数被调用之前，所有在函数中声明的变量，在函数外部都是不可见的，当然也包括那些被明确声明为lo","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/24_2_local_variables","/code/shell/part5/24_2_local_variables.md"]],
  ["v-092fc61e","/code/shell/part5/24_3_recursion_without_local_variables.html",{"title":"24.3 不使用局部变量的递归","type":"article","readingTime":{"minutes":2.93,"words":880},"excerpt":"24.3 不使用局部变量的递归 即使不适用局部变量，函数也可以递归的调用自身。 斐波那契序列 例子 24-17. 汉诺塔","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/24_3_recursion_without_local_variables","/code/shell/part5/24_3_recursion_without_local_variables.md"]],
  ["v-09c92e74","/code/shell/part5/24_functions.html",{"title":"24 函数","type":"article","readingTime":{"minutes":4.58,"words":1373},"excerpt":"24 函数 本章目录 24.1 复杂函数和函数复杂性; 24.2 局部变量; 24.3 不使用局部变量的递归; 和其它“真正”的编程语言一样，Bash也有函数，尽管它在实现方面有一些限制。一个函数就是一个子程序，实现一系列操作的代码块，执行一个特定任务的“黑盒子”。有重复代码的地方，当一个过程只需要轻微修改任务就会重复执行的时候，那么你就需要考虑使用函数了。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/24_functions","/code/shell/part5/24_functions.md"]],
  ["v-ac2eca3c","/code/shell/part5/25_aliases.html",{"title":"25. 别名","type":"article","readingTime":{"minutes":2.75,"words":825},"excerpt":"25. 别名 Bash 别名 本质上不外乎是键盘上的快捷键，缩写呢是避免输入很长的命令串的一种手段.举个例子, 在 ~/.bashrc 文件中包含别名 lm=\"ls -l more, 而后每个命令行输入的 lm [1] 将会自动被替换成 ls -l more. 这可以节省大量的命令行输入和避免记住复杂的命令和选项. 设定别名 rm=\"rm -i\" (交互的删","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/25_aliases","/code/shell/part5/25_aliases.md"]],
  ["v-418229bc","/code/shell/part5/26_List_Constructs.html",{"title":"26. 列表结构","type":"article","readingTime":{"minutes":4.33,"words":1299},"excerpt":"26. 列表结构 and 列表 和 or 列表 结构提供了连续执行若干命令的方法，可以有效地替换复杂的嵌套 if/then ，甚至 case 语句。 链接多个命令 and 列表 只要前一个命令返回 true（即 0），每一个命令就依次执行。当第一个 false（即 非0）返回时，命令链条即终止（第一个返回 false 的命令是最后一个执行的）。 在YongY","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/26_List_Constructs","/code/shell/part5/26_List_Constructs.md"]],
  ["v-34bd49ba","/code/shell/part5/27_arrays.html",{"title":"27 数组","type":"article","readingTime":{"minutes":31.53,"words":9459},"excerpt":"27 数组 新版本的Bash支持一维数组。 数组元素可以使用符号variable[xx] 来初始化。另外，脚本可以使用declare -a variable语句来制定一个数组。 如果想引用一个数组元素（也就是取值），可以使用大括号，访问形式为 ${element[xx]} 。 例子 27-1. 简单的数组使用 我们可以看出，初始化整数的一个简单的方法是 ar","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/27_arrays","/code/shell/part5/27_arrays.md"]],
  ["v-4d92bb04","/code/shell/part5/30_network_programming.html",{"title":"30 网络编程","type":"article","readingTime":{"minutes":3.05,"words":916},"excerpt":"30 网络编程 The Net's a cross between an elephant and a white elephant sale: it never forgets, and it's always crap. &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/30_network_programming","/code/shell/part5/30_network_programming.md"]],
  ["v-ae8f4894","/code/shell/part5/32_Debugging.html",{"title":"32 调试","type":"article","readingTime":{"minutes":9.06,"words":2718},"excerpt":"32 调试 调试代码要比写代码困难两倍。因此，你写代码时越多的使用奇技淫巧（自做聪明），顾名思义，你越难以调试它。 --Brian Kernighan Bash shell中不包含内置的debug工具，甚至没有调试专用的命令和结构。当调试非功能脚本，产生语法错误或者有错别字时，往往是无用的错误提示消息。 例子 32-1. 一个错误脚本 脚本的输出: 上边的脚","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/32_Debugging","/code/shell/part5/32_Debugging.md"]],
  ["v-5d30fe45","/code/shell/part5/33_options.html",{"title":"33 选项","type":"article","readingTime":{"minutes":3.57,"words":1072},"excerpt":"33 选项 选项用来更改shell和脚本的行为. set命令用来打开脚本中的选项. 你可以在脚本中任何你想让选项生效的地方插入set -o option-name, 或者使用更简单的形式, set -option-abbrev. 这两种形式是等价的. 如果你想在脚本中禁用某个选项, 可以使用set +o option-name或set +option-abb","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/33_options","/code/shell/part5/33_options.md"]],
  ["v-75f467df","/code/shell/part5/34_Gotchas.html",{"title":"第34章 陷阱","type":"article","readingTime":{"minutes":12.07,"words":3621},"excerpt":"第34章 陷阱 \" Turandot: Gli enigmi sono tre, la morte una!\" \" Caleph: No, no! Gli enigmi sono tre, una la vita!\" \" ——Puccini\" 以下的做法（非推荐）将让你原本平淡无奇的生活激动不已。 将保留字或特殊字符声明为变量名。; 使用连字符或其他保留字符","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/34_Gotchas","/code/shell/part5/34_Gotchas.md"]],
  ["v-f6621c66","/code/shell/part5/36_10_shell_scripting_under_windows.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_10_shell_scripting_under_windows","/code/shell/part5/36_10_shell_scripting_under_windows.md"]],
  ["v-719f9d3f","/code/shell/part5/36_11_ssh_remote_operate.html",{"title":"","type":"article","readingTime":{"minutes":2.02,"words":606},"excerpt":"sh远程脚本 expect非交互式 ［#!/usr/bin/expect］ 这一行告诉操作系统脚本里的代码使用那一个shell来执行。这里的expect其实和linux下的bash、windows下的cmd是一类东西。 注意：这一行需要在脚本的第一行。 ［set timeout 30］ 基本上认识英文的都知道这是设置超时时间的，现在你只要记住他的计时单位是：","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_11_ssh_remote_operate","/code/shell/part5/36_11_ssh_remote_operate.md"]],
  ["v-6bf8603e","/code/shell/part5/36_1_interactive_and_non-interactive_shells_and_scripts.html",{"title":"36.1 交互和非交互shell以及脚本","type":"article","readingTime":{"minutes":2.63,"words":789},"excerpt":"36.1 交互和非交互shell以及脚本 交互shell从tty读取用户输入。shell默认会读取启动文件，显示提示符和打开任务控制等。用户可以和shell交互。 脚本总是运行在非交互的shell上。同样，脚本可以访问它自己的tty，这使得在脚本中依然可以模拟出交互的shell。 一个要求用户输入的交互脚本，通常会用到read语句（请看例15-3）。不过实际","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_1_interactive_and_non-interactive_shells_and_scripts","/code/shell/part5/36_1_interactive_and_non-interactive_shells_and_scripts.md"]],
  ["v-34aff614","/code/shell/part5/36_2_shell_wrappers.html",{"title":"36.2 shell wrappers","type":"article","readingTime":{"minutes":6.4,"words":1920},"excerpt":"36.2 shell wrappers wrapper是一个包含系统命令和工具的脚本，脚本会把一些参数传递给这些（脚本内的）命令。将一个复杂的命令封装成一个wrapper是为了调用它时比较简单好记，特别在使用sed和awk命令时会这么做。 sed或awk脚本通常在命令行下调用时是sed -e '命令'或者awk '命令'。在Bash脚本中嵌入这些命令会让它们","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_2_shell_wrappers","/code/shell/part5/36_2_shell_wrappers.md"]],
  ["v-5c17fa36","/code/shell/part5/36_3_tests_and_comparisons_alternatives.html",{"title":"36.3 测试和比较的其他方法","type":"article","readingTime":{"minutes":0.63,"words":189},"excerpt":"36.3 测试和比较的其他方法 对于判断（test命令）来说，[[ ]]比[ ]更加合适。同样的，算数运算符（译注：-eq之类的）比(( ))更有优势。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_3_tests_and_comparisons_alternatives","/code/shell/part5/36_3_tests_and_comparisons_alternatives.md"]],
  ["v-95fb4b80","/code/shell/part5/36_4_recursion_a_script_calling_itself.html",{"title":"36.4 递归：可以调用自己的脚本","type":"article","readingTime":{"minutes":3.05,"words":914},"excerpt":"36.4 递归：可以调用自己的脚本 脚本可以递归的调用自己吗？答案是肯定的。 Example 36-10. 可以调用自己的脚本（但没什么实际用途） Example 36-11. 一个有点用的调用自己的脚本 Example 36-12. 另一个调用自己的脚本 过多层次的递归调用会导致脚本的栈空间溢出，引起段错误（segfault）。","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_4_recursion_a_script_calling_itself","/code/shell/part5/36_4_recursion_a_script_calling_itself.md"]],
  ["v-39d19511","/code/shell/part5/36_5_colorizing_scripts.html",{"title":"echo命令","type":"article","readingTime":{"minutes":0.66,"words":198},"excerpt":"echo命令 -e 使转义符生效 如: 解释\\t \\n含义; -n 不换行输出; 字颜色：30—–37 echo -e “\\033[30m 黑色字 \\033[0m” echo -e “\\033[31m 红色字 \\033[0m” echo -e “\\033[32m 绿色字 \\033[0m” echo -e “\\033[33m 黄色字 \\033[0m” echo","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_5_colorizing_scripts","/code/shell/part5/36_5_colorizing_scripts.md"]],
  ["v-0e9831c3","/code/shell/part5/36_6_optimizations.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_6_optimizations","/code/shell/part5/36_6_optimizations.md"]],
  ["v-7c814d38","/code/shell/part5/36_7_1_ideas_for_more_powerful_scripts.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_7_1_ideas_for_more_powerful_scripts","/code/shell/part5/36_7_1_ideas_for_more_powerful_scripts.md"]],
  ["v-e4ba63b4","/code/shell/part5/36_7_2_widgets.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_7_2_widgets","/code/shell/part5/36_7_2_widgets.md"]],
  ["v-77518a00","/code/shell/part5/36_7_assorted_tips.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_7_assorted_tips","/code/shell/part5/36_7_assorted_tips.md"]],
  ["v-5b2bfecf","/code/shell/part5/36_8_1_infected_shell_scripts.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_8_1_infected_shell_scripts","/code/shell/part5/36_8_1_infected_shell_scripts.md"]],
  ["v-13799cfe","/code/shell/part5/36_8_2_hiding_shell_script_source.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_8_2_hiding_shell_script_source","/code/shell/part5/36_8_2_hiding_shell_script_source.md"]],
  ["v-49e744cb","/code/shell/part5/36_8_3_writing_secure_shell_scripts.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_8_3_writing_secure_shell_scripts","/code/shell/part5/36_8_3_writing_secure_shell_scripts.md"]],
  ["v-22d43eee","/code/shell/part5/36_8_security_issues.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_8_security_issues","/code/shell/part5/36_8_security_issues.md"]],
  ["v-bace1048","/code/shell/part5/36_9_portability_issues.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/shell/part5/36_9_portability_issues","/code/shell/part5/36_9_portability_issues.md"]],
  ["v-2c406bc2","/code/shell/part5/36_miscellany.html",{"title":"第36章 杂项","type":"article","readingTime":{"minutes":0.36,"words":109},"excerpt":"第36章 杂项 \" Nobody really knows what the Bourne shell's grammar is. Even examination of the source code is little help.\" \" ——Tom Duff\" 目录 36.1 交互和非交互shell以及脚本; 36.2 shell wrappers; 3","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/36_miscellany","/code/shell/part5/36_miscellany.md"]],
  ["v-71241cd6","/code/shell/part5/",{"title":"第五部分 高级话题","type":"article","readingTime":{"minutes":0.48,"words":143},"excerpt":"第五部分 高级话题 目录 18.正则表达式; 18.1正则表达式简介; 18.2文件名替换; 19. 嵌入文档; 20. I/O 重定向; 20.1 使用 exec; 20.2 重定向代码块; 20.3 应用程序; 22. 限制模式的Shell; 23. 进程替换; 24. 函数; 24.1 复杂函数和函数复杂性; 24.2 局部变量; 24.3 不适用局部","author":"LinuxStory","category":["Linux"],"tag":["Bash"]},["/code/shell/part5/index.html","/code/shell/part5/readme.md"]],
  ["v-67e2ac92","/monitor/elk/install/ansible-elk.html",{"title":"elk借助安装ansible","type":"article","readingTime":{"minutes":5.27,"words":1581},"excerpt":"elk借助安装ansible ansible配置 安装 Elasticsearch \" 执行playbook前，首先要进行数据磁盘的挂载，挂载到数据目录，es数据节点磁盘占用很大\" 配置Node间SSL 注意：这里是指配置ES集群节点间transport的SSL认证，对于ES节点的HTTP API接口并没有配置，所以通过API访问ES时不需要提供证书。 参考","category":["监控"],"tag":["ELK"]},["/monitor/elk/install/ansible-elk","/monitor/elk/install/ansible-elk.md"]],
  ["v-0262463e","/monitor/elk/install/docker-com-elk.html",{"title":"容器部署ELK7.10","type":"article","readingTime":{"minutes":15.66,"words":4697},"excerpt":"容器部署ELK7.10 \" 转载自 YP小站\" 一、elk架构简介 首先 logstash 具有日志采集、过滤、筛选等功能，功能完善但同时体量也会比较大，消耗系统资源自然也多。filebeat作为一个轻量级日志采集工具，虽然没有过滤筛选功能，但是仅仅部署在应用服务器作为我们采集日志的工具可以是说最好的选择。但我们有些时候可能又需要logstash的过滤筛选功","category":["监控"],"tag":["ELK"]},["/monitor/elk/install/docker-com-elk","/monitor/elk/install/docker-com-elk.md"]],
  ["v-7eca6a15","/monitor/elk/install/docker-elk.html",{"title":"在Docker容器中运行Elasticsearch，Kibana和Cerebro","type":"article","readingTime":{"minutes":0.9,"words":271},"excerpt":"在Docker容器中运行Elasticsearch，Kibana和Cerebro Elastic Stack 与Docker 容器 Elastic官方提供Docker Image; 如果安装定制的插件，可以写Dockerfile，将官方Image设为Base Image; 2018年12月加入CNCF，提供helm; 2019年5月，7.1版本发布，同时发布","category":["监控"],"tag":["ELK"]},["/monitor/elk/install/docker-elk","/monitor/elk/install/docker-elk.md"]],
  ["v-1066f37c","/monitor/elk/install/quick-browse.html",{"title":"Kibana的安装和界面快速浏览","type":"article","readingTime":{"minutes":0.42,"words":126},"excerpt":"Kibana的安装和界面快速浏览 安装运行 下载地址： \" https://www.elastic.co/cn/downloads/kibana\" 解压并安装运行 Kibana Console Dev Tool; Search Profiler; Help + 一些快捷键; cmd + / (查看API帮助文档); cmd + option + I; cmd","category":["监控"],"tag":["ELK"]},["/monitor/elk/install/quick-browse","/monitor/elk/install/quick-browse.md"]],
  ["v-a99caf98","/monitor/elk/install/sample-install.html",{"title":"Elasticsearch的安装和简单配置","type":"article","readingTime":{"minutes":1.01,"words":302},"excerpt":"Elasticsearch的安装和简单配置 安装 安装JAVA 运维Elasticsearch，需要安装并配置JDK，设置$JAVA_HOME; 各个版本对Java的依赖; Elasticsearch 5 需要Java8以上的版本; Elasticsearch 从6.5开始支持Java11; 7.0 开始，内置了Java环境; 安装Elasticsearch","category":["监控"],"tag":["ELK"]},["/monitor/elk/install/sample-install","/monitor/elk/install/sample-install.md"]],
  ["v-557d432e","/monitor/elk/primer/basic.html",{"title":"基本概念","type":"article","readingTime":{"minutes":5.72,"words":1716},"excerpt":"基本概念 Index索引; Type类型; Document文档; Node节点; shard分片; 文档（Document） Elasticsearch是面向文档的，文档时所有可搜索数据的最小单位; 日志文件中的日志项; 一本电影的具体信息/一张唱片的详细信息; MP3播放器里的一首歌/一篇PDF文档中的具体内容; 文档会被序列化成JSON格式，保存在El","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/basic","/monitor/elk/primer/basic.md"]],
  ["v-2174d5ac","/monitor/elk/primer/crup.html",{"title":"文档的基本操作CRUP与批量操作","type":"article","readingTime":{"minutes":1.81,"words":542},"excerpt":"文档的基本操作CRUP与批量操作 文档的CRUD Type名，约定都用_doc; Create - 如果ID已经存在，会失败; Index - 如果ID不存在，创建新的文档。否则，先删除现有的文档，再创建现有的文档，再创建新的文档，版本会增加; Update - 文档必须已经存在，更新只会对相应字段做增量修改; Create一个文档 支持自动生产文档id和指","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/crup","/monitor/elk/primer/crup.md"]],
  ["v-4d3d0ebc","/monitor/elk/primer/inverted-index.html",{"title":"倒排索引入门","type":"article","readingTime":{"minutes":1.36,"words":409},"excerpt":"倒排索引入门 正排与倒排索引 在一本书的开始，有一个目录 - 正排; 在一本书的最后，有一个索引页 - 倒排; 根据关键词查看内容所在页 图书和索引引擎的类比 图书; 正排索引 - 目录页; 倒排索引 - 索引页; 索引引擎; 正排索引 - 文档id到文档内容和单词的关联; 倒排索引 - 单词到文档id的关联; 举例 倒排索引 倒排索引的核心组成 倒排索引包","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/inverted-index","/monitor/elk/primer/inverted-index.md"]],
  ["v-4b23de69","/monitor/elk/primer/participle.html",{"title":"通过分析器进行分词","type":"article","readingTime":{"minutes":1.72,"words":515},"excerpt":"通过分析器进行分词 Analysis Analysis与Analyzer Analysis - 文本分析是把全文本转换一系列单词（term/token）的过程，也叫分词; Analysis是通过Analyzer来实现的; 可使用Elasticsearch内置的分析器/或者按需定制化分析器; 除了在数据写入时转换词条，匹配Query语句时候也需要用相同的分析器","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/participle","/monitor/elk/primer/participle.md"]],
  ["v-15434565","/monitor/elk/primer/req-body.html",{"title":"Request Body和Query DSL简介","type":"article","readingTime":{"minutes":0.98,"words":293},"excerpt":"Request Body和Query DSL简介 Request Body Search 将查询语句通过HTTP Request Body发送给Elasticsearch; Query DSL; 举例 分页 From从0开始，默认返回10个结果; 获取靠后的翻页成本较高; 排序 最好在\"数字型\"与\"日期型\"字段上排序; 因为对于多值类型或分析过的字段排序，系","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/req-body","/monitor/elk/primer/req-body.md"]],
  ["v-b5e49b3a","/monitor/elk/primer/search-api-de.html",{"title":"URI Search详解","type":"article","readingTime":{"minutes":0.96,"words":288},"excerpt":"URI Search详解 通过URI query实现搜索 q 指定查询语句，使用Query String Syntax; df 指定默认字段，不指定时会对所有字段进行查询; Sort排序 / from 和size用于分页; Profile 可以查看查询是如何被执行的; Query String Syntax 指定字段 v.s 泛查询; q=title:201","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/search-api-de","/monitor/elk/primer/search-api-de.md"]],
  ["v-465a39a1","/monitor/elk/primer/search-api.html",{"title":"Search API概览","type":"article","readingTime":{"minutes":0.6,"words":179},"excerpt":"Search API概览 Search API URI Search; 在URL中使用查询参数; Request Body Search; 使用Elasticsearch提供的，基于JSON格式的更加完备的Query Domain Specific Language （DSL）; 指定查询的索引 URI查询 使用\"q\"，指定查询字符串; \"query str","category":["监控"],"tag":["ELK"]},["/monitor/elk/primer/search-api","/monitor/elk/primer/search-api.md"]],
  ["v-5d327303","/monitor/elk/summarize/develop.html",{"title":"Elasticsearch 简介及其发展历史","type":"article","readingTime":{"minutes":2.21,"words":664},"excerpt":"Elasticsearch 简介及其发展历史 从开源到上市 2018年10月纽交所上市，Elastic Inc -开源软件/上市公司; 当前市值超过50亿美金，开盘当天涨幅达94%; Elasticsearch软件下载量，超3.5亿次; 10万+的社区成员; 7200+订阅用户，分布在100+国家; 云服务平台的接入- Elastic，Amazon，阿里巴巴","category":["监控"],"tag":["ELK"]},["/monitor/elk/summarize/develop","/monitor/elk/summarize/develop.md"]],
  ["v-3ef4cbf4","/monitor/elk/summarize/scene.html",{"title":"Elastic Stack 家族成员及其应用场景","type":"article","readingTime":{"minutes":1.76,"words":529},"excerpt":"Elastic Stack 家族成员及其应用场景 Elastic Stack 生态圈 Logstash： 数据处理管道 开源的服务端数据处理管道，支持从不同来源采集数据，转换数据，并将数据发送到不通的存储库中; 发展; Logstash诞生于2009年，最初用来做日志的采集与处理; 2013年被Elasticsearch收购; 特性; 实时解析和转换数据; ","category":["监控"],"tag":["ELK"]},["/monitor/elk/summarize/scene","/monitor/elk/summarize/scene.md"]],
  ["v-582427ba","/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/shell-sed.html",{"title":"sed命令详解","type":"article","readingTime":{"minutes":8.07,"words":2420},"excerpt":"Let's learn the sed command together！ 概述 sed是stream editor的简称，也就是流编辑器。它一次处理一行内容，处理是，当前处理的行存储在临时缓冲区中，成为“pattern space”,接着用sed命令处理缓冲区中的内容，处理完后，把缓冲区的内容送往屏幕。接着处理下一行，这样不断重复，知道文件末尾。文件内容并","date":"2017-09-24T21:00:00.000Z","tag":["shell"]},["/other/待整理/blog-knowledge/shell-sed.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/shell-sed","/other/待整理/blog-knowledge/shell-sed.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/blog-knowledge/shell-sed.md"]],
  ["v-d0688ad6","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8821%EF%BC%89-find.html",{"title":"每天一个linux命令（21）-find之xargs","type":"article","readingTime":{"minutes":5.37,"words":1610},"excerpt":"在使用 find命令的-exec选项处理匹配到的文件时， find命令将所有匹配到的文件一起传递给exec执行。但有些系统对能够传递给exec的命令长度有限制，这样在find命令运行几分钟之后，就会出现溢出错误。错误信息通常是“参数列太长”或“参数列溢出”。这就是xargs命令的用处所在，特别是与find命令一起使用。 find命令把匹配到的文件传递给xar","date":"2018-07-27T18:50:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（21）-find.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8821%EF%BC%89-find","/other/待整理/linux命令/每天一个linux命令（21）-find.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8821%EF%BC%89-find.md"]],
  ["v-14498f4b","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8829%EF%BC%89-chown.html",{"title":"每天一个linux命令（29）-chown","type":"article","readingTime":{"minutes":2.9,"words":869},"excerpt":"chown将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。系统管理员经常使用chown命令，在将文件拷贝到另一个用户的名录下之后，让用户拥有使用该文件的权限。 语法 chown(选项)(参数) 选项 参数 用户：组：指定所有者和所属工作组。当省略“：组”，仅改变文","date":"2018-07-27T18:58:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（29）-chown.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8829%EF%BC%89-chown","/other/待整理/linux命令/每天一个linux命令（29）-chown.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8829%EF%BC%89-chown.md"]],
  ["v-f8d17c08","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8833%EF%BC%89-du.html",{"title":"每天一个linux命令（33）-du","type":"article","readingTime":{"minutes":2.77,"words":832},"excerpt":"du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。 语法 du [选项][文件] 选项 常用实例 1）显示目录或者文件所占空间 说明： 只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小 2）显示指定文件所占空间 3）查看指定目录的所","date":"2018-07-27T19:03:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（33）-du.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8833%EF%BC%89-du","/other/待整理/linux命令/每天一个linux命令（33）-du.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8833%EF%BC%89-du.md"]],
  ["v-769b02c6","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8835%EF%BC%89-diff.html",{"title":"每天一个linux命令（35）-diff","type":"article","readingTime":{"minutes":6.72,"words":2016},"excerpt":"diff 命令是 linux上非常重要的工具，用于比较文件的内容，特别是比较两个版本不同的文件以找到改动的地方。diff在命令行中打印每一个行的改动。最新版本的diff还支持二进制文件。diff程序的输出被称为补丁 (patch)，因为Linux系统中还有一个patch程序，可以根据diff的输出将a.c的文件内容更新为b.c。diff是svn、cvs、gi","date":"2018-07-27T19:05:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（35）-diff.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8835%EF%BC%89-diff","/other/待整理/linux命令/每天一个linux命令（35）-diff.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8835%EF%BC%89-diff.md"]],
  ["v-0215d71c","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8836%EF%BC%89-date.html",{"title":"每天一个linux命令（36）-date","type":"article","readingTime":{"minutes":2.78,"words":834},"excerpt":"在linux环境中，不管是编程还是其他维护，时间是必不可少的，也经常会用到时间的运算，熟练运用date命令来表示自己想要表示的时间，肯定可以给自己的工作带来诸多方便。 语法 date(选项)(参数) 选项 参数 ：指定显示时使用的日期时间格式。 日期格式字符串列表 常用实例 1）格式化输出： 2）输出昨天日期： 3）2秒后输出： 4）apache格式转换： ","date":"2018-07-27T19:07:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（36）-date.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8836%EF%BC%89-date","/other/待整理/linux命令/每天一个linux命令（36）-date.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8836%EF%BC%89-date.md"]],
  ["v-3bb98840","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8842%EF%BC%89-killall.html",{"title":"每天一个linux命令（42）-killall","type":"article","readingTime":{"minutes":2.04,"words":611},"excerpt":"Linux系统中的killall命令用于杀死指定名字的进程（kill processes by name）。我们可以使用kill命令杀死指定进程PID的进程，如果要找到我们需要杀死的进程，我们还需要在之前使用ps等命令再配合grep来查找进程，而killall把这两个过程合二为一，是一个很好用的命令。 语法 killall(选项)(参数) 选项 参数 进程名","date":"2018-07-27T19:13:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（42）-killall.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8842%EF%BC%89-killall","/other/待整理/linux命令/每天一个linux命令（42）-killall.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8842%EF%BC%89-killall.md"]],
  ["v-c0d2447e","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8845%EF%BC%89-vmstat.html",{"title":"每天一个linux命令（45）-vmstat","type":"article","readingTime":{"minutes":13.08,"words":3925},"excerpt":"vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写，可对操作系统的虚拟内存、进程、CPU活动进行监控。他是对系统整体情况进行统计，不足之处是无法对某个进程今次那个深入分析。vmstat工具提供了一种低开销的系统性能观察方式。因为vmstat本身就是低开销工具，在非常高负荷的服务器上，你需要查看并监控系统的健康情况，在控制","date":"2018-07-27T19:16:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（45）-vmstat.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8845%EF%BC%89-vmstat","/other/待整理/linux命令/每天一个linux命令（45）-vmstat.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8845%EF%BC%89-vmstat.md"]],
  ["v-7f1266d1","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8846%EF%BC%89-iostat.html",{"title":"每天一个linux命令（46）-iostat","type":"article","readingTime":{"minutes":7.18,"words":2154},"excerpt":"Linux系统中的 iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。同vmstat一样，iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析。iostat属于sysstat软件包。可以用yum i","date":"2018-07-27T19:17:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（46）-iostat.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8846%EF%BC%89-iostat","/other/待整理/linux命令/每天一个linux命令（46）-iostat.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8846%EF%BC%89-iostat.md"]],
  ["v-a27ac06c","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8849%EF%BC%89-lsof.html",{"title":"每天一个linux命令（49）-lsof","type":"article","readingTime":{"minutes":7.1,"words":2131},"excerpt":"lsof（list open files）是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统","date":"2018-07-27T19:20:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（49）-lsof.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8849%EF%BC%89-lsof","/other/待整理/linux命令/每天一个linux命令（49）-lsof.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8849%EF%BC%89-lsof.md"]],
  ["v-7503515e","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8852%EF%BC%89-ping.html",{"title":"每天一个linux命令（52）-ping","type":"article","readingTime":{"minutes":4.63,"words":1390},"excerpt":"Linux系统的ping命令是常用的网络命令，它通常用来测试与目标主机的连通性，我们经常会说“ping一下某机器，看是不是开着”、不能打开网页时会说“你先ping网关地址192.168.1.1试试”。它通过发送ICMP ECHOREQUEST数据包到网络主机（send ICMP ECHOREQUEST to network hosts），并显示响应情况，这样","date":"2018-07-27T19:23:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（52）-ping.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8852%EF%BC%89-ping","/other/待整理/linux命令/每天一个linux命令（52）-ping.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8852%EF%BC%89-ping.md"]],
  ["v-02aa1bcb","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8853%EF%BC%89-traceroute.html",{"title":"每天一个linux命令（53）-traceroute","type":"article","readingTime":{"minutes":8.77,"words":2632},"excerpt":"通过traceroute我们可以知道信息从你的计算机到互联网另一端的主机是走的什么路径。当然每次数据包由某一同样的出发点（source）到达某一同样的目的地(destination)走的路径可能会不一样，但基本上来说大部分时候所走的路由是相同的。linux系统中，我们称之为traceroute,在MS Windows中为tracert。 traceroute","date":"2018-07-27T19:24:00.000Z","category":["Linux"],"tag":["linux常用命令"]},["/other/待整理/linux命令/每天一个linux命令（53）-traceroute.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8853%EF%BC%89-traceroute","/other/待整理/linux命令/每天一个linux命令（53）-traceroute.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8853%EF%BC%89-traceroute.md"]],
  ["v-8578e31a","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8854%EF%BC%89-netstat.html",{"title":"","type":"article","readingTime":{"minutes":3.74,"words":1122},"excerpt":"用于显示各种网络相关信息，如网络连接，路由表，接口状态 (Interface Statistics)，masquerade 连接，多播成员 (Multicast Memberships) 等等。 语法 netstat [-acCeFghilMnNoprstuvVwx] 选项 注意：LISTEN和LISTENING的状态只有用-a或者-l才能看到 网络连接状态"},["/other/待整理/linux命令/每天一个linux命令（54）-netstat.html","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8854%EF%BC%89-netstat","/other/待整理/linux命令/每天一个linux命令（54）-netstat.md","/other/%E5%BE%85%E6%95%B4%E7%90%86/linux%E5%91%BD%E4%BB%A4/%E6%AF%8F%E5%A4%A9%E4%B8%80%E4%B8%AAlinux%E5%91%BD%E4%BB%A4%EF%BC%8854%EF%BC%89-netstat.md"]],
  ["v-1edc345e","/monitor/elk/bak/install/04_kafka.html",{"title":"一、 Kafka中几个重要概念介绍","type":"article","readingTime":{"minutes":15.05,"words":4516},"excerpt":"\" 转载自：消息中间件—Kafka数据存储（一）| 癫狂侠 \" 摘要：消息存储对于每一款消息队列都非常重要，那么Kafka在这方面是如何来设计做到高效的呢？ Kafka这款分布式消息队列使用文件系统和操作系统的页缓存（page cache）分别存储和缓存消息，摒弃了Java的堆缓存机制，同时将随机写操作改为顺序写，再结合Zero-Copy的特性极大地改善了I"},["/monitor/elk/bak/install/04_kafka","/monitor/elk/bak/install/04_kafka.md"]],
  ["v-5dd0a05d","/monitor/elk/bak/install/05_filebeat.html",{"title":"","type":"article","readingTime":{"minutes":0.57,"words":171},"excerpt":"1. 下载rpm包 ​\t2. 修改启动项 ​\tcentos7安装filebeat需要注意修改/usr/lib/systemd/system/filebeat.service\r\" 主要修改的地方为：\"\r\"\"\r\" * Environment=\"BEATLOGOPTS=-e\" 改为 Environment=\"BEATLOGOPTS\" \"\r\" * ExecStart"},["/monitor/elk/bak/install/05_filebeat","/monitor/elk/bak/install/05_filebeat.md"]],
  ["v-d82f5728","/monitor/elk/bak/install/06-elk.html",{"title":"如何用ELK搭建TB级的日志监控系统？","type":"article","readingTime":{"minutes":7.17,"words":2150},"excerpt":"如何用ELK搭建TB级的日志监控系统？ \r\" 转载自：如何用ELK搭建TB级的日志监控系统？| 非洲羚羊 \" 本文主要介绍怎么使用 ELK Stack 帮助我们打造一个支撑起日产 TB 级的日志监控系统。在企业级的微服务环境中，跑着成百上千个服务都算是比较小的规模了。在生产环境上，日志扮演着很重要的角色，排查异常需要日志，性能优化需要日志，业务排查需要业务等"},["/monitor/elk/bak/install/06-elk","/monitor/elk/bak/install/06-elk.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-2897d318","/slides/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slides/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-01560935","/timeline/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/timeline/index.html"]],
  ["v-155824b4","/category/%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/",{"title":"常见服务的搭建 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/常见服务的搭建/","/category/%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E7%9A%84%E6%90%AD%E5%BB%BA/index.html"]],
  ["v-1fc637b7","/tag/activemq/",{"title":"activemq 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/activemq/index.html"]],
  ["v-0a85b3c4","/category/%E7%9B%91%E6%8E%A7/",{"title":"监控 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/监控/","/category/%E7%9B%91%E6%8E%A7/index.html"]],
  ["v-b30e41a8","/tag/jdk/",{"title":"jdk 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jdk/index.html"]],
  ["v-1715b471","/category/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/",{"title":"自动化工具 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/自动化工具/","/category/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%B7%A5%E5%85%B7/index.html"]],
  ["v-19898164","/tag/shadowsocks/",{"title":"shadowsocks 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/shadowsocks/index.html"]],
  ["v-227ecbd6","/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{"title":"计算机网络 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/计算机网络/","/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.html"]],
  ["v-3cf1a829","/tag/confluence/",{"title":"confluence 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/confluence/index.html"]],
  ["v-4c40caa5","/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{"title":"操作系统 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/操作系统/","/category/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.html"]],
  ["v-726fbe70","/tag/fastdfs/",{"title":"fastdfs 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/fastdfs/index.html"]],
  ["v-6193b4f4","/category/%E4%BA%91%E5%8E%9F%E7%94%9F/",{"title":"云原生 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/云原生/","/category/%E4%BA%91%E5%8E%9F%E7%94%9F/index.html"]],
  ["v-3a134560","/tag/%E5%8D%9A%E5%AE%A2/",{"title":"博客 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/博客/","/tag/%E5%8D%9A%E5%AE%A2/index.html"]],
  ["v-9717cc36","/category/mysql/",{"title":"MySQL 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/mysql/index.html"]],
  ["v-1ab38844","/tag/nexus/",{"title":"nexus 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/nexus/index.html"]],
  ["v-8848dfa8","/category/redis/",{"title":"Redis 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/redis/index.html"]],
  ["v-63bcc623","/tag/rabbitmq/",{"title":"rabbitmq 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/rabbitmq/index.html"]],
  ["v-e9c7e408","/category/%E5%89%8D%E7%AB%AF/",{"title":"前端 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/前端/","/category/%E5%89%8D%E7%AB%AF/index.html"]],
  ["v-5616b529","/tag/rocketmq/",{"title":"rocketmq 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/rocketmq/index.html"]],
  ["v-78cbe7bb","/category/python/",{"title":"Python 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/python/index.html"]],
  ["v-2671299e","/tag/zookeeper/",{"title":"zookeeper 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/zookeeper/index.html"]],
  ["v-9c48d85a","/category/linux/",{"title":"Linux 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/linux/index.html"]],
  ["v-b310d42a","/tag/git/",{"title":"Git 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/git/index.html"]],
  ["v-e9a125fe","/category/golang/",{"title":"Golang 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/golang/index.html"]],
  ["v-db15110e","/tag/grafana/",{"title":"grafana 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/grafana/index.html"]],
  ["v-c3ed50a2","/category/web%E4%B8%AD%E9%97%B4%E4%BB%B6/",{"title":"web中间件 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/web中间件/","/category/web%E4%B8%AD%E9%97%B4%E4%BB%B6/index.html"]],
  ["v-465d9bbe","/tag/alert/",{"title":"alert 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/alert/index.html"]],
  ["v-7070c6d0","/tag/openldap/",{"title":"openldap 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/openldap/index.html"]],
  ["v-169ad378","/tag/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/",{"title":"技术博客 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/技术博客/","/tag/%E6%8A%80%E6%9C%AF%E5%8D%9A%E5%AE%A2/index.html"]],
  ["v-03efcc30","/tag/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/",{"title":"奇技淫巧 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/奇技淫巧/","/tag/%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7/index.html"]],
  ["v-b30b9fe4","/tag/mac/",{"title":"Mac 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/mac/index.html"]],
  ["v-b30332ba","/tag/vim/",{"title":"vim 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/vim/index.html"]],
  ["v-68014528","/tag/%E5%86%99%E4%BD%9C%E6%8E%92%E7%89%88/",{"title":"写作排版 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/写作排版/","/tag/%E5%86%99%E4%BD%9C%E6%8E%92%E7%89%88/index.html"]],
  ["v-6e776c45","/tag/ansible/",{"title":"Ansible 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/ansible/index.html"]],
  ["v-13275df4","/tag/gitlab/",{"title":"Gitlab 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/gitlab/index.html"]],
  ["v-30e11687","/tag/jenkins/",{"title":"Jenkins 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jenkins/index.html"]],
  ["v-49a91360","/tag/jumpserver/",{"title":"jumpserver 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jumpserver/index.html"]],
  ["v-6e3f2a98","/tag/%E5%8E%9F%E7%90%86/",{"title":"原理 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/原理/","/tag/%E5%8E%9F%E7%90%86/index.html"]],
  ["v-6106c001","/tag/docker/",{"title":"Docker 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/docker/index.html"]],
  ["v-2863bf51","/tag/etcd/",{"title":"etcd 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/etcd/index.html"]],
  ["v-742fbe9b","/tag/kubernetes/",{"title":"Kubernetes 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/kubernetes/index.html"]],
  ["v-1d8b4315","/tag/harbor/",{"title":"harbor 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/harbor/index.html"]],
  ["v-302533af","/tag/%E5%B7%A5%E4%BD%9C%E8%84%9A%E6%9C%AC/",{"title":"工作脚本 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/工作脚本/","/tag/%E5%B7%A5%E4%BD%9C%E8%84%9A%E6%9C%AC/index.html"]],
  ["v-200c1937","/tag/vscode/",{"title":"vscode 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/vscode/index.html"]],
  ["v-42e0c678","/tag/%E6%A6%82%E5%BF%B5/",{"title":"概念 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/概念/","/tag/%E6%A6%82%E5%BF%B5/index.html"]],
  ["v-4b6ff193","/tag/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/",{"title":"常见问题 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/常见问题/","/tag/%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/index.html"]],
  ["v-2831124d","/tag/bash/",{"title":"Bash 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/bash/index.html"]],
  ["v-013498cd","/tag/%E9%A3%8E%E6%A0%BC/",{"title":"风格 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/风格/","/tag/%E9%A3%8E%E6%A0%BC/index.html"]],
  ["v-b312914e","/tag/elk/",{"title":"ELK 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/elk/index.html"]],
  ["v-be049512","/tag/prometheus/",{"title":"prometheus 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/prometheus/index.html"]],
  ["v-564c406a","/tag/zabbix/",{"title":"Zabbix 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/zabbix/index.html"]],
  ["v-1a8900ba","/tag/nginx/",{"title":"Nginx 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/nginx/index.html"]],
  ["v-a018a546","/tag/tomcat/",{"title":"Tomcat 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/tomcat/index.html"]],
  ["v-09601066","/tag/shell/",{"title":"shell 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/shell/index.html"]],
  ["v-d4172afa","/tag/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/",{"title":"linux常用命令 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/linux常用命令/","/tag/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/index.html"]],
]

export const pagesRoutes = routeItems.reduce(
  (result, [name, path, meta, redirects]) => {
    result.push(
      {
        name,
        path,
        component: Vuepress,
        meta,
      },
      ...redirects.map((item) => ({
        path: item,
        redirect: path,
      }))
    )
    return result
  },
  [
    {
      name: "404",
      path: "/:catchAll(.*)",
      component: Vuepress,
    }
  ]
)
